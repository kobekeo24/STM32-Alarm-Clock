
STM32-Alarm-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a9c  08007a9c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa4  08007aa4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000014c  08007bf8  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08007bf8  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010214  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fee  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  00032e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211fb  00000000  00000000  00033830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e02c  00000000  00000000  00054a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6278  00000000  00000000  00062a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe4  00000000  00000000  00128d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078ac 	.word	0x080078ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080078ac 	.word	0x080078ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <RTC_INIT_TIME>:

/* variables -----------------------------------------------------------------*/

/* funtions -----------------------------------------------------------------*/
void RTC_INIT_TIME(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	RTC_map.seconds_reg = TIME_SECONDS_REG;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <RTC_INIT_TIME+0x70>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	RTC_map.minutes_reg = TIME_MINUTES_REG;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	705a      	strb	r2, [r3, #1]
	RTC_map.hours_reg   = TIME_HOURS_REG;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	709a      	strb	r2, [r3, #2]
	RTC_map.day_reg     = TIME_DAY_REG;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	70da      	strb	r2, [r3, #3]
	RTC_map.date_reg    = TIME_DATE_REG;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	711a      	strb	r2, [r3, #4]
	RTC_map.month_reg 	= TIME_MONTH_REG;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005bc:	2205      	movs	r2, #5
 80005be:	715a      	strb	r2, [r3, #5]
	RTC_map.year_reg 	= TIME_YEAR_REG;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005c2:	2206      	movs	r2, #6
 80005c4:	719a      	strb	r2, [r3, #6]
	RTC_map.A1s_reg		= ALARM1_SECONDS_REG;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	71da      	strb	r2, [r3, #7]
	RTC_map.A1m_reg		= ALARM1_MINUTES_REG;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	721a      	strb	r2, [r3, #8]
	RTC_map.A1h_reg		= ALARM1_HOURS_REG;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	725a      	strb	r2, [r3, #9]
	RTC_map.A1dd_reg	= ALARM1_DAY_DATE_REG;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005da:	220a      	movs	r2, #10
 80005dc:	729a      	strb	r2, [r3, #10]
	RTC_map.A2m_reg		= ALARM2_MINUTES_REG;
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005e0:	220b      	movs	r2, #11
 80005e2:	72da      	strb	r2, [r3, #11]
	RTC_map.A2h_reg		= ALARM2_HOURS_REG;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	731a      	strb	r2, [r3, #12]
	RTC_map.A2dd_reg	= ALARM2_DAY_DATE_REG;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005ec:	220d      	movs	r2, #13
 80005ee:	735a      	strb	r2, [r3, #13]
	RTC_map.control_reg	= CONTROL_REG;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005f2:	220e      	movs	r2, #14
 80005f4:	739a      	strb	r2, [r3, #14]
	RTC_map.status_reg	= STATUS_REG;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005f8:	220f      	movs	r2, #15
 80005fa:	73da      	strb	r2, [r3, #15]
	for(uint8_t i = 0; i < STATUS_REG + 1; i++)
	{
		RTC_Read(i, (&RTC_mem.byte) + i);
	}
*/
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200002d0 	.word	0x200002d0

0800060c <RTC_Write>:

void RTC_Write(uint8_t reg, uint8_t data)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
	  static uint8_t payload[2];
	  payload[0] = reg;
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <RTC_Write+0x3c>)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	7013      	strb	r3, [r2, #0]
	  payload[1] = data;
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <RTC_Write+0x3c>)
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	7053      	strb	r3, [r2, #1]
	  HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS,payload,2,100);
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <RTC_Write+0x3c>)
 8000630:	21d0      	movs	r1, #208	; 0xd0
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <RTC_Write+0x40>)
 8000634:	f002 fa5e 	bl	8002af4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(30);
 8000638:	201e      	movs	r0, #30
 800063a:	f001 f9eb 	bl	8001a14 <HAL_Delay>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000170 	.word	0x20000170
 800064c:	200001f0 	.word	0x200001f0

08000650 <RTC_Read>:

void RTC_Read(uint8_t* p_reg, uint8_t *p_data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	//Ask slave to read data from register
	HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS+1,p_reg,1,10);
 800065a:	230a      	movs	r3, #10
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	21d1      	movs	r1, #209	; 0xd1
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <RTC_Read+0x38>)
 8000666:	f002 fa45 	bl	8002af4 <HAL_I2C_Master_Transmit>
	//Store data
	HAL_I2C_Master_Receive(&hi2c1,RTC_ADDRESS,p_data,1,10);
 800066a:	230a      	movs	r3, #10
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	21d0      	movs	r1, #208	; 0xd0
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <RTC_Read+0x38>)
 8000676:	f002 fb3b 	bl	8002cf0 <HAL_I2C_Master_Receive>
	HAL_Delay(30);
 800067a:	201e      	movs	r0, #30
 800067c:	f001 f9ca 	bl	8001a14 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001f0 	.word	0x200001f0

0800068c <RTC_Enable_Alarm_IT>:

void RTC_Enable_Alarm_IT(uint8_t alarm)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&RTC_map.control_reg, (&RTC_mem.byte) +  RTC_map.control_reg);
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 8000698:	7b9b      	ldrb	r3, [r3, #14]
 800069a:	461a      	mov	r2, r3
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 800069e:	4413      	add	r3, r2
 80006a0:	4619      	mov	r1, r3
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <RTC_Enable_Alarm_IT+0x6c>)
 80006a4:	f7ff ffd4 	bl	8000650 <RTC_Read>
	//Enable Alarm 1 interrupt
	if(alarm == 1)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d108      	bne.n	80006c0 <RTC_Enable_Alarm_IT+0x34>
	{
		RTC_mem.mem.control_A1IE = 0x01;
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006b0:	7b93      	ldrb	r3, [r2, #14]
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm1_set = true;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	749a      	strb	r2, [r3, #18]
 80006be:	e007      	b.n	80006d0 <RTC_Enable_Alarm_IT+0x44>
	}
	//Enable Alarm 2 interrupt
	else
	{
		RTC_mem.mem.control_A2IE = 0x01;
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006c2:	7b93      	ldrb	r3, [r2, #14]
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm2_set = true;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	74da      	strb	r2, [r3, #19]
	}



	RTC_Write(RTC_map.control_reg, (&RTC_mem.byte)[RTC_map.control_reg]);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006d2:	7b9a      	ldrb	r2, [r3, #14]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006d6:	7b9b      	ldrb	r3, [r3, #14]
 80006d8:	4619      	mov	r1, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006dc:	440b      	add	r3, r1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f7ff ff92 	bl	800060c <RTC_Write>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200002d0 	.word	0x200002d0
 80006f4:	200002c0 	.word	0x200002c0
 80006f8:	200002de 	.word	0x200002de

080006fc <RTC_Clear_Alarm_IT>:

void RTC_Clear_Alarm_IT(uint8_t alarm)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&RTC_map.status_reg, (&RTC_mem.byte) + RTC_map.status_reg);
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000708:	7bdb      	ldrb	r3, [r3, #15]
 800070a:	461a      	mov	r2, r3
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800070e:	4413      	add	r3, r2
 8000710:	4619      	mov	r1, r3
 8000712:	4829      	ldr	r0, [pc, #164]	; (80007b8 <RTC_Clear_Alarm_IT+0xbc>)
 8000714:	f7ff ff9c 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.control_reg, (&RTC_mem.byte) +  RTC_map.control_reg);
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800071a:	7b9b      	ldrb	r3, [r3, #14]
 800071c:	461a      	mov	r2, r3
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000720:	4413      	add	r3, r2
 8000722:	4619      	mov	r1, r3
 8000724:	4825      	ldr	r0, [pc, #148]	; (80007bc <RTC_Clear_Alarm_IT+0xc0>)
 8000726:	f7ff ff93 	bl	8000650 <RTC_Read>

	//Clear Alarm 1 interrupt
	if(alarm == 1)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d110      	bne.n	8000752 <RTC_Clear_Alarm_IT+0x56>
	{
		RTC_mem.mem.status_A1F = 0;
 8000730:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000732:	7bd3      	ldrb	r3, [r2, #15]
 8000734:	f36f 0300 	bfc	r3, #0, #1
 8000738:	73d3      	strb	r3, [r2, #15]
		RTC_mem.mem.control_A1IE = 0;
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800073c:	7b93      	ldrb	r3, [r2, #14]
 800073e:	f36f 0300 	bfc	r3, #0, #1
 8000742:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm1_triggered = false;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000746:	2200      	movs	r2, #0
 8000748:	741a      	strb	r2, [r3, #16]

		RTC_map.b_alarm1_set = false;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800074c:	2200      	movs	r2, #0
 800074e:	749a      	strb	r2, [r3, #18]
 8000750:	e00f      	b.n	8000772 <RTC_Clear_Alarm_IT+0x76>
	}
	//Clear Alarm 2 interrupt
	else
	{
		RTC_mem.mem.status_A2F = 0;
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000754:	7bd3      	ldrb	r3, [r2, #15]
 8000756:	f36f 0341 	bfc	r3, #1, #1
 800075a:	73d3      	strb	r3, [r2, #15]
		RTC_mem.mem.control_A2IE = 0;
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800075e:	7b93      	ldrb	r3, [r2, #14]
 8000760:	f36f 0341 	bfc	r3, #1, #1
 8000764:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm2_triggered = false;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000768:	2200      	movs	r2, #0
 800076a:	745a      	strb	r2, [r3, #17]

		RTC_map.b_alarm2_set = false;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800076e:	2200      	movs	r2, #0
 8000770:	74da      	strb	r2, [r3, #19]
	}

	RTC_Write(RTC_map.control_reg, (&RTC_mem.byte)[RTC_map.control_reg]);
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000774:	7b9a      	ldrb	r2, [r3, #14]
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000778:	7b9b      	ldrb	r3, [r3, #14]
 800077a:	4619      	mov	r1, r3
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800077e:	440b      	add	r3, r1
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	4610      	mov	r0, r2
 8000786:	f7ff ff41 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.status_reg, (&RTC_mem.byte)[RTC_map.status_reg]);
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800078c:	7bda      	ldrb	r2, [r3, #15]
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000790:	7bdb      	ldrb	r3, [r3, #15]
 8000792:	4619      	mov	r1, r3
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000796:	440b      	add	r3, r1
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	4610      	mov	r0, r2
 800079e:	f7ff ff35 	bl	800060c <RTC_Write>
	HAL_Delay(30);
 80007a2:	201e      	movs	r0, #30
 80007a4:	f001 f936 	bl	8001a14 <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200002d0 	.word	0x200002d0
 80007b4:	200002c0 	.word	0x200002c0
 80007b8:	200002df 	.word	0x200002df
 80007bc:	200002de 	.word	0x200002de

080007c0 <RTC_Display_Time>:

void RTC_Display_Time(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af02      	add	r7, sp, #8
	static uint8_t seconds, minutes, hours, day;
	RTC_Read(&RTC_map.seconds_reg, (&RTC_mem.byte) + RTC_map.seconds_reg);
 80007c6:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <RTC_Display_Time+0x108>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <RTC_Display_Time+0x10c>)
 80007ce:	4413      	add	r3, r2
 80007d0:	4619      	mov	r1, r3
 80007d2:	483d      	ldr	r0, [pc, #244]	; (80008c8 <RTC_Display_Time+0x108>)
 80007d4:	f7ff ff3c 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.minutes_reg, (&RTC_mem.byte) + RTC_map.minutes_reg);
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <RTC_Display_Time+0x108>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <RTC_Display_Time+0x10c>)
 80007e0:	4413      	add	r3, r2
 80007e2:	4619      	mov	r1, r3
 80007e4:	483a      	ldr	r0, [pc, #232]	; (80008d0 <RTC_Display_Time+0x110>)
 80007e6:	f7ff ff33 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.hours_reg, (&RTC_mem.byte) + RTC_map.hours_reg);
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <RTC_Display_Time+0x108>)
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b36      	ldr	r3, [pc, #216]	; (80008cc <RTC_Display_Time+0x10c>)
 80007f2:	4413      	add	r3, r2
 80007f4:	4619      	mov	r1, r3
 80007f6:	4837      	ldr	r0, [pc, #220]	; (80008d4 <RTC_Display_Time+0x114>)
 80007f8:	f7ff ff2a 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.day_reg, (&RTC_mem.byte) + RTC_map.day_reg);
 80007fc:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <RTC_Display_Time+0x108>)
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	461a      	mov	r2, r3
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <RTC_Display_Time+0x10c>)
 8000804:	4413      	add	r3, r2
 8000806:	4619      	mov	r1, r3
 8000808:	4833      	ldr	r0, [pc, #204]	; (80008d8 <RTC_Display_Time+0x118>)
 800080a:	f7ff ff21 	bl	8000650 <RTC_Read>

	seconds = (&RTC_mem.byte)[RTC_map.seconds_reg];
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <RTC_Display_Time+0x108>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <RTC_Display_Time+0x10c>)
 8000816:	4413      	add	r3, r2
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <RTC_Display_Time+0x11c>)
 800081c:	701a      	strb	r2, [r3, #0]
	minutes = (&RTC_mem.byte)[RTC_map.minutes_reg];
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <RTC_Display_Time+0x108>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	461a      	mov	r2, r3
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <RTC_Display_Time+0x10c>)
 8000826:	4413      	add	r3, r2
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <RTC_Display_Time+0x120>)
 800082c:	701a      	strb	r2, [r3, #0]
	//hours   = RTC_mem.mem.hours_10s << 4 + RTC_mem.mem.hours_1s;
	day     = (&RTC_mem.byte)[RTC_map.day_reg];
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <RTC_Display_Time+0x108>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	461a      	mov	r2, r3
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <RTC_Display_Time+0x10c>)
 8000836:	4413      	add	r3, r2
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <RTC_Display_Time+0x124>)
 800083c:	701a      	strb	r2, [r3, #0]

	if(last_second != seconds || last_minute != minutes || last_hour != hours)
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <RTC_Display_Time+0x128>)
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <RTC_Display_Time+0x11c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d10b      	bne.n	8000862 <RTC_Display_Time+0xa2>
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <RTC_Display_Time+0x12c>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <RTC_Display_Time+0x120>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d105      	bne.n	8000862 <RTC_Display_Time+0xa2>
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <RTC_Display_Time+0x130>)
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <RTC_Display_Time+0x134>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d022      	beq.n	80008a8 <RTC_Display_Time+0xe8>
	{
		sprintf(txData, "%x%x:%x:%x\n",RTC_mem.mem.hours_10s,RTC_mem.mem.hours_1s, minutes, seconds);
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <RTC_Display_Time+0x10c>)
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <RTC_Display_Time+0x10c>)
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <RTC_Display_Time+0x120>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <RTC_Display_Time+0x11c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	9200      	str	r2, [sp, #0]
 8000888:	4603      	mov	r3, r0
 800088a:	460a      	mov	r2, r1
 800088c:	491a      	ldr	r1, [pc, #104]	; (80008f8 <RTC_Display_Time+0x138>)
 800088e:	481b      	ldr	r0, [pc, #108]	; (80008fc <RTC_Display_Time+0x13c>)
 8000890:	f006 fb50 	bl	8006f34 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 10);
 8000894:	4819      	ldr	r0, [pc, #100]	; (80008fc <RTC_Display_Time+0x13c>)
 8000896:	f7ff fca5 	bl	80001e4 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	230a      	movs	r3, #10
 80008a0:	4916      	ldr	r1, [pc, #88]	; (80008fc <RTC_Display_Time+0x13c>)
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <RTC_Display_Time+0x140>)
 80008a4:	f005 fa0b 	bl	8005cbe <HAL_UART_Transmit>
	}
	last_second = seconds;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <RTC_Display_Time+0x11c>)
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <RTC_Display_Time+0x128>)
 80008ae:	701a      	strb	r2, [r3, #0]
	last_minute = minutes;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <RTC_Display_Time+0x120>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <RTC_Display_Time+0x12c>)
 80008b6:	701a      	strb	r2, [r3, #0]
	last_hour	= hours;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <RTC_Display_Time+0x134>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <RTC_Display_Time+0x130>)
 80008be:	701a      	strb	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002d0 	.word	0x200002d0
 80008cc:	200002c0 	.word	0x200002c0
 80008d0:	200002d1 	.word	0x200002d1
 80008d4:	200002d2 	.word	0x200002d2
 80008d8:	200002d3 	.word	0x200002d3
 80008dc:	20000172 	.word	0x20000172
 80008e0:	20000173 	.word	0x20000173
 80008e4:	20000174 	.word	0x20000174
 80008e8:	20000168 	.word	0x20000168
 80008ec:	20000169 	.word	0x20000169
 80008f0:	2000016a 	.word	0x2000016a
 80008f4:	20000175 	.word	0x20000175
 80008f8:	080078c4 	.word	0x080078c4
 80008fc:	200001bc 	.word	0x200001bc
 8000900:	2000027c 	.word	0x2000027c

08000904 <RTC_Set_Time>:
	(&RTC_mem.byte)[RTC_map.hours_reg] = hours;
	RTC_Write(RTC_map.hours_reg, hours);
}

void RTC_Set_Time(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	460b      	mov	r3, r1
 8000910:	71bb      	strb	r3, [r7, #6]
 8000912:	4613      	mov	r3, r2
 8000914:	717b      	strb	r3, [r7, #5]
	(&RTC_mem.byte)[RTC_map.seconds_reg] = seconds;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <RTC_Set_Time+0x70>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <RTC_Set_Time+0x74>)
 800091e:	4413      	add	r3, r2
 8000920:	797a      	ldrb	r2, [r7, #5]
 8000922:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.minutes_reg] = minutes;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <RTC_Set_Time+0x70>)
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	461a      	mov	r2, r3
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <RTC_Set_Time+0x74>)
 800092c:	4413      	add	r3, r2
 800092e:	79ba      	ldrb	r2, [r7, #6]
 8000930:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.hours_reg]   = hours;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <RTC_Set_Time+0x70>)
 8000934:	789b      	ldrb	r3, [r3, #2]
 8000936:	461a      	mov	r2, r3
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <RTC_Set_Time+0x74>)
 800093a:	4413      	add	r3, r2
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	701a      	strb	r2, [r3, #0]

	RTC_Write(RTC_map.seconds_reg, seconds);
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <RTC_Set_Time+0x70>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	797a      	ldrb	r2, [r7, #5]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fe5f 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.minutes_reg, minutes);
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <RTC_Set_Time+0x70>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe58 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.hours_reg, hours);
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <RTC_Set_Time+0x70>)
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe51 	bl	800060c <RTC_Write>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200002d0 	.word	0x200002d0
 8000978:	200002c0 	.word	0x200002c0

0800097c <RTC_Day_Date>:

void RTC_Day_Date(uint8_t day, uint8_t date)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
	(&RTC_mem.byte)[RTC_map.day_reg] = day;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <RTC_Day_Date+0x50>)
 800098e:	78db      	ldrb	r3, [r3, #3]
 8000990:	461a      	mov	r2, r3
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <RTC_Day_Date+0x54>)
 8000994:	4413      	add	r3, r2
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.date_reg] = date;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <RTC_Day_Date+0x50>)
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	461a      	mov	r2, r3
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <RTC_Day_Date+0x54>)
 80009a2:	4413      	add	r3, r2
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	701a      	strb	r2, [r3, #0]

	RTC_Write(RTC_map.day_reg, day);
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <RTC_Day_Date+0x50>)
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe2b 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.date_reg, date);
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <RTC_Day_Date+0x50>)
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	79ba      	ldrb	r2, [r7, #6]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe24 	bl	800060c <RTC_Write>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200002d0 	.word	0x200002d0
 80009d0:	200002c0 	.word	0x200002c0

080009d4 <RTC_Set_Alarm>:

void RTC_Set_Alarm(uint8_t alarm, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4604      	mov	r4, r0
 80009dc:	4608      	mov	r0, r1
 80009de:	4611      	mov	r1, r2
 80009e0:	461a      	mov	r2, r3
 80009e2:	4623      	mov	r3, r4
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	4603      	mov	r3, r0
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	460b      	mov	r3, r1
 80009ec:	717b      	strb	r3, [r7, #5]
 80009ee:	4613      	mov	r3, r2
 80009f0:	713b      	strb	r3, [r7, #4]
	RTC_Clear_Alarm_IT(alarm);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe81 	bl	80006fc <RTC_Clear_Alarm_IT>
	if(alarm == 0x01)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d152      	bne.n	8000aa6 <RTC_Set_Alarm+0xd2>
	{
		(&RTC_mem.byte)[RTC_map.A1s_reg] = seconds;
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a02:	79db      	ldrb	r3, [r3, #7]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	793a      	ldrb	r2, [r7, #4]
 8000a0c:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A1m_reg] = minutes;
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a10:	7a1b      	ldrb	r3, [r3, #8]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a16:	4413      	add	r3, r2
 8000a18:	797a      	ldrb	r2, [r7, #5]
 8000a1a:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A1h_reg]   = hours;
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a1e:	7a5b      	ldrb	r3, [r3, #9]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a24:	4413      	add	r3, r2
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	701a      	strb	r2, [r3, #0]
		RTC_mem.mem.A1_day_date_sel = 0x01;
 8000a2a:	4a42      	ldr	r2, [pc, #264]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a2c:	7a93      	ldrb	r3, [r2, #10]
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	7293      	strb	r3, [r2, #10]
		RTC_mem.mem.A1_day_date =  RTC_mem.mem.day;
 8000a34:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a36:	78db      	ldrb	r3, [r3, #3]
 8000a38:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	4a3b      	ldr	r2, [pc, #236]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a46:	7a93      	ldrb	r3, [r2, #10]
 8000a48:	f361 0303 	bfi	r3, r1, #0, #4
 8000a4c:	7293      	strb	r3, [r2, #10]


		RTC_Write(RTC_map.A1s_reg, seconds);
 8000a4e:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a50:	79db      	ldrb	r3, [r3, #7]
 8000a52:	793a      	ldrb	r2, [r7, #4]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fdd8 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A1m_reg, minutes);
 8000a5c:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a5e:	7a1b      	ldrb	r3, [r3, #8]
 8000a60:	797a      	ldrb	r2, [r7, #5]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdd1 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A1h_reg, hours);
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a6c:	7a5b      	ldrb	r3, [r3, #9]
 8000a6e:	79ba      	ldrb	r2, [r7, #6]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fdca 	bl	800060c <RTC_Write>
		RTC_Read(&RTC_map.A1dd_reg, (&RTC_mem.byte)[RTC_map.A1dd_reg]);
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a7a:	7a9b      	ldrb	r3, [r3, #10]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	482c      	ldr	r0, [pc, #176]	; (8000b38 <RTC_Set_Alarm+0x164>)
 8000a88:	f7ff fde2 	bl	8000650 <RTC_Read>
		RTC_Write(RTC_map.A1dd_reg, (&RTC_mem.byte)[RTC_map.A1dd_reg]);
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a8e:	7a9a      	ldrb	r2, [r3, #10]
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a92:	7a9b      	ldrb	r3, [r3, #10]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000a98:	440b      	add	r3, r1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	f7ff fdb4 	bl	800060c <RTC_Write>
 8000aa4:	e038      	b.n	8000b18 <RTC_Set_Alarm+0x144>
	}

	else if(alarm == 0x02)
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d135      	bne.n	8000b18 <RTC_Set_Alarm+0x144>
	{
		(&RTC_mem.byte)[RTC_map.A2m_reg] = minutes;
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000aae:	7adb      	ldrb	r3, [r3, #11]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000ab4:	4413      	add	r3, r2
 8000ab6:	797a      	ldrb	r2, [r7, #5]
 8000ab8:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A2h_reg]   = hours;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000abc:	7b1b      	ldrb	r3, [r3, #12]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	79ba      	ldrb	r2, [r7, #6]
 8000ac6:	701a      	strb	r2, [r3, #0]
		RTC_mem.mem.A2_day_date_sel = 0x01;
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000aca:	7b53      	ldrb	r3, [r2, #13]
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	7353      	strb	r3, [r2, #13]

		RTC_Write(RTC_map.A2m_reg, minutes);
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000ad4:	7adb      	ldrb	r3, [r3, #11]
 8000ad6:	797a      	ldrb	r2, [r7, #5]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd96 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A2h_reg, hours);
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000ae2:	7b1b      	ldrb	r3, [r3, #12]
 8000ae4:	79ba      	ldrb	r2, [r7, #6]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd8f 	bl	800060c <RTC_Write>
		RTC_Read(&RTC_map.A2dd_reg, (&RTC_mem.byte)+ RTC_map.A2dd_reg);
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000af0:	7b5b      	ldrb	r3, [r3, #13]
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000af6:	4413      	add	r3, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <RTC_Set_Alarm+0x168>)
 8000afc:	f7ff fda8 	bl	8000650 <RTC_Read>
		RTC_Write(RTC_map.A2dd_reg, (&RTC_mem.byte) + RTC_map.A2dd_reg);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000b02:	7b5b      	ldrb	r3, [r3, #13]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000b06:	7b52      	ldrb	r2, [r2, #13]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000b0c:	440a      	add	r2, r1
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd7a 	bl	800060c <RTC_Write>
	}
	RTC_Clear_Alarm_IT(alarm);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fdee 	bl	80006fc <RTC_Clear_Alarm_IT>
	RTC_Enable_Alarm_IT(alarm);
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fdb2 	bl	800068c <RTC_Enable_Alarm_IT>
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	200002d0 	.word	0x200002d0
 8000b34:	200002c0 	.word	0x200002c0
 8000b38:	200002da 	.word	0x200002da
 8000b3c:	200002dd 	.word	0x200002dd

08000b40 <RTC_Alarm_triggered>:

bool RTC_Alarm_triggered(uint8_t alarm)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	if(RTC_is_Alarm_triggered())
 8000b4a:	f000 f817 	bl	8000b7c <RTC_is_Alarm_triggered>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <RTC_Alarm_triggered+0x2c>
	{
		if(alarm == 0x01)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d102      	bne.n	8000b60 <RTC_Alarm_triggered+0x20>
		{
			return RTC_map.b_alarm1_triggered;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <RTC_Alarm_triggered+0x38>)
 8000b5c:	7c1b      	ldrb	r3, [r3, #16]
 8000b5e:	e007      	b.n	8000b70 <RTC_Alarm_triggered+0x30>
		}
		else if(alarm == 0x02)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d104      	bne.n	8000b70 <RTC_Alarm_triggered+0x30>
		{
			return RTC_map.b_alarm2_triggered;
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <RTC_Alarm_triggered+0x38>)
 8000b68:	7c5b      	ldrb	r3, [r3, #17]
 8000b6a:	e001      	b.n	8000b70 <RTC_Alarm_triggered+0x30>
		}
	}
	else
	{
		return false;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e7ff      	b.n	8000b70 <RTC_Alarm_triggered+0x30>
	}
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200002d0 	.word	0x200002d0

08000b7c <RTC_is_Alarm_triggered>:

bool RTC_is_Alarm_triggered(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	RTC_Read(&RTC_map.status_reg, (&RTC_mem.byte) + RTC_map.status_reg);
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <RTC_is_Alarm_triggered+0x50>)
 8000b82:	7bdb      	ldrb	r3, [r3, #15]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <RTC_is_Alarm_triggered+0x54>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <RTC_is_Alarm_triggered+0x58>)
 8000b8e:	f7ff fd5f 	bl	8000650 <RTC_Read>
	if(b_alarm_triggered)
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <RTC_is_Alarm_triggered+0x5c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d014      	beq.n	8000bc4 <RTC_is_Alarm_triggered+0x48>
	{
		if(RTC_mem.mem.status_A1F == 1)
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <RTC_is_Alarm_triggered+0x54>)
 8000b9c:	7bdb      	ldrb	r3, [r3, #15]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <RTC_is_Alarm_triggered+0x34>
		{
			RTC_map.b_alarm1_triggered = true;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <RTC_is_Alarm_triggered+0x50>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	741a      	strb	r2, [r3, #16]
 8000bae:	e009      	b.n	8000bc4 <RTC_is_Alarm_triggered+0x48>
		}
		else if(RTC_mem.mem.status_A2F == 1)
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <RTC_is_Alarm_triggered+0x54>)
 8000bb2:	7bdb      	ldrb	r3, [r3, #15]
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <RTC_is_Alarm_triggered+0x48>
		{
			RTC_map.b_alarm2_triggered = true;
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <RTC_is_Alarm_triggered+0x50>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	745a      	strb	r2, [r3, #17]
		}
	}
	return b_alarm_triggered;
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <RTC_is_Alarm_triggered+0x5c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200002d0 	.word	0x200002d0
 8000bd0:	200002c0 	.word	0x200002c0
 8000bd4:	200002df 	.word	0x200002df
 8000bd8:	2000016b 	.word	0x2000016b

08000bdc <RTC_User_Set_Time>:

void RTC_User_Set_Time(bool b_set_alarm)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	static uint8_t user_seconds;
	static uint8_t user_minutes;
	static uint8_t user_hours;

	g_user_buffer_index = 0;
 8000be6:	4b7d      	ldr	r3, [pc, #500]	; (8000ddc <RTC_User_Set_Time+0x200>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000bec:	2232      	movs	r2, #50	; 0x32
 8000bee:	2100      	movs	r1, #0
 8000bf0:	487b      	ldr	r0, [pc, #492]	; (8000de0 <RTC_User_Set_Time+0x204>)
 8000bf2:	f006 f997 	bl	8006f24 <memset>
	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_seconds,strlen(Ask_seconds), 50);
 8000bf6:	487b      	ldr	r0, [pc, #492]	; (8000de4 <RTC_User_Set_Time+0x208>)
 8000bf8:	f7ff faf4 	bl	80001e4 <strlen>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	2332      	movs	r3, #50	; 0x32
 8000c02:	4978      	ldr	r1, [pc, #480]	; (8000de4 <RTC_User_Set_Time+0x208>)
 8000c04:	4878      	ldr	r0, [pc, #480]	; (8000de8 <RTC_User_Set_Time+0x20c>)
 8000c06:	f005 f85a 	bl	8005cbe <HAL_UART_Transmit>
	HAL_Delay(200);
 8000c0a:	20c8      	movs	r0, #200	; 0xc8
 8000c0c:	f000 ff02 	bl	8001a14 <HAL_Delay>
	while(!b_message_received);
 8000c10:	bf00      	nop
 8000c12:	4b76      	ldr	r3, [pc, #472]	; (8000dec <RTC_User_Set_Time+0x210>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	f083 0301 	eor.w	r3, r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f8      	bne.n	8000c12 <RTC_User_Set_Time+0x36>
	HAL_Delay(50);
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f000 fef7 	bl	8001a14 <HAL_Delay>
	user_seconds = HEX_LUT[ atoi(g_user_buffer) ];
 8000c26:	486e      	ldr	r0, [pc, #440]	; (8000de0 <RTC_User_Set_Time+0x204>)
 8000c28:	f006 f94e 	bl	8006ec8 <atoi>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a70      	ldr	r2, [pc, #448]	; (8000df0 <RTC_User_Set_Time+0x214>)
 8000c30:	5cd2      	ldrb	r2, [r2, r3]
 8000c32:	4b70      	ldr	r3, [pc, #448]	; (8000df4 <RTC_User_Set_Time+0x218>)
 8000c34:	701a      	strb	r2, [r3, #0]

	g_user_buffer_index = 0;
 8000c36:	4b69      	ldr	r3, [pc, #420]	; (8000ddc <RTC_User_Set_Time+0x200>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000c3c:	2232      	movs	r2, #50	; 0x32
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4867      	ldr	r0, [pc, #412]	; (8000de0 <RTC_User_Set_Time+0x204>)
 8000c42:	f006 f96f 	bl	8006f24 <memset>
	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_minutes,strlen(Ask_minutes), 50);
 8000c46:	486c      	ldr	r0, [pc, #432]	; (8000df8 <RTC_User_Set_Time+0x21c>)
 8000c48:	f7ff facc 	bl	80001e4 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	2332      	movs	r3, #50	; 0x32
 8000c52:	4969      	ldr	r1, [pc, #420]	; (8000df8 <RTC_User_Set_Time+0x21c>)
 8000c54:	4864      	ldr	r0, [pc, #400]	; (8000de8 <RTC_User_Set_Time+0x20c>)
 8000c56:	f005 f832 	bl	8005cbe <HAL_UART_Transmit>
	b_message_received = false;
 8000c5a:	4b64      	ldr	r3, [pc, #400]	; (8000dec <RTC_User_Set_Time+0x210>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8000c60:	20c8      	movs	r0, #200	; 0xc8
 8000c62:	f000 fed7 	bl	8001a14 <HAL_Delay>
	while(!b_message_received);
 8000c66:	bf00      	nop
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <RTC_User_Set_Time+0x210>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f083 0301 	eor.w	r3, r3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f8      	bne.n	8000c68 <RTC_User_Set_Time+0x8c>
	HAL_Delay(50);
 8000c76:	2032      	movs	r0, #50	; 0x32
 8000c78:	f000 fecc 	bl	8001a14 <HAL_Delay>
	user_minutes = HEX_LUT[ atoi(g_user_buffer) ];
 8000c7c:	4858      	ldr	r0, [pc, #352]	; (8000de0 <RTC_User_Set_Time+0x204>)
 8000c7e:	f006 f923 	bl	8006ec8 <atoi>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a5a      	ldr	r2, [pc, #360]	; (8000df0 <RTC_User_Set_Time+0x214>)
 8000c86:	5cd2      	ldrb	r2, [r2, r3]
 8000c88:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <RTC_User_Set_Time+0x220>)
 8000c8a:	701a      	strb	r2, [r3, #0]

	g_user_buffer_index = 0;
 8000c8c:	4b53      	ldr	r3, [pc, #332]	; (8000ddc <RTC_User_Set_Time+0x200>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000c92:	2232      	movs	r2, #50	; 0x32
 8000c94:	2100      	movs	r1, #0
 8000c96:	4852      	ldr	r0, [pc, #328]	; (8000de0 <RTC_User_Set_Time+0x204>)
 8000c98:	f006 f944 	bl	8006f24 <memset>
	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_hours,strlen(Ask_hours), 50);
 8000c9c:	4858      	ldr	r0, [pc, #352]	; (8000e00 <RTC_User_Set_Time+0x224>)
 8000c9e:	f7ff faa1 	bl	80001e4 <strlen>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	2332      	movs	r3, #50	; 0x32
 8000ca8:	4955      	ldr	r1, [pc, #340]	; (8000e00 <RTC_User_Set_Time+0x224>)
 8000caa:	484f      	ldr	r0, [pc, #316]	; (8000de8 <RTC_User_Set_Time+0x20c>)
 8000cac:	f005 f807 	bl	8005cbe <HAL_UART_Transmit>
	b_message_received = false;
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <RTC_User_Set_Time+0x210>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8000cb6:	20c8      	movs	r0, #200	; 0xc8
 8000cb8:	f000 feac 	bl	8001a14 <HAL_Delay>
	while(!b_message_received);
 8000cbc:	bf00      	nop
 8000cbe:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <RTC_User_Set_Time+0x210>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f8      	bne.n	8000cbe <RTC_User_Set_Time+0xe2>
	HAL_Delay(100);
 8000ccc:	2064      	movs	r0, #100	; 0x64
 8000cce:	f000 fea1 	bl	8001a14 <HAL_Delay>
	user_hours = HEX_LUT[ atoi(g_user_buffer) ];
 8000cd2:	4843      	ldr	r0, [pc, #268]	; (8000de0 <RTC_User_Set_Time+0x204>)
 8000cd4:	f006 f8f8 	bl	8006ec8 <atoi>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4a45      	ldr	r2, [pc, #276]	; (8000df0 <RTC_User_Set_Time+0x214>)
 8000cdc:	5cd2      	ldrb	r2, [r2, r3]
 8000cde:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <RTC_User_Set_Time+0x228>)
 8000ce0:	701a      	strb	r2, [r3, #0]


	b_message_received = false;
 8000ce2:	4b42      	ldr	r3, [pc, #264]	; (8000dec <RTC_User_Set_Time+0x210>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	if(b_set_alarm)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d046      	beq.n	8000d7c <RTC_User_Set_Time+0x1a0>
	{
		RTC_mem.mem.A1_hours_1s = user_hours;
 8000cee:	4b45      	ldr	r3, [pc, #276]	; (8000e04 <RTC_User_Set_Time+0x228>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	b2d9      	uxtb	r1, r3
 8000cf8:	4a43      	ldr	r2, [pc, #268]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000cfa:	7a53      	ldrb	r3, [r2, #9]
 8000cfc:	f361 0303 	bfi	r3, r1, #0, #4
 8000d00:	7253      	strb	r3, [r2, #9]
		RTC_mem.mem.A1_hours_10s = user_hours >> 4;
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <RTC_User_Set_Time+0x228>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	b2d9      	uxtb	r1, r3
 8000d10:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000d12:	7a53      	ldrb	r3, [r2, #9]
 8000d14:	f361 1304 	bfi	r3, r1, #4, #1
 8000d18:	7253      	strb	r3, [r2, #9]

		RTC_Set_Alarm(0x01, (&RTC_mem.byte)[RTC_map.A1h_reg], user_minutes, user_seconds);
 8000d1a:	4b3c      	ldr	r3, [pc, #240]	; (8000e0c <RTC_User_Set_Time+0x230>)
 8000d1c:	7a5b      	ldrb	r3, [r3, #9]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000d22:	4413      	add	r3, r2
 8000d24:	7819      	ldrb	r1, [r3, #0]
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <RTC_User_Set_Time+0x220>)
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <RTC_User_Set_Time+0x218>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fe50 	bl	80009d4 <RTC_Set_Alarm>

		sprintf(txData,"Alarm Set: %x%x:%x:x",RTC_mem.mem.A1_hours_10s,RTC_mem.mem.A1_hours_1s,user_minutes,user_seconds);
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000d36:	7a5b      	ldrb	r3, [r3, #9]
 8000d38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000d42:	7a5b      	ldrb	r3, [r3, #9]
 8000d44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <RTC_User_Set_Time+0x220>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <RTC_User_Set_Time+0x218>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	9200      	str	r2, [sp, #0]
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	492c      	ldr	r1, [pc, #176]	; (8000e10 <RTC_User_Set_Time+0x234>)
 8000d60:	482c      	ldr	r0, [pc, #176]	; (8000e14 <RTC_User_Set_Time+0x238>)
 8000d62:	f006 f8e7 	bl	8006f34 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000d66:	482b      	ldr	r0, [pc, #172]	; (8000e14 <RTC_User_Set_Time+0x238>)
 8000d68:	f7ff fa3c 	bl	80001e4 <strlen>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	2332      	movs	r3, #50	; 0x32
 8000d72:	4928      	ldr	r1, [pc, #160]	; (8000e14 <RTC_User_Set_Time+0x238>)
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <RTC_User_Set_Time+0x20c>)
 8000d76:	f004 ffa2 	bl	8005cbe <HAL_UART_Transmit>
 8000d7a:	e022      	b.n	8000dc2 <RTC_User_Set_Time+0x1e6>
	}

	else
	{
		RTC_mem.mem.hours_1s = user_hours;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <RTC_User_Set_Time+0x228>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000d88:	7893      	ldrb	r3, [r2, #2]
 8000d8a:	f361 0303 	bfi	r3, r1, #0, #4
 8000d8e:	7093      	strb	r3, [r2, #2]
		RTC_mem.mem.hours_10s = user_hours >> 4;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <RTC_User_Set_Time+0x228>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2d9      	uxtb	r1, r3
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000da0:	7893      	ldrb	r3, [r2, #2]
 8000da2:	f361 1304 	bfi	r3, r1, #4, #1
 8000da6:	7093      	strb	r3, [r2, #2]
		RTC_Set_Time( (&RTC_mem.byte)[RTC_map.hours_reg], user_minutes, user_seconds);
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <RTC_User_Set_Time+0x230>)
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <RTC_User_Set_Time+0x22c>)
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <RTC_User_Set_Time+0x220>)
 8000db6:	7811      	ldrb	r1, [r2, #0]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <RTC_User_Set_Time+0x218>)
 8000dba:	7812      	ldrb	r2, [r2, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fda1 	bl	8000904 <RTC_Set_Time>
	}
	g_user_buffer_index = 0;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <RTC_User_Set_Time+0x200>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000dc8:	2232      	movs	r2, #50	; 0x32
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <RTC_User_Set_Time+0x204>)
 8000dce:	f006 f8a9 	bl	8006f24 <memset>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000016c 	.word	0x2000016c
 8000de0:	20000248 	.word	0x20000248
 8000de4:	20000000 	.word	0x20000000
 8000de8:	2000027c 	.word	0x2000027c
 8000dec:	2000027a 	.word	0x2000027a
 8000df0:	2000009c 	.word	0x2000009c
 8000df4:	20000176 	.word	0x20000176
 8000df8:	20000034 	.word	0x20000034
 8000dfc:	20000177 	.word	0x20000177
 8000e00:	20000068 	.word	0x20000068
 8000e04:	20000178 	.word	0x20000178
 8000e08:	200002c0 	.word	0x200002c0
 8000e0c:	200002d0 	.word	0x200002d0
 8000e10:	080078d0 	.word	0x080078d0
 8000e14:	200001bc 	.word	0x200001bc

08000e18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000e22:	2102      	movs	r1, #2
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e26:	f001 fcd7 	bl	80027d8 <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  b_alarm_triggered = true;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000e36:	2101      	movs	r1, #1
 8000e38:	4808      	ldr	r0, [pc, #32]	; (8000e5c <HAL_GPIO_EXTI_Callback+0x44>)
 8000e3a:	f001 fccd 	bl	80027d8 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d102      	bne.n	8000e4a <HAL_GPIO_EXTI_Callback+0x32>
  {
	  b_button_pressed = true;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40020800 	.word	0x40020800
 8000e58:	2000016b 	.word	0x2000016b
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	20000244 	.word	0x20000244

08000e64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

	  g_user_buffer[g_user_buffer_index] = rxData[0];
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_UART_RxCpltCallback+0x34>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_UART_RxCpltCallback+0x38>)
 8000e74:	7819      	ldrb	r1, [r3, #0]
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_UART_RxCpltCallback+0x3c>)
 8000e78:	5499      	strb	r1, [r3, r2]

	  g_user_buffer_index++;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_UART_RxCpltCallback+0x34>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_UART_RxCpltCallback+0x34>)
 8000e84:	701a      	strb	r2, [r3, #0]

	  b_message_received = true;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_UART_RxCpltCallback+0x40>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]

}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	2000016c 	.word	0x2000016c
 8000e9c:	20000188 	.word	0x20000188
 8000ea0:	20000248 	.word	0x20000248
 8000ea4:	2000027a 	.word	0x2000027a

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f000 fd38 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f8dc 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f9f8 	bl	80012b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec8:	f000 f9b8 	bl	800123c <MX_DMA_Init>
  MX_I2C1_Init();
 8000ecc:	f000 f934 	bl	8001138 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ed0:	f000 f960 	bl	8001194 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ed4:	f000 f988 	bl	80011e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Check if I2C device is ready
  if(HAL_I2C_IsDeviceReady(&hi2c1, OLED_ADDRESS_32H, 1, 10) == HAL_OK)
 8000ed8:	230a      	movs	r3, #10
 8000eda:	2201      	movs	r2, #1
 8000edc:	2178      	movs	r1, #120	; 0x78
 8000ede:	4859      	ldr	r0, [pc, #356]	; (8001044 <main+0x19c>)
 8000ee0:	f002 f92c 	bl	800313c <HAL_I2C_IsDeviceReady>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d105      	bne.n	8000ef6 <main+0x4e>
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4855      	ldr	r0, [pc, #340]	; (8001048 <main+0x1a0>)
 8000ef2:	f001 fc89 	bl	8002808 <HAL_GPIO_WritePin>

//  OLED_BEGIN();
//  OLED_Draw_Colon();
  //OLED_Draw(0x00);

  *txData = "Hello \n";
 8000ef6:	4b55      	ldr	r3, [pc, #340]	; (800104c <main+0x1a4>)
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b55      	ldr	r3, [pc, #340]	; (8001050 <main+0x1a8>)
 8000efc:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxData, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	4954      	ldr	r1, [pc, #336]	; (8001054 <main+0x1ac>)
 8000f02:	4855      	ldr	r0, [pc, #340]	; (8001058 <main+0x1b0>)
 8000f04:	f004 ff6d 	bl	8005de2 <HAL_UART_Receive_DMA>

  HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000f08:	4851      	ldr	r0, [pc, #324]	; (8001050 <main+0x1a8>)
 8000f0a:	f7ff f96b 	bl	80001e4 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	2332      	movs	r3, #50	; 0x32
 8000f14:	494e      	ldr	r1, [pc, #312]	; (8001050 <main+0x1a8>)
 8000f16:	4850      	ldr	r0, [pc, #320]	; (8001058 <main+0x1b0>)
 8000f18:	f004 fed1 	bl	8005cbe <HAL_UART_Transmit>



  //Time settings
  RTC_INIT_TIME();
 8000f1c:	f7ff fb3c 	bl	8000598 <RTC_INIT_TIME>
  //Set time
  RTC_Set_Time(0x65, 0x00, 0x00);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2065      	movs	r0, #101	; 0x65
 8000f26:	f7ff fced 	bl	8000904 <RTC_Set_Time>
  RTC_Day_Date(0x01, 0x20);
 8000f2a:	2120      	movs	r1, #32
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff fd25 	bl	800097c <RTC_Day_Date>

  //Alarm settings
  RTC_Set_Alarm(alarm[0], 0x65, 0x00, 0x10);
 8000f32:	4b4a      	ldr	r3, [pc, #296]	; (800105c <main+0x1b4>)
 8000f34:	7818      	ldrb	r0, [r3, #0]
 8000f36:	2310      	movs	r3, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2165      	movs	r1, #101	; 0x65
 8000f3c:	f7ff fd4a 	bl	80009d4 <RTC_Set_Alarm>

  memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000f40:	2232      	movs	r2, #50	; 0x32
 8000f42:	2100      	movs	r1, #0
 8000f44:	4846      	ldr	r0, [pc, #280]	; (8001060 <main+0x1b8>)
 8000f46:	f005 ffed 	bl	8006f24 <memset>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Read time
	  RTC_Display_Time();
 8000f4a:	f7ff fc39 	bl	80007c0 <RTC_Display_Time>

	HAL_Delay(30);
 8000f4e:	201e      	movs	r0, #30
 8000f50:	f000 fd60 	bl	8001a14 <HAL_Delay>

	if(b_button_pressed)
 8000f54:	4b43      	ldr	r3, [pc, #268]	; (8001064 <main+0x1bc>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d04d      	beq.n	8000ff8 <main+0x150>
	{
		HAL_Delay(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f60:	f000 fd58 	bl	8001a14 <HAL_Delay>
		b_button_pressed = false;
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <main+0x1bc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]

		sprintf(txData,"Would you like to set alarm (2 = Yes/1 = No)?");
 8000f6a:	493f      	ldr	r1, [pc, #252]	; (8001068 <main+0x1c0>)
 8000f6c:	4838      	ldr	r0, [pc, #224]	; (8001050 <main+0x1a8>)
 8000f6e:	f005 ffe1 	bl	8006f34 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000f72:	4837      	ldr	r0, [pc, #220]	; (8001050 <main+0x1a8>)
 8000f74:	f7ff f936 	bl	80001e4 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	2332      	movs	r3, #50	; 0x32
 8000f7e:	4934      	ldr	r1, [pc, #208]	; (8001050 <main+0x1a8>)
 8000f80:	4835      	ldr	r0, [pc, #212]	; (8001058 <main+0x1b0>)
 8000f82:	f004 fe9c 	bl	8005cbe <HAL_UART_Transmit>
		while(!b_message_received);
 8000f86:	bf00      	nop
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <main+0x1c4>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	f083 0301 	eor.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f8      	bne.n	8000f88 <main+0xe0>
		HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f000 fd3c 	bl	8001a14 <HAL_Delay>
		b_message_received = false;
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <main+0x1c4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
		if(strcmp(g_user_buffer,"Yes\n") == 0)
 8000fa2:	4933      	ldr	r1, [pc, #204]	; (8001070 <main+0x1c8>)
 8000fa4:	482e      	ldr	r0, [pc, #184]	; (8001060 <main+0x1b8>)
 8000fa6:	f7ff f913 	bl	80001d0 <strcmp>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d111      	bne.n	8000fd4 <main+0x12c>
		{
			sprintf(txData,"\nSetting Alarm\n");
 8000fb0:	4930      	ldr	r1, [pc, #192]	; (8001074 <main+0x1cc>)
 8000fb2:	4827      	ldr	r0, [pc, #156]	; (8001050 <main+0x1a8>)
 8000fb4:	f005 ffbe 	bl	8006f34 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000fb8:	4825      	ldr	r0, [pc, #148]	; (8001050 <main+0x1a8>)
 8000fba:	f7ff f913 	bl	80001e4 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	2332      	movs	r3, #50	; 0x32
 8000fc4:	4922      	ldr	r1, [pc, #136]	; (8001050 <main+0x1a8>)
 8000fc6:	4824      	ldr	r0, [pc, #144]	; (8001058 <main+0x1b0>)
 8000fc8:	f004 fe79 	bl	8005cbe <HAL_UART_Transmit>
			RTC_User_Set_Time(true);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff fe05 	bl	8000bdc <RTC_User_Set_Time>
 8000fd2:	e017      	b.n	8001004 <main+0x15c>
		}
		else
		{
			sprintf(txData,"\nSetting Time\n");
 8000fd4:	4928      	ldr	r1, [pc, #160]	; (8001078 <main+0x1d0>)
 8000fd6:	481e      	ldr	r0, [pc, #120]	; (8001050 <main+0x1a8>)
 8000fd8:	f005 ffac 	bl	8006f34 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000fdc:	481c      	ldr	r0, [pc, #112]	; (8001050 <main+0x1a8>)
 8000fde:	f7ff f901 	bl	80001e4 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	2332      	movs	r3, #50	; 0x32
 8000fe8:	4919      	ldr	r1, [pc, #100]	; (8001050 <main+0x1a8>)
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <main+0x1b0>)
 8000fec:	f004 fe67 	bl	8005cbe <HAL_UART_Transmit>
			RTC_User_Set_Time(false);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fdf3 	bl	8000bdc <RTC_User_Set_Time>
 8000ff6:	e005      	b.n	8001004 <main+0x15c>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffe:	4812      	ldr	r0, [pc, #72]	; (8001048 <main+0x1a0>)
 8001000:	f001 fc02 	bl	8002808 <HAL_GPIO_WritePin>
	}


	if(RTC_Alarm_triggered(alarm[0]))
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <main+0x1b4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fd99 	bl	8000b40 <RTC_Alarm_triggered>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d09a      	beq.n	8000f4a <main+0xa2>
	{
		RTC_Display_Time();
 8001014:	f7ff fbd4 	bl	80007c0 <RTC_Display_Time>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <main+0x1a0>)
 8001020:	f001 fbf2 	bl	8002808 <HAL_GPIO_WritePin>
		RTC_Clear_Alarm_IT(alarm[0]);
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <main+0x1b4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fb67 	bl	80006fc <RTC_Clear_Alarm_IT>
		HAL_Delay(1000);
 800102e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001032:	f000 fcef 	bl	8001a14 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <main+0x1a0>)
 800103e:	f001 fbe3 	bl	8002808 <HAL_GPIO_WritePin>
	  RTC_Display_Time();
 8001042:	e782      	b.n	8000f4a <main+0xa2>
 8001044:	200001f0 	.word	0x200001f0
 8001048:	40020c00 	.word	0x40020c00
 800104c:	080078e8 	.word	0x080078e8
 8001050:	200001bc 	.word	0x200001bc
 8001054:	20000188 	.word	0x20000188
 8001058:	2000027c 	.word	0x2000027c
 800105c:	200000d8 	.word	0x200000d8
 8001060:	20000248 	.word	0x20000248
 8001064:	20000244 	.word	0x20000244
 8001068:	080078f0 	.word	0x080078f0
 800106c:	2000027a 	.word	0x2000027a
 8001070:	08007920 	.word	0x08007920
 8001074:	08007928 	.word	0x08007928
 8001078:	08007938 	.word	0x08007938

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 ff4a 	bl	8006f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <SystemClock_Config+0xb4>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <SystemClock_Config+0xb4>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <SystemClock_Config+0xb4>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <SystemClock_Config+0xb8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <SystemClock_Config+0xb8>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <SystemClock_Config+0xb8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 f951 	bl	8005394 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010f8:	f000 f980 	bl	80013fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fbb4 	bl	8005884 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001122:	f000 f96b 	bl	80013fc <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	; 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_I2C1_Init+0x50>)
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <MX_I2C1_Init+0x54>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_I2C1_Init+0x50>)
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_I2C1_Init+0x58>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_I2C1_Init+0x50>)
 8001156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_I2C1_Init+0x50>)
 8001176:	f001 fb79 	bl	800286c <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 f93c 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200001f0 	.word	0x200001f0
 800118c:	40005400 	.word	0x40005400
 8001190:	000186a0 	.word	0x000186a0

08001194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART1_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011cc:	f004 fd2a 	bl	8005c24 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f911 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200003a4 	.word	0x200003a4
 80011e4:	40011000 	.word	0x40011000

080011e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_USART2_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x4c>)
 8001220:	f004 fd00 	bl	8005c24 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f8e7 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000027c 	.word	0x2000027c
 8001238:	40004400 	.word	0x40004400

0800123c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_DMA_Init+0x78>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <MX_DMA_Init+0x78>)
 800124c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_DMA_Init+0x78>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_DMA_Init+0x78>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <MX_DMA_Init+0x78>)
 8001268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_DMA_Init+0x78>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	200b      	movs	r0, #11
 8001280:	f000 fcc7 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001284:	200b      	movs	r0, #11
 8001286:	f000 fce0 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2010      	movs	r0, #16
 8001290:	f000 fcbf 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001294:	2010      	movs	r0, #16
 8001296:	f000 fcd8 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	203a      	movs	r0, #58	; 0x3a
 80012a0:	f000 fcb7 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a4:	203a      	movs	r0, #58	; 0x3a
 80012a6:	f000 fcd0 	bl	8001c4a <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <MX_GPIO_Init+0x134>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a45      	ldr	r2, [pc, #276]	; (80013ec <MX_GPIO_Init+0x134>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <MX_GPIO_Init+0x134>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <MX_GPIO_Init+0x134>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <MX_GPIO_Init+0x134>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_GPIO_Init+0x134>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <MX_GPIO_Init+0x134>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a37      	ldr	r2, [pc, #220]	; (80013ec <MX_GPIO_Init+0x134>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <MX_GPIO_Init+0x134>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <MX_GPIO_Init+0x134>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a30      	ldr	r2, [pc, #192]	; (80013ec <MX_GPIO_Init+0x134>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <MX_GPIO_Init+0x134>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <MX_GPIO_Init+0x138>)
 8001344:	f001 fa60 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800134e:	4829      	ldr	r0, [pc, #164]	; (80013f4 <MX_GPIO_Init+0x13c>)
 8001350:	f001 fa5a 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001354:	2302      	movs	r3, #2
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001358:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4823      	ldr	r0, [pc, #140]	; (80013f8 <MX_GPIO_Init+0x140>)
 800136a:	f001 f899 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800136e:	2301      	movs	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001372:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	481b      	ldr	r0, [pc, #108]	; (80013f0 <MX_GPIO_Init+0x138>)
 8001384:	f001 f88c 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001388:	2320      	movs	r3, #32
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4814      	ldr	r0, [pc, #80]	; (80013f0 <MX_GPIO_Init+0x138>)
 80013a0:	f001 f87e 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_GPIO_Init+0x13c>)
 80013be:	f001 f86f 	bl	80024a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2006      	movs	r0, #6
 80013c8:	f000 fc23 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013cc:	2006      	movs	r0, #6
 80013ce:	f000 fc3c 	bl	8001c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2007      	movs	r0, #7
 80013d8:	f000 fc1b 	bl	8001c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013dc:	2007      	movs	r0, #7
 80013de:	f000 fc34 	bl	8001c4a <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020c00 	.word	0x40020c00
 80013f8:	40020800 	.word	0x40020800

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x8>
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_MspInit+0x4c>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a38      	ldr	r2, [pc, #224]	; (8001558 <HAL_I2C_MspInit+0x100>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d16a      	bne.n	8001550 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_I2C_MspInit+0x104>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a36      	ldr	r2, [pc, #216]	; (800155c <HAL_I2C_MspInit+0x104>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_I2C_MspInit+0x104>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001496:	23c0      	movs	r3, #192	; 0xc0
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a6:	2304      	movs	r3, #4
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	482b      	ldr	r0, [pc, #172]	; (8001560 <HAL_I2C_MspInit+0x108>)
 80014b2:	f000 fff5 	bl	80024a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_I2C_MspInit+0x104>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_I2C_MspInit+0x104>)
 80014c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_I2C_MspInit+0x104>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <HAL_I2C_MspInit+0x110>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 80014da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014de:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 8001502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001506:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 8001516:	f000 fbb3 	bl	8001c80 <HAL_DMA_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001520:	f7ff ff6c 	bl	80013fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_I2C_MspInit+0x10c>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	201f      	movs	r0, #31
 8001536:	f000 fb6c 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800153a:	201f      	movs	r0, #31
 800153c:	f000 fb85 	bl	8001c4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2020      	movs	r0, #32
 8001546:	f000 fb64 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800154a:	2020      	movs	r0, #32
 800154c:	f000 fb7d 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40005400 	.word	0x40005400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020400 	.word	0x40020400
 8001564:	200003e8 	.word	0x200003e8
 8001568:	40026010 	.word	0x40026010

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a69      	ldr	r2, [pc, #420]	; (8001730 <HAL_UART_MspInit+0x1c4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d164      	bne.n	8001658 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	4b68      	ldr	r3, [pc, #416]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a67      	ldr	r2, [pc, #412]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b65      	ldr	r3, [pc, #404]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	4b61      	ldr	r3, [pc, #388]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a60      	ldr	r2, [pc, #384]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b5e      	ldr	r3, [pc, #376]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015d8:	2307      	movs	r3, #7
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4855      	ldr	r0, [pc, #340]	; (8001738 <HAL_UART_MspInit+0x1cc>)
 80015e4:	f000 ff5c 	bl	80024a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015e8:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_UART_MspInit+0x1d0>)
 80015ea:	4a55      	ldr	r2, [pc, #340]	; (8001740 <HAL_UART_MspInit+0x1d4>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015ee:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_UART_MspInit+0x1d0>)
 80015f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f6:	4b51      	ldr	r3, [pc, #324]	; (800173c <HAL_UART_MspInit+0x1d0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fc:	4b4f      	ldr	r3, [pc, #316]	; (800173c <HAL_UART_MspInit+0x1d0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001602:	4b4e      	ldr	r3, [pc, #312]	; (800173c <HAL_UART_MspInit+0x1d0>)
 8001604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001608:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160a:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_UART_MspInit+0x1d0>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001610:	4b4a      	ldr	r3, [pc, #296]	; (800173c <HAL_UART_MspInit+0x1d0>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_UART_MspInit+0x1d0>)
 8001618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <HAL_UART_MspInit+0x1d0>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <HAL_UART_MspInit+0x1d0>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800162a:	4844      	ldr	r0, [pc, #272]	; (800173c <HAL_UART_MspInit+0x1d0>)
 800162c:	f000 fb28 	bl	8001c80 <HAL_DMA_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001636:	f7ff fee1 	bl	80013fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a3f      	ldr	r2, [pc, #252]	; (800173c <HAL_UART_MspInit+0x1d0>)
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
 8001640:	4a3e      	ldr	r2, [pc, #248]	; (800173c <HAL_UART_MspInit+0x1d0>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2025      	movs	r0, #37	; 0x25
 800164c:	f000 fae1 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001650:	2025      	movs	r0, #37	; 0x25
 8001652:	f000 fafa 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001656:	e067      	b.n	8001728 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a39      	ldr	r2, [pc, #228]	; (8001744 <HAL_UART_MspInit+0x1d8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d162      	bne.n	8001728 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a32      	ldr	r2, [pc, #200]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_UART_MspInit+0x1c8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800169a:	230c      	movs	r3, #12
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2307      	movs	r3, #7
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4820      	ldr	r0, [pc, #128]	; (8001738 <HAL_UART_MspInit+0x1cc>)
 80016b6:	f000 fef3 	bl	80024a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016bc:	4a23      	ldr	r2, [pc, #140]	; (800174c <HAL_UART_MspInit+0x1e0>)
 80016be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016fc:	4812      	ldr	r0, [pc, #72]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 80016fe:	f000 fabf 	bl	8001c80 <HAL_DMA_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001708:	f7ff fe78 	bl	80013fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
 8001712:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_UART_MspInit+0x1dc>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2026      	movs	r0, #38	; 0x26
 800171e:	f000 fa78 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001722:	2026      	movs	r0, #38	; 0x26
 8001724:	f000 fa91 	bl	8001c4a <HAL_NVIC_EnableIRQ>
}
 8001728:	bf00      	nop
 800172a:	3730      	adds	r7, #48	; 0x30
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40011000 	.word	0x40011000
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000
 800173c:	20000344 	.word	0x20000344
 8001740:	40026440 	.word	0x40026440
 8001744:	40004400 	.word	0x40004400
 8001748:	200002e4 	.word	0x200002e4
 800174c:	40026088 	.word	0x40026088

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f91a 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f001 f847 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80017b6:	2002      	movs	r0, #2
 80017b8:	f001 f840 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Stream0_IRQHandler+0x10>)
 80017c6:	f000 fbf3 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200003e8 	.word	0x200003e8

080017d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <DMA1_Stream5_IRQHandler+0x10>)
 80017da:	f000 fbe9 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002e4 	.word	0x200002e4

080017e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <I2C1_EV_IRQHandler+0x10>)
 80017ee:	f001 fdd3 	bl	8003398 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001f0 	.word	0x200001f0

080017fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <I2C1_ER_IRQHandler+0x10>)
 8001802:	f001 ff3a 	bl	800367a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001f0 	.word	0x200001f0

08001810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART1_IRQHandler+0x10>)
 8001816:	f004 fb15 	bl	8005e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200003a4 	.word	0x200003a4

08001824 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <USART2_IRQHandler+0x10>)
 800182a:	f004 fb0b 	bl	8005e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000027c 	.word	0x2000027c

08001838 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <DMA2_Stream2_IRQHandler+0x10>)
 800183e:	f000 fbb7 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000344 	.word	0x20000344

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f005 fb28 	bl	8006ed0 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20020000 	.word	0x20020000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	2000017c 	.word	0x2000017c
 80018b4:	20000460 	.word	0x20000460

080018b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f8:	4c0b      	ldr	r4, [pc, #44]	; (8001928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001906:	f7ff ffd7 	bl	80018b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190a:	f005 fae7 	bl	8006edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7ff facb 	bl	8000ea8 <main>
  bx  lr    
 8001912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001920:	08007aac 	.word	0x08007aac
  ldr r2, =_sbss
 8001924:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001928:	2000045c 	.word	0x2000045c

0800192c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>
	...

08001930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_Init+0x40>)
 800193a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_Init+0x40>)
 8001946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x40>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f94f 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff fd50 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f967 	bl	8001c66 <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f000 f92f 	bl	8001c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200000dc 	.word	0x200000dc
 80019cc:	200000e4 	.word	0x200000e4
 80019d0:	200000e0 	.word	0x200000e0

080019d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x20>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x24>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_IncTick+0x24>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200000e4 	.word	0x200000e4
 80019f8:	20000448 	.word	0x20000448

080019fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_GetTick+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000448 	.word	0x20000448

08001a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff ffee 	bl	80019fc <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d005      	beq.n	8001a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_Delay+0x44>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ffde 	bl	80019fc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f7      	bhi.n	8001a3c <HAL_Delay+0x28>
  {
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000e4 	.word	0x200000e4

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff29 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff3e 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff31 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa2 	bl	8001bb8 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff feb6 	bl	80019fc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e099      	b.n	8001dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbc:	e00f      	b.n	8001cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cbe:	f7ff fe9d 	bl	80019fc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d908      	bls.n	8001cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e078      	b.n	8001dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e8      	bne.n	8001cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_DMA_Init+0x158>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4313      	orrs	r3, r2
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d117      	bne.n	8001da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fb0f 	bl	80023a8 <DMA_CheckFifoParam>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e016      	b.n	8001dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fac6 	bl	800233c <DMA_CalcBaseAndBitshift>
 8001db0:	4603      	mov	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	223f      	movs	r2, #63	; 0x3f
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	f010803f 	.word	0xf010803f

08001ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_DMA_Start_IT+0x26>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e040      	b.n	8001e84 <HAL_DMA_Start_IT+0xa8>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12f      	bne.n	8001e76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa58 	bl	80022e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	223f      	movs	r2, #63	; 0x3f
 8001e36:	409a      	lsls	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0216 	orr.w	r2, r2, #22
 8001e4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0208 	orr.w	r2, r2, #8
 8001e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e005      	b.n	8001e82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e9a:	f7ff fdaf 	bl	80019fc <HAL_GetTick>
 8001e9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d008      	beq.n	8001ebe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e052      	b.n	8001f64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0216 	bic.w	r2, r2, #22
 8001ecc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001edc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <HAL_DMA_Abort+0x62>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0208 	bic.w	r2, r2, #8
 8001efc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0e:	e013      	b.n	8001f38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f10:	f7ff fd74 	bl	80019fc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d90c      	bls.n	8001f38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e015      	b.n	8001f64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e4      	bne.n	8001f10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	223f      	movs	r2, #63	; 0x3f
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00c      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fbc:	4b92      	ldr	r3, [pc, #584]	; (8002208 <HAL_DMA_IRQHandler+0x258>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a92      	ldr	r2, [pc, #584]	; (800220c <HAL_DMA_IRQHandler+0x25c>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	2208      	movs	r2, #8
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01a      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2208      	movs	r2, #8
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2201      	movs	r2, #1
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2201      	movs	r2, #1
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2204      	movs	r2, #4
 8002058:	409a      	lsls	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2204      	movs	r2, #4
 8002076:	409a      	lsls	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0204 	orr.w	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2210      	movs	r2, #16
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d043      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d03c      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2210      	movs	r2, #16
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d018      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d024      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
 80020de:	e01f      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e016      	b.n	8002120 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2220      	movs	r2, #32
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 808e 	beq.w	800224e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8086 	beq.w	800224e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2220      	movs	r2, #32
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b05      	cmp	r3, #5
 8002158:	d136      	bne.n	80021c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_IRQHandler+0x1da>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	223f      	movs	r2, #63	; 0x3f
 80021a0:	409a      	lsls	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d07d      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
        }
        return;
 80021c6:	e078      	b.n	80022ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01c      	beq.n	8002210 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d108      	bne.n	80021f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d030      	beq.n	800224e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e02b      	b.n	800224e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d027      	beq.n	800224e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
 8002206:	e022      	b.n	800224e <HAL_DMA_IRQHandler+0x29e>
 8002208:	200000dc 	.word	0x200000dc
 800220c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0210 	bic.w	r2, r2, #16
 800222c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	2b00      	cmp	r3, #0
 8002254:	d032      	beq.n	80022bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d022      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2205      	movs	r2, #5
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	429a      	cmp	r2, r3
 8002284:	d307      	bcc.n	8002296 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f2      	bne.n	800227a <HAL_DMA_IRQHandler+0x2ca>
 8002294:	e000      	b.n	8002298 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002296:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e000      	b.n	80022bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80022ba:	bf00      	nop
    }
  }
}
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop

080022c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d2:	b2db      	uxtb	r3, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d108      	bne.n	8002320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800231e:	e007      	b.n	8002330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3b10      	subs	r3, #16
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <DMA_CalcBaseAndBitshift+0x64>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d909      	bls.n	800237e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	1d1a      	adds	r2, r3, #4
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	; 0x58
 800237c:	e007      	b.n	800238e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	aaaaaaab 	.word	0xaaaaaaab
 80023a4:	08007960 	.word	0x08007960

080023a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0x5a>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d856      	bhi.n	8002476 <DMA_CheckFifoParam+0xce>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <DMA_CheckFifoParam+0x28>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023f3 	.word	0x080023f3
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	08002477 	.word	0x08002477
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d046      	beq.n	800247a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e043      	b.n	800247a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fa:	d140      	bne.n	800247e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e03d      	b.n	800247e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	d121      	bne.n	8002450 <DMA_CheckFifoParam+0xa8>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d837      	bhi.n	8002482 <DMA_CheckFifoParam+0xda>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <DMA_CheckFifoParam+0x70>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	0800242f 	.word	0x0800242f
 8002420:	08002429 	.word	0x08002429
 8002424:	08002441 	.word	0x08002441
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e030      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e022      	b.n	8002486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244e:	e01c      	b.n	800248a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d903      	bls.n	800245e <DMA_CheckFifoParam+0xb6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800245c:	e018      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      break;
 8002462:	e015      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e00b      	b.n	800248e <DMA_CheckFifoParam+0xe6>
      break;
 8002476:	bf00      	nop
 8002478:	e00a      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e008      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e006      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e004      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;   
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
    }
  } 
  
  return status; 
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e16b      	b.n	8002794 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 815a 	bne.w	800278e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d005      	beq.n	80024f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d130      	bne.n	8002554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 0201 	and.w	r2, r3, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b03      	cmp	r3, #3
 800255e:	d017      	beq.n	8002590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80b4 	beq.w	800278e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b60      	ldr	r3, [pc, #384]	; (80027ac <HAL_GPIO_Init+0x30c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <HAL_GPIO_Init+0x30c>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_GPIO_Init+0x30c>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a5b      	ldr	r2, [pc, #364]	; (80027b0 <HAL_GPIO_Init+0x310>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_GPIO_Init+0x314>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02b      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a51      	ldr	r2, [pc, #324]	; (80027b8 <HAL_GPIO_Init+0x318>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d025      	beq.n	80026c2 <HAL_GPIO_Init+0x222>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_GPIO_Init+0x31c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <HAL_GPIO_Init+0x21e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4f      	ldr	r2, [pc, #316]	; (80027c0 <HAL_GPIO_Init+0x320>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_Init+0x21a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4e      	ldr	r2, [pc, #312]	; (80027c4 <HAL_GPIO_Init+0x324>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x216>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <HAL_GPIO_Init+0x328>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x212>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4c      	ldr	r2, [pc, #304]	; (80027cc <HAL_GPIO_Init+0x32c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x20e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4b      	ldr	r2, [pc, #300]	; (80027d0 <HAL_GPIO_Init+0x330>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x20a>
 80026a6:	2307      	movs	r3, #7
 80026a8:	e00e      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e00c      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026ae:	2306      	movs	r3, #6
 80026b0:	e00a      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x228>
 80026c6:	2300      	movs	r3, #0
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	f002 0203 	and.w	r2, r2, #3
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_GPIO_Init+0x310>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <HAL_GPIO_Init+0x334>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270a:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002710:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_GPIO_Init+0x334>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	f67f ae90 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40021400 	.word	0x40021400
 80027cc:	40021800 	.word	0x40021800
 80027d0:	40021c00 	.word	0x40021c00
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e001      	b.n	80027fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002824:	e003      	b.n	800282e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fadc 	bl	8000e18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40013c00 	.word	0x40013c00

0800286c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e12b      	b.n	8002ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fde0 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	; 0x24
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d0:	f003 f980 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 80028d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a81      	ldr	r2, [pc, #516]	; (8002ae0 <HAL_I2C_Init+0x274>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d807      	bhi.n	80028f0 <HAL_I2C_Init+0x84>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a80      	ldr	r2, [pc, #512]	; (8002ae4 <HAL_I2C_Init+0x278>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	bf94      	ite	ls
 80028e8:	2301      	movls	r3, #1
 80028ea:	2300      	movhi	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e006      	b.n	80028fe <HAL_I2C_Init+0x92>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a7d      	ldr	r2, [pc, #500]	; (8002ae8 <HAL_I2C_Init+0x27c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0e7      	b.n	8002ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a78      	ldr	r2, [pc, #480]	; (8002aec <HAL_I2C_Init+0x280>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0c9b      	lsrs	r3, r3, #18
 8002910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a6a      	ldr	r2, [pc, #424]	; (8002ae0 <HAL_I2C_Init+0x274>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d802      	bhi.n	8002940 <HAL_I2C_Init+0xd4>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3301      	adds	r3, #1
 800293e:	e009      	b.n	8002954 <HAL_I2C_Init+0xe8>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <HAL_I2C_Init+0x284>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	3301      	adds	r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	495c      	ldr	r1, [pc, #368]	; (8002ae0 <HAL_I2C_Init+0x274>)
 8002970:	428b      	cmp	r3, r1
 8002972:	d819      	bhi.n	80029a8 <HAL_I2C_Init+0x13c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e59      	subs	r1, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002982:	1c59      	adds	r1, r3, #1
 8002984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002988:	400b      	ands	r3, r1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_I2C_Init+0x138>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1e59      	subs	r1, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fbb1 f3f3 	udiv	r3, r1, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a2:	e051      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e04f      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d111      	bne.n	80029d4 <HAL_I2C_Init+0x168>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e012      	b.n	80029fa <HAL_I2C_Init+0x18e>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e58      	subs	r0, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x196>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e022      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10e      	bne.n	8002a28 <HAL_I2C_Init+0x1bc>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e58      	subs	r0, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	440b      	add	r3, r1
 8002a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	e00f      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	6809      	ldr	r1, [r1, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6911      	ldr	r1, [r2, #16]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68d2      	ldr	r2, [r2, #12]
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	000186a0 	.word	0x000186a0
 8002ae4:	001e847f 	.word	0x001e847f
 8002ae8:	003d08ff 	.word	0x003d08ff
 8002aec:	431bde83 	.word	0x431bde83
 8002af0:	10624dd3 	.word	0x10624dd3

08002af4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	461a      	mov	r2, r3
 8002b00:	460b      	mov	r3, r1
 8002b02:	817b      	strh	r3, [r7, #10]
 8002b04:	4613      	mov	r3, r2
 8002b06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7fe ff78 	bl	80019fc <HAL_GetTick>
 8002b0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	f040 80e0 	bne.w	8002cdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2319      	movs	r3, #25
 8002b22:	2201      	movs	r2, #1
 8002b24:	4970      	ldr	r1, [pc, #448]	; (8002ce8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f002 fa0a 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0d3      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_I2C_Master_Transmit+0x50>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e0cc      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d007      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2221      	movs	r2, #33	; 0x21
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2210      	movs	r2, #16
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	893a      	ldrh	r2, [r7, #8]
 8002b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_I2C_Master_Transmit+0x1f8>)
 8002baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f001 ffcc 	bl	8004b50 <I2C_MasterRequestWrite>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e08d      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bd8:	e066      	b.n	8002ca8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	6a39      	ldr	r1, [r7, #32]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f002 fa84 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06b      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d11b      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x188>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d017      	beq.n	8002c7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	6a39      	ldr	r1, [r7, #32]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f002 fa74 	bl	800516e <I2C_WaitOnBTFFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d107      	bne.n	8002ca4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e01a      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d194      	bne.n	8002bda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
  }
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	00100002 	.word	0x00100002
 8002cec:	ffff0000 	.word	0xffff0000

08002cf0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
 8002d00:	4613      	mov	r3, r2
 8002d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7fe fe7a 	bl	80019fc <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 820b 	bne.w	800312e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2319      	movs	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	497c      	ldr	r1, [pc, #496]	; (8002f14 <HAL_I2C_Master_Receive+0x224>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f002 f90c 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e1fe      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2C_Master_Receive+0x50>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e1f7      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d007      	beq.n	8002d66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2222      	movs	r2, #34	; 0x22
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2210      	movs	r2, #16
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <HAL_I2C_Master_Receive+0x228>)
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f001 ff50 	bl	8004c54 <I2C_MasterRequestRead>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1b8      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d113      	bne.n	8002dee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e18c      	b.n	8003108 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d11b      	bne.n	8002e2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e16c      	b.n	8003108 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d11b      	bne.n	8002e6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	e14c      	b.n	8003108 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e94:	e138      	b.n	8003108 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	f200 80f1 	bhi.w	8003082 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d123      	bne.n	8002ef0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f002 f9d1 	bl	8005254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e139      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eee:	e10b      	b.n	8003108 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d14e      	bne.n	8002f96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	2200      	movs	r2, #0
 8002f00:	4906      	ldr	r1, [pc, #24]	; (8002f1c <HAL_I2C_Master_Receive+0x22c>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f002 f81c 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e10e      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
 8002f12:	bf00      	nop
 8002f14:	00100002 	.word	0x00100002
 8002f18:	ffff0000 	.word	0xffff0000
 8002f1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f94:	e0b8      	b.n	8003108 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4966      	ldr	r1, [pc, #408]	; (8003138 <HAL_I2C_Master_Receive+0x448>)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f001 ffcd 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0bf      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	494f      	ldr	r1, [pc, #316]	; (8003138 <HAL_I2C_Master_Receive+0x448>)
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f001 ff9f 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e091      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003080:	e042      	b.n	8003108 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f002 f8e4 	bl	8005254 <I2C_WaitOnRXNEFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e04c      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d118      	bne.n	8003108 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	f47f aec2 	bne.w	8002e96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3728      	adds	r7, #40	; 0x28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	00010004 	.word	0x00010004

0800313c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7fe fc56 	bl	80019fc <HAL_GetTick>
 8003150:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003152:	2301      	movs	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	f040 8111 	bne.w	8003386 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2319      	movs	r3, #25
 800316a:	2201      	movs	r2, #1
 800316c:	4988      	ldr	r1, [pc, #544]	; (8003390 <HAL_I2C_IsDeviceReady+0x254>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f001 fee6 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
 800317c:	e104      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2C_IsDeviceReady+0x50>
 8003188:	2302      	movs	r3, #2
 800318a:	e0fd      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x24c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d007      	beq.n	80031b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2224      	movs	r2, #36	; 0x24
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a70      	ldr	r2, [pc, #448]	; (8003394 <HAL_I2C_IsDeviceReady+0x258>)
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f001 fea4 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320c:	d103      	bne.n	8003216 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0b6      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800321a:	897b      	ldrh	r3, [r7, #10]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003228:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fbe7 	bl	80019fc <HAL_GetTick>
 800322e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800325e:	e025      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003260:	f7fe fbcc 	bl	80019fc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <HAL_I2C_IsDeviceReady+0x13a>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	22a0      	movs	r2, #160	; 0xa0
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b02      	cmp	r3, #2
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2ba0      	cmp	r3, #160	; 0xa0
 80032b6:	d005      	beq.n	80032c4 <HAL_I2C_IsDeviceReady+0x188>
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_I2C_IsDeviceReady+0x188>
 80032be:	7dbb      	ldrb	r3, [r7, #22]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0cd      	beq.n	8003260 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d129      	bne.n	800332e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	2319      	movs	r3, #25
 8003306:	2201      	movs	r2, #1
 8003308:	4921      	ldr	r1, [pc, #132]	; (8003390 <HAL_I2C_IsDeviceReady+0x254>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f001 fe18 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e036      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e02c      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003346:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2319      	movs	r3, #25
 800334e:	2201      	movs	r2, #1
 8003350:	490f      	ldr	r1, [pc, #60]	; (8003390 <HAL_I2C_IsDeviceReady+0x254>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f001 fdf4 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e012      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	3301      	adds	r3, #1
 8003366:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	429a      	cmp	r2, r3
 800336e:	f4ff af32 	bcc.w	80031d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	00100002 	.word	0x00100002
 8003394:	ffff0000 	.word	0xffff0000

08003398 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d003      	beq.n	80033d0 <HAL_I2C_EV_IRQHandler+0x38>
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	f040 80c1 	bne.w	8003552 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_I2C_EV_IRQHandler+0x6e>
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033f0:	d003      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x62>
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_EV_IRQHandler+0x66>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_I2C_EV_IRQHandler+0x68>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b01      	cmp	r3, #1
 8003402:	f000 8132 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00c      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x92>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	0a5b      	lsrs	r3, r3, #9
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d006      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f001 ff9e 	bl	800535e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fd79 	bl	8003f1a <I2C_Master_SB>
 8003428:	e092      	b.n	8003550 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	08db      	lsrs	r3, r3, #3
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_I2C_EV_IRQHandler+0xb2>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	0a5b      	lsrs	r3, r3, #9
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fdef 	bl	8004026 <I2C_Master_ADD10>
 8003448:	e082      	b.n	8003550 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0xd2>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	0a5b      	lsrs	r3, r3, #9
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fe09 	bl	800407a <I2C_Master_ADDR>
 8003468:	e072      	b.n	8003550 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03b      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003484:	f000 80f3 	beq.w	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	09db      	lsrs	r3, r3, #7
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00f      	beq.n	80034b4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	0a9b      	lsrs	r3, r3, #10
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_I2C_EV_IRQHandler+0x11c>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d103      	bne.n	80034b4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f9f3 	bl	8003898 <I2C_MasterTransmit_TXE>
 80034b2:	e04d      	b.n	8003550 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80d6 	beq.w	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	0a5b      	lsrs	r3, r3, #9
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80cf 	beq.w	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	2b21      	cmp	r3, #33	; 0x21
 80034d4:	d103      	bne.n	80034de <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa7a 	bl	80039d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034dc:	e0c7      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	f040 80c4 	bne.w	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fae8 	bl	8003abc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ec:	e0bf      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fc:	f000 80b7 	beq.w	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00f      	beq.n	800352c <HAL_I2C_EV_IRQHandler+0x194>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	0a9b      	lsrs	r3, r3, #10
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_I2C_EV_IRQHandler+0x194>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fb5d 	bl	8003be4 <I2C_MasterReceive_RXNE>
 800352a:	e011      	b.n	8003550 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 809a 	beq.w	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	0a5b      	lsrs	r3, r3, #9
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8093 	beq.w	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fbfc 	bl	8003d46 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800354e:	e08e      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003550:	e08d      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e007      	b.n	8003574 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d012      	beq.n	80035a6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	0a5b      	lsrs	r3, r3, #9
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00c      	beq.n	80035a6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 ffba 	bl	8004518 <I2C_Slave_ADDR>
 80035a4:	e066      	b.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_I2C_EV_IRQHandler+0x22e>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	0a5b      	lsrs	r3, r3, #9
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fff4 	bl	80045ac <I2C_Slave_STOPF>
 80035c4:	e056      	b.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035c6:	7bbb      	ldrb	r3, [r7, #14]
 80035c8:	2b21      	cmp	r3, #33	; 0x21
 80035ca:	d002      	beq.n	80035d2 <HAL_I2C_EV_IRQHandler+0x23a>
 80035cc:	7bbb      	ldrb	r3, [r7, #14]
 80035ce:	2b29      	cmp	r3, #41	; 0x29
 80035d0:	d125      	bne.n	800361e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	09db      	lsrs	r3, r3, #7
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00f      	beq.n	80035fe <HAL_I2C_EV_IRQHandler+0x266>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	0a9b      	lsrs	r3, r3, #10
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_I2C_EV_IRQHandler+0x266>
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fed0 	bl	800439c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035fc:	e039      	b.n	8003672 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d033      	beq.n	8003672 <HAL_I2C_EV_IRQHandler+0x2da>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	0a5b      	lsrs	r3, r3, #9
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d02d      	beq.n	8003672 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fefd 	bl	8004416 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800361c:	e029      	b.n	8003672 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00f      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x2b2>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	0a9b      	lsrs	r3, r3, #10
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 ff08 	bl	8004458 <I2C_SlaveReceive_RXNE>
 8003648:	e014      	b.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00e      	beq.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	0a5b      	lsrs	r3, r3, #9
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 ff36 	bl	80044d4 <I2C_SlaveReceive_BTF>
 8003668:	e004      	b.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003672:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08a      	sub	sp, #40	; 0x28
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <HAL_I2C_ER_IRQHandler+0x4e>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036c6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <HAL_I2C_ER_IRQHandler+0x78>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80036f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	0a9b      	lsrs	r3, r3, #10
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03f      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x104>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d039      	beq.n	800377e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800370a:	7efb      	ldrb	r3, [r7, #27]
 800370c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003724:	7ebb      	ldrb	r3, [r7, #26]
 8003726:	2b20      	cmp	r3, #32
 8003728:	d112      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xd6>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xd6>
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b21      	cmp	r3, #33	; 0x21
 8003734:	d008      	beq.n	8003748 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b29      	cmp	r3, #41	; 0x29
 800373a:	d005      	beq.n	8003748 <HAL_I2C_ER_IRQHandler+0xce>
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	2b28      	cmp	r3, #40	; 0x28
 8003740:	d106      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b21      	cmp	r3, #33	; 0x21
 8003746:	d103      	bne.n	8003750 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f001 f85f 	bl	800480c <I2C_Slave_AF>
 800374e:	e016      	b.n	800377e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003758:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	f043 0304 	orr.w	r3, r3, #4
 8003760:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003762:	7efb      	ldrb	r3, [r7, #27]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d002      	beq.n	800376e <HAL_I2C_ER_IRQHandler+0xf4>
 8003768:	7efb      	ldrb	r3, [r7, #27]
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d107      	bne.n	800377e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	0adb      	lsrs	r3, r3, #11
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00e      	beq.n	80037a8 <HAL_I2C_ER_IRQHandler+0x12e>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f043 0308 	orr.w	r3, r3, #8
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80037a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f001 f896 	bl	80048ec <I2C_ITError>
  }
}
 80037c0:	bf00      	nop
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
 8003824:	4613      	mov	r3, r2
 8003826:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d150      	bne.n	8003960 <I2C_MasterTransmit_TXE+0xc8>
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b21      	cmp	r3, #33	; 0x21
 80038c2:	d14d      	bne.n	8003960 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d01d      	beq.n	8003906 <I2C_MasterTransmit_TXE+0x6e>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d01a      	beq.n	8003906 <I2C_MasterTransmit_TXE+0x6e>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d6:	d016      	beq.n	8003906 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2211      	movs	r2, #17
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff62 	bl	80037c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003904:	e060      	b.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003914:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003924:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d107      	bne.n	8003950 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff7d 	bl	8003848 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800394e:	e03b      	b.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff35 	bl	80037c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800395e:	e033      	b.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b21      	cmp	r3, #33	; 0x21
 8003964:	d005      	beq.n	8003972 <I2C_MasterTransmit_TXE+0xda>
 8003966:	7bbb      	ldrb	r3, [r7, #14]
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d12d      	bne.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b22      	cmp	r3, #34	; 0x22
 8003970:	d12a      	bne.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800398c:	e01c      	b.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d103      	bne.n	80039a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f88e 	bl	8003abc <I2C_MemoryTransmit_TXE_BTF>
}
 80039a0:	e012      	b.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039c6:	e7ff      	b.n	80039c8 <I2C_MasterTransmit_TXE+0x130>
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b21      	cmp	r3, #33	; 0x21
 80039e8:	d164      	bne.n	8003ab4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a18:	e04c      	b.n	8003ab4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d01d      	beq.n	8003a5c <I2C_MasterTransmit_BTF+0x8c>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d01a      	beq.n	8003a5c <I2C_MasterTransmit_BTF+0x8c>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a2c:	d016      	beq.n	8003a5c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a3c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2211      	movs	r2, #17
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff feb7 	bl	80037c8 <HAL_I2C_MasterTxCpltCallback>
}
 8003a5a:	e02b      	b.n	8003ab4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a6a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d107      	bne.n	8003aa6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fed2 	bl	8003848 <HAL_I2C_MemTxCpltCallback>
}
 8003aa4:	e006      	b.n	8003ab4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fe8a 	bl	80037c8 <HAL_I2C_MasterTxCpltCallback>
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11d      	bne.n	8003b10 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10b      	bne.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003af2:	e073      	b.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	121b      	asrs	r3, r3, #8
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b0e:	e065      	b.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10b      	bne.n	8003b30 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b2e:	e055      	b.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d151      	bne.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b22      	cmp	r3, #34	; 0x22
 8003b3c:	d10d      	bne.n	8003b5a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b58:	e040      	b.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b21      	cmp	r3, #33	; 0x21
 8003b68:	d112      	bne.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b8e:	e025      	b.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d120      	bne.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b21      	cmp	r3, #33	; 0x21
 8003b9e:	d11d      	bne.n	8003bdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fe36 	bl	8003848 <HAL_I2C_MemTxCpltCallback>
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b22      	cmp	r3, #34	; 0x22
 8003bf6:	f040 80a2 	bne.w	8003d3e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d921      	bls.n	8003c4c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	f040 8082 	bne.w	8003d3e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c48:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003c4a:	e078      	b.n	8003d3e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d074      	beq.n	8003d3e <I2C_MasterReceive_RXNE+0x15a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d002      	beq.n	8003c60 <I2C_MasterReceive_RXNE+0x7c>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d16e      	bne.n	8003d3e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 fac5 	bl	80051f0 <I2C_WaitOnSTOPRequestThroughIT>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d142      	bne.n	8003cf2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d10a      	bne.n	8003cdc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fdc1 	bl	800385c <HAL_I2C_MemRxCpltCallback>
}
 8003cda:	e030      	b.n	8003d3e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2212      	movs	r2, #18
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fd76 	bl	80037dc <HAL_I2C_MasterRxCpltCallback>
}
 8003cf0:	e025      	b.n	8003d3e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d00:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fd99 	bl	8003870 <HAL_I2C_ErrorCallback>
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d11b      	bne.n	8003d96 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d94:	e0bd      	b.n	8003f12 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d129      	bne.n	8003df4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d00a      	beq.n	8003dcc <I2C_MasterReceive_BTF+0x86>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d007      	beq.n	8003dcc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003df2:	e08e      	b.n	8003f12 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d176      	bne.n	8003eec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d002      	beq.n	8003e0a <I2C_MasterReceive_BTF+0xc4>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d108      	bne.n	8003e1c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e019      	b.n	8003e50 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d002      	beq.n	8003e28 <I2C_MasterReceive_BTF+0xe2>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d108      	bne.n	8003e3a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e00a      	b.n	8003e50 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d007      	beq.n	8003e50 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eaa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d10a      	bne.n	8003ed6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fcc4 	bl	800385c <HAL_I2C_MemRxCpltCallback>
}
 8003ed4:	e01d      	b.n	8003f12 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2212      	movs	r2, #18
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fc79 	bl	80037dc <HAL_I2C_MasterRxCpltCallback>
}
 8003eea:	e012      	b.n	8003f12 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d117      	bne.n	8003f5e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f46:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f48:	e067      	b.n	800401a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]
}
 8003f5c:	e05d      	b.n	800401a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f66:	d133      	bne.n	8003fd0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b21      	cmp	r3, #33	; 0x21
 8003f72:	d109      	bne.n	8003f88 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	e008      	b.n	8003f9a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <I2C_Master_SB+0x92>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d108      	bne.n	8003fbe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d032      	beq.n	800401a <I2C_Master_SB+0x100>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02d      	beq.n	800401a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fcc:	605a      	str	r2, [r3, #4]
}
 8003fce:	e024      	b.n	800401a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10e      	bne.n	8003ff6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	11db      	asrs	r3, r3, #7
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 0306 	and.w	r3, r3, #6
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f063 030f 	orn	r3, r3, #15
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
}
 8003ff4:	e011      	b.n	800401a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10d      	bne.n	800401a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	b29b      	uxth	r3, r3
 8004004:	11db      	asrs	r3, r3, #7
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f003 0306 	and.w	r3, r3, #6
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f063 030e 	orn	r3, r3, #14
 8004012:	b2da      	uxtb	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	b2da      	uxtb	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <I2C_Master_ADD10+0x26>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00c      	beq.n	800406e <I2C_Master_ADD10+0x48>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406c:	605a      	str	r2, [r3, #4]
  }
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800407a:	b480      	push	{r7}
 800407c:	b091      	sub	sp, #68	; 0x44
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b22      	cmp	r3, #34	; 0x22
 80040a2:	f040 8169 	bne.w	8004378 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <I2C_Master_ADDR+0x54>
 80040ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d10b      	bne.n	80040ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	e160      	b.n	8004390 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d11d      	bne.n	8004112 <I2C_Master_ADDR+0x98>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040de:	d118      	bne.n	8004112 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e0:	2300      	movs	r3, #0
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004104:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	651a      	str	r2, [r3, #80]	; 0x50
 8004110:	e13e      	b.n	8004390 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d113      	bne.n	8004144 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411c:	2300      	movs	r3, #0
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e115      	b.n	8004370 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	f040 808a 	bne.w	8004264 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004156:	d137      	bne.n	80041c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004166:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004176:	d113      	bne.n	80041a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004186:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	e0e7      	b.n	8004370 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e0d3      	b.n	8004370 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d02e      	beq.n	800422c <I2C_Master_ADDR+0x1b2>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d02b      	beq.n	800422c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	2b12      	cmp	r3, #18
 80041d8:	d102      	bne.n	80041e0 <I2C_Master_ADDR+0x166>
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d125      	bne.n	800422c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d00e      	beq.n	8004204 <I2C_Master_ADDR+0x18a>
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d00b      	beq.n	8004204 <I2C_Master_ADDR+0x18a>
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d008      	beq.n	8004204 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e007      	b.n	8004214 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004212:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	e0a1      	b.n	8004370 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e085      	b.n	8004370 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d14d      	bne.n	800430a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b04      	cmp	r3, #4
 8004272:	d016      	beq.n	80042a2 <I2C_Master_ADDR+0x228>
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	2b02      	cmp	r3, #2
 8004278:	d013      	beq.n	80042a2 <I2C_Master_ADDR+0x228>
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	2b10      	cmp	r3, #16
 800427e:	d010      	beq.n	80042a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e007      	b.n	80042b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c0:	d117      	bne.n	80042f2 <I2C_Master_ADDR+0x278>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c8:	d00b      	beq.n	80042e2 <I2C_Master_ADDR+0x268>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d008      	beq.n	80042e2 <I2C_Master_ADDR+0x268>
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d005      	beq.n	80042e2 <I2C_Master_ADDR+0x268>
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d002      	beq.n	80042e2 <I2C_Master_ADDR+0x268>
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d107      	bne.n	80042f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	e032      	b.n	8004370 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004318:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004328:	d117      	bne.n	800435a <I2C_Master_ADDR+0x2e0>
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004330:	d00b      	beq.n	800434a <I2C_Master_ADDR+0x2d0>
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	2b01      	cmp	r3, #1
 8004336:	d008      	beq.n	800434a <I2C_Master_ADDR+0x2d0>
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	2b08      	cmp	r3, #8
 800433c:	d005      	beq.n	800434a <I2C_Master_ADDR+0x2d0>
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b10      	cmp	r3, #16
 8004342:	d002      	beq.n	800434a <I2C_Master_ADDR+0x2d0>
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	2b20      	cmp	r3, #32
 8004348:	d107      	bne.n	800435a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004358:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004376:	e00b      	b.n	8004390 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
}
 800438e:	e7ff      	b.n	8004390 <I2C_Master_ADDR+0x316>
 8004390:	bf00      	nop
 8004392:	3744      	adds	r7, #68	; 0x44
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02b      	beq.n	800440e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d114      	bne.n	800440e <I2C_SlaveTransmit_TXE+0x72>
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b29      	cmp	r3, #41	; 0x29
 80043e8:	d111      	bne.n	800440e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2221      	movs	r2, #33	; 0x21
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2228      	movs	r2, #40	; 0x28
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff f9f1 	bl	80037f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d011      	beq.n	800444c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d02c      	beq.n	80044cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d114      	bne.n	80044cc <I2C_SlaveReceive_RXNE+0x74>
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b2a      	cmp	r3, #42	; 0x2a
 80044a6:	d111      	bne.n	80044cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2222      	movs	r2, #34	; 0x22
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2228      	movs	r2, #40	; 0x28
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff f99c 	bl	8003804 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d012      	beq.n	800450c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004532:	2b28      	cmp	r3, #40	; 0x28
 8004534:	d127      	bne.n	8004586 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004544:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	09db      	lsrs	r3, r3, #7
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	81bb      	strh	r3, [r7, #12]
 8004568:	e002      	b.n	8004570 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004578:	89ba      	ldrh	r2, [r7, #12]
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff f94a 	bl	8003818 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004584:	e00e      	b.n	80045a4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004608:	d172      	bne.n	80046f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b22      	cmp	r3, #34	; 0x22
 800460e:	d002      	beq.n	8004616 <I2C_Slave_STOPF+0x6a>
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b2a      	cmp	r3, #42	; 0x2a
 8004614:	d135      	bne.n	8004682 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f043 0204 	orr.w	r2, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004648:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fe38 	bl	80022c4 <HAL_DMA_GetState>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d049      	beq.n	80046ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	4a69      	ldr	r2, [pc, #420]	; (8004804 <I2C_Slave_STOPF+0x258>)
 8004660:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fc80 	bl	8001f6c <HAL_DMA_Abort_IT>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d03d      	beq.n	80046ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800467c:	4610      	mov	r0, r2
 800467e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004680:	e035      	b.n	80046ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd fe02 	bl	80022c4 <HAL_DMA_GetState>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d014      	beq.n	80046f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	4a4e      	ldr	r2, [pc, #312]	; (8004804 <I2C_Slave_STOPF+0x258>)
 80046cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fc4a 	bl	8001f6c <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
 80046ec:	e000      	b.n	80046f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d03e      	beq.n	8004778 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d112      	bne.n	800472e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d112      	bne.n	8004762 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f043 0204 	orr.w	r2, r3, #4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f8b3 	bl	80048ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004786:	e039      	b.n	80047fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b2a      	cmp	r3, #42	; 0x2a
 800478c:	d109      	bne.n	80047a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2228      	movs	r2, #40	; 0x28
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff f831 	bl	8003804 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b28      	cmp	r3, #40	; 0x28
 80047ac:	d111      	bne.n	80047d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a15      	ldr	r2, [pc, #84]	; (8004808 <I2C_Slave_STOPF+0x25c>)
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff f832 	bl	8003834 <HAL_I2C_ListenCpltCallback>
}
 80047d0:	e014      	b.n	80047fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	2b22      	cmp	r3, #34	; 0x22
 80047d8:	d002      	beq.n	80047e0 <I2C_Slave_STOPF+0x234>
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b22      	cmp	r3, #34	; 0x22
 80047de:	d10d      	bne.n	80047fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff f804 	bl	8003804 <HAL_I2C_SlaveRxCpltCallback>
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	08004df1 	.word	0x08004df1
 8004808:	ffff0000 	.word	0xffff0000

0800480c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d002      	beq.n	800482e <I2C_Slave_AF+0x22>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b20      	cmp	r3, #32
 800482c:	d129      	bne.n	8004882 <I2C_Slave_AF+0x76>
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b28      	cmp	r3, #40	; 0x28
 8004832:	d126      	bne.n	8004882 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <I2C_Slave_AF+0xdc>)
 8004838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004848:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004852:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004862:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe ffda 	bl	8003834 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004880:	e02e      	b.n	80048e0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b21      	cmp	r3, #33	; 0x21
 8004886:	d126      	bne.n	80048d6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <I2C_Slave_AF+0xdc>)
 800488c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2221      	movs	r2, #33	; 0x21
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fe ff8e 	bl	80037f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80048d4:	e004      	b.n	80048e0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048de:	615a      	str	r2, [r3, #20]
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	ffff0000 	.word	0xffff0000

080048ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004902:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004904:	7bbb      	ldrb	r3, [r7, #14]
 8004906:	2b10      	cmp	r3, #16
 8004908:	d002      	beq.n	8004910 <I2C_ITError+0x24>
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d10a      	bne.n	8004926 <I2C_ITError+0x3a>
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b22      	cmp	r3, #34	; 0x22
 8004914:	d107      	bne.n	8004926 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004924:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800492c:	2b28      	cmp	r3, #40	; 0x28
 800492e:	d107      	bne.n	8004940 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2228      	movs	r2, #40	; 0x28
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800493e:	e015      	b.n	800496c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494e:	d00a      	beq.n	8004966 <I2C_ITError+0x7a>
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b60      	cmp	r3, #96	; 0x60
 8004954:	d007      	beq.n	8004966 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497a:	d162      	bne.n	8004a42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800498a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d020      	beq.n	80049dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	4a6a      	ldr	r2, [pc, #424]	; (8004b48 <I2C_ITError+0x25c>)
 80049a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd fae0 	bl	8001f6c <HAL_DMA_Abort_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8089 	beq.w	8004ac6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d6:	4610      	mov	r0, r2
 80049d8:	4798      	blx	r3
 80049da:	e074      	b.n	8004ac6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	4a59      	ldr	r2, [pc, #356]	; (8004b48 <I2C_ITError+0x25c>)
 80049e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fd fabf 	bl	8001f6c <HAL_DMA_Abort_IT>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d068      	beq.n	8004ac6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d10b      	bne.n	8004a1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4798      	blx	r3
 8004a40:	e041      	b.n	8004ac6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b60      	cmp	r3, #96	; 0x60
 8004a4c:	d125      	bne.n	8004a9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d10b      	bne.n	8004a82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fe fef6 	bl	8003884 <HAL_I2C_AbortCpltCallback>
 8004a98:	e015      	b.n	8004ac6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d10b      	bne.n	8004ac0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fe fed5 	bl	8003870 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10e      	bne.n	8004af4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d113      	bne.n	8004b40 <I2C_ITError+0x254>
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b28      	cmp	r3, #40	; 0x28
 8004b1c:	d110      	bne.n	8004b40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <I2C_ITError+0x260>)
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fe fe7a 	bl	8003834 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	08004df1 	.word	0x08004df1
 8004b4c:	ffff0000 	.word	0xffff0000

08004b50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d006      	beq.n	8004b7a <I2C_MasterRequestWrite+0x2a>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d003      	beq.n	8004b7a <I2C_MasterRequestWrite+0x2a>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b78:	d108      	bne.n	8004b8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e00b      	b.n	8004ba4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	2b12      	cmp	r3, #18
 8004b92:	d107      	bne.n	8004ba4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f9c5 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bca:	d103      	bne.n	8004bd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e035      	b.n	8004c44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be0:	d108      	bne.n	8004bf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004be2:	897b      	ldrh	r3, [r7, #10]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bf0:	611a      	str	r2, [r3, #16]
 8004bf2:	e01b      	b.n	8004c2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bf4:	897b      	ldrh	r3, [r7, #10]
 8004bf6:	11db      	asrs	r3, r3, #7
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	f003 0306 	and.w	r3, r3, #6
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f063 030f 	orn	r3, r3, #15
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	490e      	ldr	r1, [pc, #56]	; (8004c4c <I2C_MasterRequestWrite+0xfc>)
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f9eb 	bl	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e010      	b.n	8004c44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c22:	897b      	ldrh	r3, [r7, #10]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4907      	ldr	r1, [pc, #28]	; (8004c50 <I2C_MasterRequestWrite+0x100>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f9db 	bl	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	00010008 	.word	0x00010008
 8004c50:	00010002 	.word	0x00010002

08004c54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	460b      	mov	r3, r1
 8004c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d006      	beq.n	8004c8e <I2C_MasterRequestRead+0x3a>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d003      	beq.n	8004c8e <I2C_MasterRequestRead+0x3a>
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c8c:	d108      	bne.n	8004ca0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e00b      	b.n	8004cb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	2b11      	cmp	r3, #17
 8004ca6:	d107      	bne.n	8004cb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f93b 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d103      	bne.n	8004ce8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e079      	b.n	8004de0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf4:	d108      	bne.n	8004d08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cf6:	897b      	ldrh	r3, [r7, #10]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]
 8004d06:	e05f      	b.n	8004dc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d08:	897b      	ldrh	r3, [r7, #10]
 8004d0a:	11db      	asrs	r3, r3, #7
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0306 	and.w	r3, r3, #6
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f063 030f 	orn	r3, r3, #15
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	4930      	ldr	r1, [pc, #192]	; (8004de8 <I2C_MasterRequestRead+0x194>)
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f961 	bl	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e054      	b.n	8004de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4929      	ldr	r1, [pc, #164]	; (8004dec <I2C_MasterRequestRead+0x198>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f951 	bl	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e044      	b.n	8004de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f8d9 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00d      	beq.n	8004db0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	d103      	bne.n	8004dac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e017      	b.n	8004de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004db0:	897b      	ldrh	r3, [r7, #10]
 8004db2:	11db      	asrs	r3, r3, #7
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f003 0306 	and.w	r3, r3, #6
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f063 030e 	orn	r3, r3, #14
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4907      	ldr	r1, [pc, #28]	; (8004dec <I2C_MasterRequestRead+0x198>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f90d 	bl	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	00010008 	.word	0x00010008
 8004dec:	00010002 	.word	0x00010002

08004df0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e0a:	4b4b      	ldr	r3, [pc, #300]	; (8004f38 <I2C_DMAAbort+0x148>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	4a4a      	ldr	r2, [pc, #296]	; (8004f3c <I2C_DMAAbort+0x14c>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	0a1a      	lsrs	r2, r3, #8
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	00da      	lsls	r2, r3, #3
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e36:	e00a      	b.n	8004e4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4c:	d0ea      	beq.n	8004e24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	2200      	movs	r2, #0
 8004e92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b60      	cmp	r3, #96	; 0x60
 8004ebe:	d10e      	bne.n	8004ede <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f7fe fcd4 	bl	8003884 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004edc:	e027      	b.n	8004f2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ee4:	2b28      	cmp	r3, #40	; 0x28
 8004ee6:	d117      	bne.n	8004f18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2228      	movs	r2, #40	; 0x28
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f16:	e007      	b.n	8004f28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f28:	6978      	ldr	r0, [r7, #20]
 8004f2a:	f7fe fca1 	bl	8003870 <HAL_I2C_ErrorCallback>
}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200000dc 	.word	0x200000dc
 8004f3c:	14f8b589 	.word	0x14f8b589

08004f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f50:	e025      	b.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d021      	beq.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5a:	f7fc fd4f 	bl	80019fc <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d302      	bcc.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d116      	bne.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e023      	b.n	8004fe6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d10d      	bne.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	e00c      	b.n	8004fde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d0b6      	beq.n	8004f52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ffc:	e051      	b.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d123      	bne.n	8005056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005026:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0204 	orr.w	r2, r3, #4
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e046      	b.n	80050e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d021      	beq.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7fc fccd 	bl	80019fc <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d116      	bne.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e020      	b.n	80050e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10c      	bne.n	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e00b      	b.n	80050de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	43da      	mvns	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d18d      	bne.n	8004ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f8:	e02d      	b.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f900 	bl	8005300 <I2C_IsAcknowledgeFailed>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e02d      	b.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d021      	beq.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fc fc73 	bl	80019fc <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d116      	bne.n	8005156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e007      	b.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b80      	cmp	r3, #128	; 0x80
 8005162:	d1ca      	bne.n	80050fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800517a:	e02d      	b.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f8bf 	bl	8005300 <I2C_IsAcknowledgeFailed>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e02d      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d021      	beq.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005194:	f7fc fc32 	bl	80019fc <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d302      	bcc.n	80051aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d116      	bne.n	80051d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e007      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d1ca      	bne.n	800517c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	08db      	lsrs	r3, r3, #3
 8005202:	4a13      	ldr	r2, [pc, #76]	; (8005250 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	0a1a      	lsrs	r2, r3, #8
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3b01      	subs	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d107      	bne.n	800522e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e008      	b.n	8005240 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523c:	d0e9      	beq.n	8005212 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	200000dc 	.word	0x200000dc
 8005250:	14f8b589 	.word	0x14f8b589

08005254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005260:	e042      	b.n	80052e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b10      	cmp	r3, #16
 800526e:	d119      	bne.n	80052a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0210 	mvn.w	r2, #16
 8005278:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e029      	b.n	80052f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a4:	f7fc fbaa 	bl	80019fc <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d302      	bcc.n	80052ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d116      	bne.n	80052e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e007      	b.n	80052f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d1b5      	bne.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d11b      	bne.n	8005350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	f043 0204 	orr.w	r2, r3, #4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800536e:	d103      	bne.n	8005378 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005376:	e007      	b.n	8005388 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005380:	d102      	bne.n	8005388 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2208      	movs	r2, #8
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e264      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d075      	beq.n	800549e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b2:	4ba3      	ldr	r3, [pc, #652]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d00c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053be:	4ba0      	ldr	r3, [pc, #640]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d112      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ca:	4b9d      	ldr	r3, [pc, #628]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d6:	d10b      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d8:	4b99      	ldr	r3, [pc, #612]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05b      	beq.n	800549c <HAL_RCC_OscConfig+0x108>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d157      	bne.n	800549c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e23f      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f8:	d106      	bne.n	8005408 <HAL_RCC_OscConfig+0x74>
 80053fa:	4b91      	ldr	r3, [pc, #580]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a90      	ldr	r2, [pc, #576]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e01d      	b.n	8005444 <HAL_RCC_OscConfig+0xb0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0x98>
 8005412:	4b8b      	ldr	r3, [pc, #556]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a8a      	ldr	r2, [pc, #552]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b88      	ldr	r3, [pc, #544]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a87      	ldr	r2, [pc, #540]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e00b      	b.n	8005444 <HAL_RCC_OscConfig+0xb0>
 800542c:	4b84      	ldr	r3, [pc, #528]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a83      	ldr	r2, [pc, #524]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b81      	ldr	r3, [pc, #516]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a80      	ldr	r2, [pc, #512]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 800543e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fc fad6 	bl	80019fc <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005454:	f7fc fad2 	bl	80019fc <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e204      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b76      	ldr	r3, [pc, #472]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0xc0>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fc fac2 	bl	80019fc <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547c:	f7fc fabe 	bl	80019fc <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e1f0      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	4b6c      	ldr	r3, [pc, #432]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0xe8>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d063      	beq.n	8005572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054aa:	4b65      	ldr	r3, [pc, #404]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b6:	4b62      	ldr	r3, [pc, #392]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d11c      	bne.n	80054fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c2:	4b5f      	ldr	r3, [pc, #380]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d116      	bne.n	80054fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	4b5c      	ldr	r3, [pc, #368]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_RCC_OscConfig+0x152>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e1c4      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e6:	4b56      	ldr	r3, [pc, #344]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4952      	ldr	r1, [pc, #328]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fa:	e03a      	b.n	8005572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d020      	beq.n	8005546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005504:	4b4f      	ldr	r3, [pc, #316]	; (8005644 <HAL_RCC_OscConfig+0x2b0>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fc fa77 	bl	80019fc <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005512:	f7fc fa73 	bl	80019fc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e1a5      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	4b46      	ldr	r3, [pc, #280]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005530:	4b43      	ldr	r3, [pc, #268]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4940      	ldr	r1, [pc, #256]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005546:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <HAL_RCC_OscConfig+0x2b0>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fc fa56 	bl	80019fc <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005554:	f7fc fa52 	bl	80019fc <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e184      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005566:	4b36      	ldr	r3, [pc, #216]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d030      	beq.n	80055e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005586:	4b30      	ldr	r3, [pc, #192]	; (8005648 <HAL_RCC_OscConfig+0x2b4>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fc fa36 	bl	80019fc <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005594:	f7fc fa32 	bl	80019fc <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e164      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a6:	4b26      	ldr	r3, [pc, #152]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0x200>
 80055b2:	e015      	b.n	80055e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b4:	4b24      	ldr	r3, [pc, #144]	; (8005648 <HAL_RCC_OscConfig+0x2b4>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ba:	f7fc fa1f 	bl	80019fc <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c2:	f7fc fa1b 	bl	80019fc <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e14d      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f0      	bne.n	80055c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80a0 	beq.w	800572e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	4a0e      	ldr	r2, [pc, #56]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560c:	6413      	str	r3, [r2, #64]	; 0x40
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <HAL_RCC_OscConfig+0x2ac>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <HAL_RCC_OscConfig+0x2b8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d121      	bne.n	800566e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800562a:	4b08      	ldr	r3, [pc, #32]	; (800564c <HAL_RCC_OscConfig+0x2b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a07      	ldr	r2, [pc, #28]	; (800564c <HAL_RCC_OscConfig+0x2b8>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005636:	f7fc f9e1 	bl	80019fc <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	e011      	b.n	8005662 <HAL_RCC_OscConfig+0x2ce>
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800
 8005644:	42470000 	.word	0x42470000
 8005648:	42470e80 	.word	0x42470e80
 800564c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005650:	f7fc f9d4 	bl	80019fc <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e106      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005662:	4b85      	ldr	r3, [pc, #532]	; (8005878 <HAL_RCC_OscConfig+0x4e4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d106      	bne.n	8005684 <HAL_RCC_OscConfig+0x2f0>
 8005676:	4b81      	ldr	r3, [pc, #516]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	4a80      	ldr	r2, [pc, #512]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	6713      	str	r3, [r2, #112]	; 0x70
 8005682:	e01c      	b.n	80056be <HAL_RCC_OscConfig+0x32a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b05      	cmp	r3, #5
 800568a:	d10c      	bne.n	80056a6 <HAL_RCC_OscConfig+0x312>
 800568c:	4b7b      	ldr	r3, [pc, #492]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4a7a      	ldr	r2, [pc, #488]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 8005692:	f043 0304 	orr.w	r3, r3, #4
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
 8005698:	4b78      	ldr	r3, [pc, #480]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a77      	ldr	r2, [pc, #476]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	e00b      	b.n	80056be <HAL_RCC_OscConfig+0x32a>
 80056a6:	4b75      	ldr	r3, [pc, #468]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	4a74      	ldr	r2, [pc, #464]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70
 80056b2:	4b72      	ldr	r3, [pc, #456]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	4a71      	ldr	r2, [pc, #452]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 80056b8:	f023 0304 	bic.w	r3, r3, #4
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d015      	beq.n	80056f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c6:	f7fc f999 	bl	80019fc <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fc f995 	bl	80019fc <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e0c5      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e4:	4b65      	ldr	r3, [pc, #404]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ee      	beq.n	80056ce <HAL_RCC_OscConfig+0x33a>
 80056f0:	e014      	b.n	800571c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f2:	f7fc f983 	bl	80019fc <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f8:	e00a      	b.n	8005710 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fa:	f7fc f97f 	bl	80019fc <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	f241 3288 	movw	r2, #5000	; 0x1388
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e0af      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005710:	4b5a      	ldr	r3, [pc, #360]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ee      	bne.n	80056fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005722:	4b56      	ldr	r3, [pc, #344]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a55      	ldr	r2, [pc, #340]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 8005728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 809b 	beq.w	800586e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005738:	4b50      	ldr	r3, [pc, #320]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b08      	cmp	r3, #8
 8005742:	d05c      	beq.n	80057fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d141      	bne.n	80057d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574c:	4b4c      	ldr	r3, [pc, #304]	; (8005880 <HAL_RCC_OscConfig+0x4ec>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005752:	f7fc f953 	bl	80019fc <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800575a:	f7fc f94f 	bl	80019fc <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e081      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576c:	4b43      	ldr	r3, [pc, #268]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	019b      	lsls	r3, r3, #6
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	3b01      	subs	r3, #1
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	061b      	lsls	r3, r3, #24
 800579c:	4937      	ldr	r1, [pc, #220]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a2:	4b37      	ldr	r3, [pc, #220]	; (8005880 <HAL_RCC_OscConfig+0x4ec>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fc f928 	bl	80019fc <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc f924 	bl	80019fc <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e056      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x41c>
 80057ce:	e04e      	b.n	800586e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <HAL_RCC_OscConfig+0x4ec>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d6:	f7fc f911 	bl	80019fc <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057de:	f7fc f90d 	bl	80019fc <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e03f      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f0:	4b22      	ldr	r3, [pc, #136]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x44a>
 80057fc:	e037      	b.n	800586e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e032      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800580a:	4b1c      	ldr	r3, [pc, #112]	; (800587c <HAL_RCC_OscConfig+0x4e8>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d028      	beq.n	800586a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d121      	bne.n	800586a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d11a      	bne.n	800586a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800583a:	4013      	ands	r3, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005840:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005842:	4293      	cmp	r3, r2
 8005844:	d111      	bne.n	800586a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d107      	bne.n	800586a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40007000 	.word	0x40007000
 800587c:	40023800 	.word	0x40023800
 8005880:	42470060 	.word	0x42470060

08005884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0cc      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005898:	4b68      	ldr	r3, [pc, #416]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d90c      	bls.n	80058c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a6:	4b65      	ldr	r3, [pc, #404]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b63      	ldr	r3, [pc, #396]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0b8      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d020      	beq.n	800590e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a58      	ldr	r2, [pc, #352]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f0:	4b53      	ldr	r3, [pc, #332]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a52      	ldr	r2, [pc, #328]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fc:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	494d      	ldr	r1, [pc, #308]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d044      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d119      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d003      	beq.n	8005942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593e:	2b03      	cmp	r3, #3
 8005940:	d107      	bne.n	8005952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005942:	4b3f      	ldr	r3, [pc, #252]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e06f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005952:	4b3b      	ldr	r3, [pc, #236]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e067      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005962:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f023 0203 	bic.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4934      	ldr	r1, [pc, #208]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005974:	f7fc f842 	bl	80019fc <HAL_GetTick>
 8005978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597a:	e00a      	b.n	8005992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800597c:	f7fc f83e 	bl	80019fc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f241 3288 	movw	r2, #5000	; 0x1388
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e04f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005992:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 020c 	and.w	r2, r3, #12
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d1eb      	bne.n	800597c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d20c      	bcs.n	80059cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ba:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e032      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d8:	4b19      	ldr	r3, [pc, #100]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4916      	ldr	r1, [pc, #88]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	490e      	ldr	r1, [pc, #56]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a0a:	f000 f821 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	490a      	ldr	r1, [pc, #40]	; (8005a44 <HAL_RCC_ClockConfig+0x1c0>)
 8005a1c:	5ccb      	ldrb	r3, [r1, r3]
 8005a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fb ffa2 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023c00 	.word	0x40023c00
 8005a40:	40023800 	.word	0x40023800
 8005a44:	08007948 	.word	0x08007948
 8005a48:	200000dc 	.word	0x200000dc
 8005a4c:	200000e0 	.word	0x200000e0

08005a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a50:	b5b0      	push	{r4, r5, r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a56:	2100      	movs	r1, #0
 8005a58:	6079      	str	r1, [r7, #4]
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	60f9      	str	r1, [r7, #12]
 8005a5e:	2100      	movs	r1, #0
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a62:	2100      	movs	r1, #0
 8005a64:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a66:	4952      	ldr	r1, [pc, #328]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a68:	6889      	ldr	r1, [r1, #8]
 8005a6a:	f001 010c 	and.w	r1, r1, #12
 8005a6e:	2908      	cmp	r1, #8
 8005a70:	d00d      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x3e>
 8005a72:	2908      	cmp	r1, #8
 8005a74:	f200 8094 	bhi.w	8005ba0 <HAL_RCC_GetSysClockFreq+0x150>
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_RCC_GetSysClockFreq+0x32>
 8005a7c:	2904      	cmp	r1, #4
 8005a7e:	d003      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x38>
 8005a80:	e08e      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a82:	4b4c      	ldr	r3, [pc, #304]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a84:	60bb      	str	r3, [r7, #8]
       break;
 8005a86:	e08e      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a88:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a8a:	60bb      	str	r3, [r7, #8]
      break;
 8005a8c:	e08b      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a8e:	4948      	ldr	r1, [pc, #288]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a90:	6849      	ldr	r1, [r1, #4]
 8005a92:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005a96:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a98:	4945      	ldr	r1, [pc, #276]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a9a:	6849      	ldr	r1, [r1, #4]
 8005a9c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005aa0:	2900      	cmp	r1, #0
 8005aa2:	d024      	beq.n	8005aee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa4:	4942      	ldr	r1, [pc, #264]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005aa6:	6849      	ldr	r1, [r1, #4]
 8005aa8:	0989      	lsrs	r1, r1, #6
 8005aaa:	4608      	mov	r0, r1
 8005aac:	f04f 0100 	mov.w	r1, #0
 8005ab0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ab4:	f04f 0500 	mov.w	r5, #0
 8005ab8:	ea00 0204 	and.w	r2, r0, r4
 8005abc:	ea01 0305 	and.w	r3, r1, r5
 8005ac0:	493d      	ldr	r1, [pc, #244]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ac2:	fb01 f003 	mul.w	r0, r1, r3
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	fb01 f102 	mul.w	r1, r1, r2
 8005acc:	1844      	adds	r4, r0, r1
 8005ace:	493a      	ldr	r1, [pc, #232]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ad0:	fba2 0101 	umull	r0, r1, r2, r1
 8005ad4:	1863      	adds	r3, r4, r1
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	f7fa fbde 	bl	80002a0 <__aeabi_uldivmod>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4613      	mov	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e04a      	b.n	8005b84 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	099b      	lsrs	r3, r3, #6
 8005af4:	461a      	mov	r2, r3
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005afe:	f04f 0100 	mov.w	r1, #0
 8005b02:	ea02 0400 	and.w	r4, r2, r0
 8005b06:	ea03 0501 	and.w	r5, r3, r1
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	014b      	lsls	r3, r1, #5
 8005b18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b1c:	0142      	lsls	r2, r0, #5
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	1b00      	subs	r0, r0, r4
 8005b24:	eb61 0105 	sbc.w	r1, r1, r5
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	018b      	lsls	r3, r1, #6
 8005b32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b36:	0182      	lsls	r2, r0, #6
 8005b38:	1a12      	subs	r2, r2, r0
 8005b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b3e:	f04f 0000 	mov.w	r0, #0
 8005b42:	f04f 0100 	mov.w	r1, #0
 8005b46:	00d9      	lsls	r1, r3, #3
 8005b48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b4c:	00d0      	lsls	r0, r2, #3
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	1912      	adds	r2, r2, r4
 8005b54:	eb45 0303 	adc.w	r3, r5, r3
 8005b58:	f04f 0000 	mov.w	r0, #0
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	0299      	lsls	r1, r3, #10
 8005b62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b66:	0290      	lsls	r0, r2, #10
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	461a      	mov	r2, r3
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	f7fa fb92 	bl	80002a0 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4613      	mov	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	60bb      	str	r3, [r7, #8]
      break;
 8005b9e:	e002      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005ba2:	60bb      	str	r3, [r7, #8]
      break;
 8005ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	00f42400 	.word	0x00f42400
 8005bb8:	017d7840 	.word	0x017d7840

08005bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc0:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	200000dc 	.word	0x200000dc

08005bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bd8:	f7ff fff0 	bl	8005bbc <HAL_RCC_GetHCLKFreq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	0a9b      	lsrs	r3, r3, #10
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	4903      	ldr	r1, [pc, #12]	; (8005bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bea:	5ccb      	ldrb	r3, [r1, r3]
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	08007958 	.word	0x08007958

08005bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c00:	f7ff ffdc 	bl	8005bbc <HAL_RCC_GetHCLKFreq>
 8005c04:	4602      	mov	r2, r0
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	0b5b      	lsrs	r3, r3, #13
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	4903      	ldr	r1, [pc, #12]	; (8005c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c12:	5ccb      	ldrb	r3, [r1, r3]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	08007958 	.word	0x08007958

08005c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e03f      	b.n	8005cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fb fc8e 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	; 0x24
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 ff65 	bl	8006b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b08a      	sub	sp, #40	; 0x28
 8005cc2:	af02      	add	r7, sp, #8
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d17c      	bne.n	8005dd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_Transmit+0x2c>
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e075      	b.n	8005dda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Transmit+0x3e>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e06e      	b.n	8005dda <HAL_UART_Transmit+0x11c>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2221      	movs	r2, #33	; 0x21
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d12:	f7fb fe73 	bl	80019fc <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	88fa      	ldrh	r2, [r7, #6]
 8005d22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2c:	d108      	bne.n	8005d40 <HAL_UART_Transmit+0x82>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e003      	b.n	8005d48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d50:	e02a      	b.n	8005da8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2180      	movs	r1, #128	; 0x80
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fc21 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e036      	b.n	8005dda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	3302      	adds	r3, #2
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	e007      	b.n	8005d9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	3301      	adds	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1cf      	bne.n	8005d52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	2140      	movs	r1, #64	; 0x40
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fbf1 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e006      	b.n	8005dda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d11d      	bne.n	8005e38 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Receive_DMA+0x26>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e016      	b.n	8005e3a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Receive_DMA+0x38>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e00f      	b.n	8005e3a <HAL_UART_Receive_DMA+0x58>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fc26 	bl	8006680 <UART_Start_Receive_DMA>
 8005e34:	4603      	mov	r3, r0
 8005e36:	e000      	b.n	8005e3a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b0ba      	sub	sp, #232	; 0xe8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <HAL_UART_IRQHandler+0x66>
 8005e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fd8d 	bl	80069c2 <UART_Receive_IT>
      return;
 8005ea8:	e256      	b.n	8006358 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80de 	beq.w	8006070 <HAL_UART_IRQHandler+0x22c>
 8005eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80d1 	beq.w	8006070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xae>
 8005eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f043 0201 	orr.w	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_UART_IRQHandler+0xd2>
 8005efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0202 	orr.w	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <HAL_UART_IRQHandler+0xf6>
 8005f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f043 0204 	orr.w	r2, r3, #4
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d011      	beq.n	8005f6a <HAL_UART_IRQHandler+0x126>
 8005f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d105      	bne.n	8005f5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f043 0208 	orr.w	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 81ed 	beq.w	800634e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_UART_IRQHandler+0x14e>
 8005f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fd18 	bl	80069c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <HAL_UART_IRQHandler+0x17a>
 8005fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d04f      	beq.n	800605e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fc20 	bl	8006804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d141      	bne.n	8006056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3314      	adds	r3, #20
 8005fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800600a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1d9      	bne.n	8005fd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	2b00      	cmp	r3, #0
 8006024:	d013      	beq.n	800604e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	4a7d      	ldr	r2, [pc, #500]	; (8006220 <HAL_UART_IRQHandler+0x3dc>)
 800602c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	4618      	mov	r0, r3
 8006034:	f7fb ff9a 	bl	8001f6c <HAL_DMA_Abort_IT>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d016      	beq.n	800606c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006048:	4610      	mov	r0, r2
 800604a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	e00e      	b.n	800606c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f99a 	bl	8006388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	e00a      	b.n	800606c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f996 	bl	8006388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	e006      	b.n	800606c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f992 	bl	8006388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800606a:	e170      	b.n	800634e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	bf00      	nop
    return;
 800606e:	e16e      	b.n	800634e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	2b01      	cmp	r3, #1
 8006076:	f040 814a 	bne.w	800630e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8143 	beq.w	800630e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 813c 	beq.w	800630e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006096:	2300      	movs	r3, #0
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	f040 80b4 	bne.w	8006224 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8140 	beq.w	8006352 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060da:	429a      	cmp	r2, r3
 80060dc:	f080 8139 	bcs.w	8006352 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f2:	f000 8088 	beq.w	8006206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800610c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006122:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800612e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800613a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1d9      	bne.n	80060f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3314      	adds	r3, #20
 8006148:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3314      	adds	r3, #20
 8006162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006166:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800616a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800616e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e1      	bne.n	8006142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3314      	adds	r3, #20
 8006184:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800618e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e3      	bne.n	800617e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	330c      	adds	r3, #12
 80061ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d6:	f023 0310 	bic.w	r3, r3, #16
 80061da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80061ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e3      	bne.n	80061c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	4618      	mov	r0, r3
 8006202:	f7fb fe43 	bl	8001e8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800620e:	b29b      	uxth	r3, r3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8c0 	bl	800639c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800621c:	e099      	b.n	8006352 <HAL_UART_IRQHandler+0x50e>
 800621e:	bf00      	nop
 8006220:	080068cb 	.word	0x080068cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800622c:	b29b      	uxth	r3, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 808b 	beq.w	8006356 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8086 	beq.w	8006356 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800626e:	647a      	str	r2, [r7, #68]	; 0x44
 8006270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e3      	bne.n	800624a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	623b      	str	r3, [r7, #32]
   return(result);
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3314      	adds	r3, #20
 80062a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062a6:	633a      	str	r2, [r7, #48]	; 0x30
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e3      	bne.n	8006282 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0310 	bic.w	r3, r3, #16
 80062de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	330c      	adds	r3, #12
 80062e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062ec:	61fa      	str	r2, [r7, #28]
 80062ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	69b9      	ldr	r1, [r7, #24]
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	617b      	str	r3, [r7, #20]
   return(result);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e3      	bne.n	80062c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f848 	bl	800639c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800630c:	e023      	b.n	8006356 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <HAL_UART_IRQHandler+0x4ea>
 800631a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fae3 	bl	80068f2 <UART_Transmit_IT>
    return;
 800632c:	e014      	b.n	8006358 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00e      	beq.n	8006358 <HAL_UART_IRQHandler+0x514>
 800633a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fb23 	bl	8006992 <UART_EndTransmit_IT>
    return;
 800634c:	e004      	b.n	8006358 <HAL_UART_IRQHandler+0x514>
    return;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <HAL_UART_IRQHandler+0x514>
      return;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_UART_IRQHandler+0x514>
      return;
 8006356:	bf00      	nop
  }
}
 8006358:	37e8      	adds	r7, #232	; 0xe8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop

08006360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b09c      	sub	sp, #112	; 0x70
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d172      	bne.n	80064b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80063d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d2:	2200      	movs	r2, #0
 80063d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80063f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e5      	bne.n	80063d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3314      	adds	r3, #20
 8006410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	667b      	str	r3, [r7, #100]	; 0x64
 8006422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3314      	adds	r3, #20
 8006428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800642a:	647a      	str	r2, [r7, #68]	; 0x44
 800642c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e5      	bne.n	800640a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3314      	adds	r3, #20
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	623b      	str	r3, [r7, #32]
   return(result);
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006454:	663b      	str	r3, [r7, #96]	; 0x60
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3314      	adds	r3, #20
 800645c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800645e:	633a      	str	r2, [r7, #48]	; 0x30
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006474:	2220      	movs	r2, #32
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	2b01      	cmp	r3, #1
 8006480:	d119      	bne.n	80064b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	60fb      	str	r3, [r7, #12]
   return(result);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f023 0310 	bic.w	r3, r3, #16
 8006498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800649a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330c      	adds	r3, #12
 80064a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064a2:	61fa      	str	r2, [r7, #28]
 80064a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	69b9      	ldr	r1, [r7, #24]
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	617b      	str	r3, [r7, #20]
   return(result);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d106      	bne.n	80064cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064c2:	4619      	mov	r1, r3
 80064c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064c6:	f7ff ff69 	bl	800639c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064ca:	e002      	b.n	80064d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80064cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064ce:	f7fa fcc9 	bl	8000e64 <HAL_UART_RxCpltCallback>
}
 80064d2:	bf00      	nop
 80064d4:	3770      	adds	r7, #112	; 0x70
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d108      	bne.n	8006502 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4619      	mov	r1, r3
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ff4e 	bl	800639c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006500:	e002      	b.n	8006508 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff ff36 	bl	8006374 <HAL_UART_RxHalfCpltCallback>
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	bf0c      	ite	eq
 8006530:	2301      	moveq	r3, #1
 8006532:	2300      	movne	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b21      	cmp	r3, #33	; 0x21
 8006542:	d108      	bne.n	8006556 <UART_DMAError+0x46>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2200      	movs	r2, #0
 800654e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006550:	68b8      	ldr	r0, [r7, #8]
 8006552:	f000 f92f 	bl	80067b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	bf0c      	ite	eq
 8006564:	2301      	moveq	r3, #1
 8006566:	2300      	movne	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b22      	cmp	r3, #34	; 0x22
 8006576:	d108      	bne.n	800658a <UART_DMAError+0x7a>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2200      	movs	r2, #0
 8006582:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006584:	68b8      	ldr	r0, [r7, #8]
 8006586:	f000 f93d 	bl	8006804 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0210 	orr.w	r2, r3, #16
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006596:	68b8      	ldr	r0, [r7, #8]
 8006598:	f7ff fef6 	bl	8006388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b090      	sub	sp, #64	; 0x40
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b4:	e050      	b.n	8006658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d04c      	beq.n	8006658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065c4:	f7fb fa1a 	bl	80019fc <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d241      	bcs.n	8006658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f4:	637a      	str	r2, [r7, #52]	; 0x34
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e5      	bne.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3314      	adds	r3, #20
 800660e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	613b      	str	r3, [r7, #16]
   return(result);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3314      	adds	r3, #20
 8006626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006628:	623a      	str	r2, [r7, #32]
 800662a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	69f9      	ldr	r1, [r7, #28]
 800662e:	6a3a      	ldr	r2, [r7, #32]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	61bb      	str	r3, [r7, #24]
   return(result);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e5      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e00f      	b.n	8006678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	429a      	cmp	r2, r3
 8006674:	d09f      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3740      	adds	r7, #64	; 0x40
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b098      	sub	sp, #96	; 0x60
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	4613      	mov	r3, r2
 800668c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	88fa      	ldrh	r2, [r7, #6]
 8006698:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2222      	movs	r2, #34	; 0x22
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	4a3e      	ldr	r2, [pc, #248]	; (80067a8 <UART_Start_Receive_DMA+0x128>)
 80066ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	4a3d      	ldr	r2, [pc, #244]	; (80067ac <UART_Start_Receive_DMA+0x12c>)
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	4a3c      	ldr	r2, [pc, #240]	; (80067b0 <UART_Start_Receive_DMA+0x130>)
 80066be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c4:	2200      	movs	r2, #0
 80066c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	f7fb fb7c 	bl	8001ddc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	330c      	adds	r3, #12
 8006708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006718:	65bb      	str	r3, [r7, #88]	; 0x58
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006722:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006724:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006728:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3314      	adds	r3, #20
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	657b      	str	r3, [r7, #84]	; 0x54
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006756:	63ba      	str	r2, [r7, #56]	; 0x38
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800675c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e5      	bne.n	8006736 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3314      	adds	r3, #20
 8006770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	617b      	str	r3, [r7, #20]
   return(result);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006780:	653b      	str	r3, [r7, #80]	; 0x50
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800678a:	627a      	str	r2, [r7, #36]	; 0x24
 800678c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6a39      	ldr	r1, [r7, #32]
 8006790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	61fb      	str	r3, [r7, #28]
   return(result);
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e5      	bne.n	800676a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3760      	adds	r7, #96	; 0x60
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	080063b5 	.word	0x080063b5
 80067ac:	080064db 	.word	0x080064db
 80067b0:	08006511 	.word	0x08006511

080067b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b089      	sub	sp, #36	; 0x24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	61ba      	str	r2, [r7, #24]
 80067de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6979      	ldr	r1, [r7, #20]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e5      	bne.n	80067bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80067f8:	bf00      	nop
 80067fa:	3724      	adds	r7, #36	; 0x24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b095      	sub	sp, #84	; 0x54
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800682c:	643a      	str	r2, [r7, #64]	; 0x40
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	2b01      	cmp	r3, #1
 800687a:	d119      	bne.n	80068b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	60bb      	str	r3, [r7, #8]
   return(result);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	647b      	str	r3, [r7, #68]	; 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689c:	61ba      	str	r2, [r7, #24]
 800689e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	613b      	str	r3, [r7, #16]
   return(result);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e5      	bne.n	800687c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068be:	bf00      	nop
 80068c0:	3754      	adds	r7, #84	; 0x54
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fd4f 	bl	8006388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b21      	cmp	r3, #33	; 0x21
 8006904:	d13e      	bne.n	8006984 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690e:	d114      	bne.n	800693a <UART_Transmit_IT+0x48>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d110      	bne.n	800693a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	1c9a      	adds	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	621a      	str	r2, [r3, #32]
 8006938:	e008      	b.n	800694c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	1c59      	adds	r1, r3, #1
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6211      	str	r1, [r2, #32]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4619      	mov	r1, r3
 800695a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10f      	bne.n	8006980 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800696e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800697e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff fcd4 	bl	8006360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b08c      	sub	sp, #48	; 0x30
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b22      	cmp	r3, #34	; 0x22
 80069d4:	f040 80ab 	bne.w	8006b2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e0:	d117      	bne.n	8006a12 <UART_Receive_IT+0x50>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d113      	bne.n	8006a12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a10:	e026      	b.n	8006a60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a24:	d007      	beq.n	8006a36 <UART_Receive_IT+0x74>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <UART_Receive_IT+0x82>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e008      	b.n	8006a56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d15a      	bne.n	8006b2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0220 	bic.w	r2, r2, #32
 8006a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d135      	bne.n	8006b20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f023 0310 	bic.w	r3, r3, #16
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	623a      	str	r2, [r7, #32]
 8006adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	69f9      	ldr	r1, [r7, #28]
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	d10a      	bne.n	8006b12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fc3f 	bl	800639c <HAL_UARTEx_RxEventCallback>
 8006b1e:	e002      	b.n	8006b26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fa f99f 	bl	8000e64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e002      	b.n	8006b30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e000      	b.n	8006b30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b2e:	2302      	movs	r3, #2
  }
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3730      	adds	r7, #48	; 0x30
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	b09f      	sub	sp, #124	; 0x7c
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4e:	68d9      	ldr	r1, [r3, #12]
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	ea40 0301 	orr.w	r3, r0, r1
 8006b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b7c:	f021 010c 	bic.w	r1, r1, #12
 8006b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b86:	430b      	orrs	r3, r1
 8006b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b96:	6999      	ldr	r1, [r3, #24]
 8006b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	ea40 0301 	orr.w	r3, r0, r1
 8006ba0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4bc5      	ldr	r3, [pc, #788]	; (8006ebc <UART_SetConfig+0x384>)
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d004      	beq.n	8006bb6 <UART_SetConfig+0x7e>
 8006bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4bc3      	ldr	r3, [pc, #780]	; (8006ec0 <UART_SetConfig+0x388>)
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d103      	bne.n	8006bbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bb6:	f7ff f821 	bl	8005bfc <HAL_RCC_GetPCLK2Freq>
 8006bba:	6778      	str	r0, [r7, #116]	; 0x74
 8006bbc:	e002      	b.n	8006bc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bbe:	f7ff f809 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8006bc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bcc:	f040 80b6 	bne.w	8006d3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd2:	461c      	mov	r4, r3
 8006bd4:	f04f 0500 	mov.w	r5, #0
 8006bd8:	4622      	mov	r2, r4
 8006bda:	462b      	mov	r3, r5
 8006bdc:	1891      	adds	r1, r2, r2
 8006bde:	6439      	str	r1, [r7, #64]	; 0x40
 8006be0:	415b      	adcs	r3, r3
 8006be2:	647b      	str	r3, [r7, #68]	; 0x44
 8006be4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006be8:	1912      	adds	r2, r2, r4
 8006bea:	eb45 0303 	adc.w	r3, r5, r3
 8006bee:	f04f 0000 	mov.w	r0, #0
 8006bf2:	f04f 0100 	mov.w	r1, #0
 8006bf6:	00d9      	lsls	r1, r3, #3
 8006bf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bfc:	00d0      	lsls	r0, r2, #3
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	1911      	adds	r1, r2, r4
 8006c04:	6639      	str	r1, [r7, #96]	; 0x60
 8006c06:	416b      	adcs	r3, r5
 8006c08:	667b      	str	r3, [r7, #100]	; 0x64
 8006c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	1891      	adds	r1, r2, r2
 8006c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c18:	415b      	adcs	r3, r3
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006c24:	f7f9 fb3c 	bl	80002a0 <__aeabi_uldivmod>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4ba5      	ldr	r3, [pc, #660]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	011e      	lsls	r6, r3, #4
 8006c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c38:	461c      	mov	r4, r3
 8006c3a:	f04f 0500 	mov.w	r5, #0
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	1891      	adds	r1, r2, r2
 8006c44:	6339      	str	r1, [r7, #48]	; 0x30
 8006c46:	415b      	adcs	r3, r3
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c4e:	1912      	adds	r2, r2, r4
 8006c50:	eb45 0303 	adc.w	r3, r5, r3
 8006c54:	f04f 0000 	mov.w	r0, #0
 8006c58:	f04f 0100 	mov.w	r1, #0
 8006c5c:	00d9      	lsls	r1, r3, #3
 8006c5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c62:	00d0      	lsls	r0, r2, #3
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	1911      	adds	r1, r2, r4
 8006c6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c6c:	416b      	adcs	r3, r5
 8006c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	461a      	mov	r2, r3
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	1891      	adds	r1, r2, r2
 8006c7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c7e:	415b      	adcs	r3, r3
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c8a:	f7f9 fb09 	bl	80002a0 <__aeabi_uldivmod>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4b8c      	ldr	r3, [pc, #560]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006c94:	fba3 1302 	umull	r1, r3, r3, r2
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	2164      	movs	r1, #100	; 0x64
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	3332      	adds	r3, #50	; 0x32
 8006ca6:	4a87      	ldr	r2, [pc, #540]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cb4:	441e      	add	r6, r3
 8006cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f04f 0100 	mov.w	r1, #0
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	1894      	adds	r4, r2, r2
 8006cc4:	623c      	str	r4, [r7, #32]
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cce:	1812      	adds	r2, r2, r0
 8006cd0:	eb41 0303 	adc.w	r3, r1, r3
 8006cd4:	f04f 0400 	mov.w	r4, #0
 8006cd8:	f04f 0500 	mov.w	r5, #0
 8006cdc:	00dd      	lsls	r5, r3, #3
 8006cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ce2:	00d4      	lsls	r4, r2, #3
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	462b      	mov	r3, r5
 8006ce8:	1814      	adds	r4, r2, r0
 8006cea:	653c      	str	r4, [r7, #80]	; 0x50
 8006cec:	414b      	adcs	r3, r1
 8006cee:	657b      	str	r3, [r7, #84]	; 0x54
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	1891      	adds	r1, r2, r2
 8006cfc:	61b9      	str	r1, [r7, #24]
 8006cfe:	415b      	adcs	r3, r3
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006d0a:	f7f9 fac9 	bl	80002a0 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4b6c      	ldr	r3, [pc, #432]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006d14:	fba3 1302 	umull	r1, r3, r3, r2
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2164      	movs	r1, #100	; 0x64
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	3332      	adds	r3, #50	; 0x32
 8006d26:	4a67      	ldr	r2, [pc, #412]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f003 0207 	and.w	r2, r3, #7
 8006d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4432      	add	r2, r6
 8006d38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d3a:	e0b9      	b.n	8006eb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d3e:	461c      	mov	r4, r3
 8006d40:	f04f 0500 	mov.w	r5, #0
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	1891      	adds	r1, r2, r2
 8006d4a:	6139      	str	r1, [r7, #16]
 8006d4c:	415b      	adcs	r3, r3
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d54:	1912      	adds	r2, r2, r4
 8006d56:	eb45 0303 	adc.w	r3, r5, r3
 8006d5a:	f04f 0000 	mov.w	r0, #0
 8006d5e:	f04f 0100 	mov.w	r1, #0
 8006d62:	00d9      	lsls	r1, r3, #3
 8006d64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d68:	00d0      	lsls	r0, r2, #3
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	eb12 0804 	adds.w	r8, r2, r4
 8006d72:	eb43 0905 	adc.w	r9, r3, r5
 8006d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f04f 0100 	mov.w	r1, #0
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	008b      	lsls	r3, r1, #2
 8006d8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d8e:	0082      	lsls	r2, r0, #2
 8006d90:	4640      	mov	r0, r8
 8006d92:	4649      	mov	r1, r9
 8006d94:	f7f9 fa84 	bl	80002a0 <__aeabi_uldivmod>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4b49      	ldr	r3, [pc, #292]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	011e      	lsls	r6, r3, #4
 8006da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da8:	4618      	mov	r0, r3
 8006daa:	f04f 0100 	mov.w	r1, #0
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	1894      	adds	r4, r2, r2
 8006db4:	60bc      	str	r4, [r7, #8]
 8006db6:	415b      	adcs	r3, r3
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dbe:	1812      	adds	r2, r2, r0
 8006dc0:	eb41 0303 	adc.w	r3, r1, r3
 8006dc4:	f04f 0400 	mov.w	r4, #0
 8006dc8:	f04f 0500 	mov.w	r5, #0
 8006dcc:	00dd      	lsls	r5, r3, #3
 8006dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dd2:	00d4      	lsls	r4, r2, #3
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	1814      	adds	r4, r2, r0
 8006dda:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ddc:	414b      	adcs	r3, r1
 8006dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f04f 0100 	mov.w	r1, #0
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	008b      	lsls	r3, r1, #2
 8006df4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006df8:	0082      	lsls	r2, r0, #2
 8006dfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006dfe:	f7f9 fa4f 	bl	80002a0 <__aeabi_uldivmod>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006e08:	fba3 1302 	umull	r1, r3, r3, r2
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	2164      	movs	r1, #100	; 0x64
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	3332      	adds	r3, #50	; 0x32
 8006e1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e26:	441e      	add	r6, r3
 8006e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f04f 0100 	mov.w	r1, #0
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	1894      	adds	r4, r2, r2
 8006e36:	603c      	str	r4, [r7, #0]
 8006e38:	415b      	adcs	r3, r3
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e40:	1812      	adds	r2, r2, r0
 8006e42:	eb41 0303 	adc.w	r3, r1, r3
 8006e46:	f04f 0400 	mov.w	r4, #0
 8006e4a:	f04f 0500 	mov.w	r5, #0
 8006e4e:	00dd      	lsls	r5, r3, #3
 8006e50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e54:	00d4      	lsls	r4, r2, #3
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	eb12 0a00 	adds.w	sl, r2, r0
 8006e5e:	eb43 0b01 	adc.w	fp, r3, r1
 8006e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	008b      	lsls	r3, r1, #2
 8006e76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e7a:	0082      	lsls	r2, r0, #2
 8006e7c:	4650      	mov	r0, sl
 8006e7e:	4659      	mov	r1, fp
 8006e80:	f7f9 fa0e 	bl	80002a0 <__aeabi_uldivmod>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	2164      	movs	r1, #100	; 0x64
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	3332      	adds	r3, #50	; 0x32
 8006e9c:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <UART_SetConfig+0x38c>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	f003 020f 	and.w	r2, r3, #15
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4432      	add	r2, r6
 8006eae:	609a      	str	r2, [r3, #8]
}
 8006eb0:	bf00      	nop
 8006eb2:	377c      	adds	r7, #124	; 0x7c
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eba:	bf00      	nop
 8006ebc:	40011000 	.word	0x40011000
 8006ec0:	40011400 	.word	0x40011400
 8006ec4:	51eb851f 	.word	0x51eb851f

08006ec8 <atoi>:
 8006ec8:	220a      	movs	r2, #10
 8006eca:	2100      	movs	r1, #0
 8006ecc:	f000 b8d6 	b.w	800707c <strtol>

08006ed0 <__errno>:
 8006ed0:	4b01      	ldr	r3, [pc, #4]	; (8006ed8 <__errno+0x8>)
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	200000e8 	.word	0x200000e8

08006edc <__libc_init_array>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4d0d      	ldr	r5, [pc, #52]	; (8006f14 <__libc_init_array+0x38>)
 8006ee0:	4c0d      	ldr	r4, [pc, #52]	; (8006f18 <__libc_init_array+0x3c>)
 8006ee2:	1b64      	subs	r4, r4, r5
 8006ee4:	10a4      	asrs	r4, r4, #2
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	42a6      	cmp	r6, r4
 8006eea:	d109      	bne.n	8006f00 <__libc_init_array+0x24>
 8006eec:	4d0b      	ldr	r5, [pc, #44]	; (8006f1c <__libc_init_array+0x40>)
 8006eee:	4c0c      	ldr	r4, [pc, #48]	; (8006f20 <__libc_init_array+0x44>)
 8006ef0:	f000 fcdc 	bl	80078ac <_init>
 8006ef4:	1b64      	subs	r4, r4, r5
 8006ef6:	10a4      	asrs	r4, r4, #2
 8006ef8:	2600      	movs	r6, #0
 8006efa:	42a6      	cmp	r6, r4
 8006efc:	d105      	bne.n	8006f0a <__libc_init_array+0x2e>
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f04:	4798      	blx	r3
 8006f06:	3601      	adds	r6, #1
 8006f08:	e7ee      	b.n	8006ee8 <__libc_init_array+0xc>
 8006f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0e:	4798      	blx	r3
 8006f10:	3601      	adds	r6, #1
 8006f12:	e7f2      	b.n	8006efa <__libc_init_array+0x1e>
 8006f14:	08007aa4 	.word	0x08007aa4
 8006f18:	08007aa4 	.word	0x08007aa4
 8006f1c:	08007aa4 	.word	0x08007aa4
 8006f20:	08007aa8 	.word	0x08007aa8

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <siprintf>:
 8006f34:	b40e      	push	{r1, r2, r3}
 8006f36:	b500      	push	{lr}
 8006f38:	b09c      	sub	sp, #112	; 0x70
 8006f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f3c:	9002      	str	r0, [sp, #8]
 8006f3e:	9006      	str	r0, [sp, #24]
 8006f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f44:	4809      	ldr	r0, [pc, #36]	; (8006f6c <siprintf+0x38>)
 8006f46:	9107      	str	r1, [sp, #28]
 8006f48:	9104      	str	r1, [sp, #16]
 8006f4a:	4909      	ldr	r1, [pc, #36]	; (8006f70 <siprintf+0x3c>)
 8006f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f50:	9105      	str	r1, [sp, #20]
 8006f52:	6800      	ldr	r0, [r0, #0]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	a902      	add	r1, sp, #8
 8006f58:	f000 f8f6 	bl	8007148 <_svfiprintf_r>
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	b01c      	add	sp, #112	; 0x70
 8006f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f68:	b003      	add	sp, #12
 8006f6a:	4770      	bx	lr
 8006f6c:	200000e8 	.word	0x200000e8
 8006f70:	ffff0208 	.word	0xffff0208

08006f74 <_strtol_l.isra.0>:
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7a:	d001      	beq.n	8006f80 <_strtol_l.isra.0+0xc>
 8006f7c:	2b24      	cmp	r3, #36	; 0x24
 8006f7e:	d906      	bls.n	8006f8e <_strtol_l.isra.0+0x1a>
 8006f80:	f7ff ffa6 	bl	8006ed0 <__errno>
 8006f84:	2316      	movs	r3, #22
 8006f86:	6003      	str	r3, [r0, #0]
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8e:	4f3a      	ldr	r7, [pc, #232]	; (8007078 <_strtol_l.isra.0+0x104>)
 8006f90:	468e      	mov	lr, r1
 8006f92:	4676      	mov	r6, lr
 8006f94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006f98:	5de5      	ldrb	r5, [r4, r7]
 8006f9a:	f015 0508 	ands.w	r5, r5, #8
 8006f9e:	d1f8      	bne.n	8006f92 <_strtol_l.isra.0+0x1e>
 8006fa0:	2c2d      	cmp	r4, #45	; 0x2d
 8006fa2:	d134      	bne.n	800700e <_strtol_l.isra.0+0x9a>
 8006fa4:	f89e 4000 	ldrb.w	r4, [lr]
 8006fa8:	f04f 0801 	mov.w	r8, #1
 8006fac:	f106 0e02 	add.w	lr, r6, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d05c      	beq.n	800706e <_strtol_l.isra.0+0xfa>
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d10c      	bne.n	8006fd2 <_strtol_l.isra.0+0x5e>
 8006fb8:	2c30      	cmp	r4, #48	; 0x30
 8006fba:	d10a      	bne.n	8006fd2 <_strtol_l.isra.0+0x5e>
 8006fbc:	f89e 4000 	ldrb.w	r4, [lr]
 8006fc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006fc4:	2c58      	cmp	r4, #88	; 0x58
 8006fc6:	d14d      	bne.n	8007064 <_strtol_l.isra.0+0xf0>
 8006fc8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f10e 0e02 	add.w	lr, lr, #2
 8006fd2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006fd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006fda:	2600      	movs	r6, #0
 8006fdc:	fbbc f9f3 	udiv	r9, ip, r3
 8006fe0:	4635      	mov	r5, r6
 8006fe2:	fb03 ca19 	mls	sl, r3, r9, ip
 8006fe6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006fea:	2f09      	cmp	r7, #9
 8006fec:	d818      	bhi.n	8007020 <_strtol_l.isra.0+0xac>
 8006fee:	463c      	mov	r4, r7
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	dd24      	ble.n	800703e <_strtol_l.isra.0+0xca>
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	db1f      	blt.n	8007038 <_strtol_l.isra.0+0xc4>
 8006ff8:	45a9      	cmp	r9, r5
 8006ffa:	d31d      	bcc.n	8007038 <_strtol_l.isra.0+0xc4>
 8006ffc:	d101      	bne.n	8007002 <_strtol_l.isra.0+0x8e>
 8006ffe:	45a2      	cmp	sl, r4
 8007000:	db1a      	blt.n	8007038 <_strtol_l.isra.0+0xc4>
 8007002:	fb05 4503 	mla	r5, r5, r3, r4
 8007006:	2601      	movs	r6, #1
 8007008:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800700c:	e7eb      	b.n	8006fe6 <_strtol_l.isra.0+0x72>
 800700e:	2c2b      	cmp	r4, #43	; 0x2b
 8007010:	bf08      	it	eq
 8007012:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007016:	46a8      	mov	r8, r5
 8007018:	bf08      	it	eq
 800701a:	f106 0e02 	addeq.w	lr, r6, #2
 800701e:	e7c7      	b.n	8006fb0 <_strtol_l.isra.0+0x3c>
 8007020:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007024:	2f19      	cmp	r7, #25
 8007026:	d801      	bhi.n	800702c <_strtol_l.isra.0+0xb8>
 8007028:	3c37      	subs	r4, #55	; 0x37
 800702a:	e7e1      	b.n	8006ff0 <_strtol_l.isra.0+0x7c>
 800702c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007030:	2f19      	cmp	r7, #25
 8007032:	d804      	bhi.n	800703e <_strtol_l.isra.0+0xca>
 8007034:	3c57      	subs	r4, #87	; 0x57
 8007036:	e7db      	b.n	8006ff0 <_strtol_l.isra.0+0x7c>
 8007038:	f04f 36ff 	mov.w	r6, #4294967295
 800703c:	e7e4      	b.n	8007008 <_strtol_l.isra.0+0x94>
 800703e:	2e00      	cmp	r6, #0
 8007040:	da05      	bge.n	800704e <_strtol_l.isra.0+0xda>
 8007042:	2322      	movs	r3, #34	; 0x22
 8007044:	6003      	str	r3, [r0, #0]
 8007046:	4665      	mov	r5, ip
 8007048:	b942      	cbnz	r2, 800705c <_strtol_l.isra.0+0xe8>
 800704a:	4628      	mov	r0, r5
 800704c:	e79d      	b.n	8006f8a <_strtol_l.isra.0+0x16>
 800704e:	f1b8 0f00 	cmp.w	r8, #0
 8007052:	d000      	beq.n	8007056 <_strtol_l.isra.0+0xe2>
 8007054:	426d      	negs	r5, r5
 8007056:	2a00      	cmp	r2, #0
 8007058:	d0f7      	beq.n	800704a <_strtol_l.isra.0+0xd6>
 800705a:	b10e      	cbz	r6, 8007060 <_strtol_l.isra.0+0xec>
 800705c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007060:	6011      	str	r1, [r2, #0]
 8007062:	e7f2      	b.n	800704a <_strtol_l.isra.0+0xd6>
 8007064:	2430      	movs	r4, #48	; 0x30
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1b3      	bne.n	8006fd2 <_strtol_l.isra.0+0x5e>
 800706a:	2308      	movs	r3, #8
 800706c:	e7b1      	b.n	8006fd2 <_strtol_l.isra.0+0x5e>
 800706e:	2c30      	cmp	r4, #48	; 0x30
 8007070:	d0a4      	beq.n	8006fbc <_strtol_l.isra.0+0x48>
 8007072:	230a      	movs	r3, #10
 8007074:	e7ad      	b.n	8006fd2 <_strtol_l.isra.0+0x5e>
 8007076:	bf00      	nop
 8007078:	08007969 	.word	0x08007969

0800707c <strtol>:
 800707c:	4613      	mov	r3, r2
 800707e:	460a      	mov	r2, r1
 8007080:	4601      	mov	r1, r0
 8007082:	4802      	ldr	r0, [pc, #8]	; (800708c <strtol+0x10>)
 8007084:	6800      	ldr	r0, [r0, #0]
 8007086:	f7ff bf75 	b.w	8006f74 <_strtol_l.isra.0>
 800708a:	bf00      	nop
 800708c:	200000e8 	.word	0x200000e8

08007090 <__ssputs_r>:
 8007090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	688e      	ldr	r6, [r1, #8]
 8007096:	429e      	cmp	r6, r3
 8007098:	4682      	mov	sl, r0
 800709a:	460c      	mov	r4, r1
 800709c:	4690      	mov	r8, r2
 800709e:	461f      	mov	r7, r3
 80070a0:	d838      	bhi.n	8007114 <__ssputs_r+0x84>
 80070a2:	898a      	ldrh	r2, [r1, #12]
 80070a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070a8:	d032      	beq.n	8007110 <__ssputs_r+0x80>
 80070aa:	6825      	ldr	r5, [r4, #0]
 80070ac:	6909      	ldr	r1, [r1, #16]
 80070ae:	eba5 0901 	sub.w	r9, r5, r1
 80070b2:	6965      	ldr	r5, [r4, #20]
 80070b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070bc:	3301      	adds	r3, #1
 80070be:	444b      	add	r3, r9
 80070c0:	106d      	asrs	r5, r5, #1
 80070c2:	429d      	cmp	r5, r3
 80070c4:	bf38      	it	cc
 80070c6:	461d      	movcc	r5, r3
 80070c8:	0553      	lsls	r3, r2, #21
 80070ca:	d531      	bpl.n	8007130 <__ssputs_r+0xa0>
 80070cc:	4629      	mov	r1, r5
 80070ce:	f000 fb47 	bl	8007760 <_malloc_r>
 80070d2:	4606      	mov	r6, r0
 80070d4:	b950      	cbnz	r0, 80070ec <__ssputs_r+0x5c>
 80070d6:	230c      	movs	r3, #12
 80070d8:	f8ca 3000 	str.w	r3, [sl]
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ec:	6921      	ldr	r1, [r4, #16]
 80070ee:	464a      	mov	r2, r9
 80070f0:	f000 fabe 	bl	8007670 <memcpy>
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	6126      	str	r6, [r4, #16]
 8007102:	6165      	str	r5, [r4, #20]
 8007104:	444e      	add	r6, r9
 8007106:	eba5 0509 	sub.w	r5, r5, r9
 800710a:	6026      	str	r6, [r4, #0]
 800710c:	60a5      	str	r5, [r4, #8]
 800710e:	463e      	mov	r6, r7
 8007110:	42be      	cmp	r6, r7
 8007112:	d900      	bls.n	8007116 <__ssputs_r+0x86>
 8007114:	463e      	mov	r6, r7
 8007116:	4632      	mov	r2, r6
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	4641      	mov	r1, r8
 800711c:	f000 fab6 	bl	800768c <memmove>
 8007120:	68a3      	ldr	r3, [r4, #8]
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	1b9b      	subs	r3, r3, r6
 8007126:	4432      	add	r2, r6
 8007128:	60a3      	str	r3, [r4, #8]
 800712a:	6022      	str	r2, [r4, #0]
 800712c:	2000      	movs	r0, #0
 800712e:	e7db      	b.n	80070e8 <__ssputs_r+0x58>
 8007130:	462a      	mov	r2, r5
 8007132:	f000 fb6f 	bl	8007814 <_realloc_r>
 8007136:	4606      	mov	r6, r0
 8007138:	2800      	cmp	r0, #0
 800713a:	d1e1      	bne.n	8007100 <__ssputs_r+0x70>
 800713c:	6921      	ldr	r1, [r4, #16]
 800713e:	4650      	mov	r0, sl
 8007140:	f000 fabe 	bl	80076c0 <_free_r>
 8007144:	e7c7      	b.n	80070d6 <__ssputs_r+0x46>
	...

08007148 <_svfiprintf_r>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	4698      	mov	r8, r3
 800714e:	898b      	ldrh	r3, [r1, #12]
 8007150:	061b      	lsls	r3, r3, #24
 8007152:	b09d      	sub	sp, #116	; 0x74
 8007154:	4607      	mov	r7, r0
 8007156:	460d      	mov	r5, r1
 8007158:	4614      	mov	r4, r2
 800715a:	d50e      	bpl.n	800717a <_svfiprintf_r+0x32>
 800715c:	690b      	ldr	r3, [r1, #16]
 800715e:	b963      	cbnz	r3, 800717a <_svfiprintf_r+0x32>
 8007160:	2140      	movs	r1, #64	; 0x40
 8007162:	f000 fafd 	bl	8007760 <_malloc_r>
 8007166:	6028      	str	r0, [r5, #0]
 8007168:	6128      	str	r0, [r5, #16]
 800716a:	b920      	cbnz	r0, 8007176 <_svfiprintf_r+0x2e>
 800716c:	230c      	movs	r3, #12
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	f04f 30ff 	mov.w	r0, #4294967295
 8007174:	e0d1      	b.n	800731a <_svfiprintf_r+0x1d2>
 8007176:	2340      	movs	r3, #64	; 0x40
 8007178:	616b      	str	r3, [r5, #20]
 800717a:	2300      	movs	r3, #0
 800717c:	9309      	str	r3, [sp, #36]	; 0x24
 800717e:	2320      	movs	r3, #32
 8007180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007184:	f8cd 800c 	str.w	r8, [sp, #12]
 8007188:	2330      	movs	r3, #48	; 0x30
 800718a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007334 <_svfiprintf_r+0x1ec>
 800718e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007192:	f04f 0901 	mov.w	r9, #1
 8007196:	4623      	mov	r3, r4
 8007198:	469a      	mov	sl, r3
 800719a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800719e:	b10a      	cbz	r2, 80071a4 <_svfiprintf_r+0x5c>
 80071a0:	2a25      	cmp	r2, #37	; 0x25
 80071a2:	d1f9      	bne.n	8007198 <_svfiprintf_r+0x50>
 80071a4:	ebba 0b04 	subs.w	fp, sl, r4
 80071a8:	d00b      	beq.n	80071c2 <_svfiprintf_r+0x7a>
 80071aa:	465b      	mov	r3, fp
 80071ac:	4622      	mov	r2, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff ff6d 	bl	8007090 <__ssputs_r>
 80071b6:	3001      	adds	r0, #1
 80071b8:	f000 80aa 	beq.w	8007310 <_svfiprintf_r+0x1c8>
 80071bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071be:	445a      	add	r2, fp
 80071c0:	9209      	str	r2, [sp, #36]	; 0x24
 80071c2:	f89a 3000 	ldrb.w	r3, [sl]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 80a2 	beq.w	8007310 <_svfiprintf_r+0x1c8>
 80071cc:	2300      	movs	r3, #0
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295
 80071d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d6:	f10a 0a01 	add.w	sl, sl, #1
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	9307      	str	r3, [sp, #28]
 80071de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e2:	931a      	str	r3, [sp, #104]	; 0x68
 80071e4:	4654      	mov	r4, sl
 80071e6:	2205      	movs	r2, #5
 80071e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ec:	4851      	ldr	r0, [pc, #324]	; (8007334 <_svfiprintf_r+0x1ec>)
 80071ee:	f7f9 f807 	bl	8000200 <memchr>
 80071f2:	9a04      	ldr	r2, [sp, #16]
 80071f4:	b9d8      	cbnz	r0, 800722e <_svfiprintf_r+0xe6>
 80071f6:	06d0      	lsls	r0, r2, #27
 80071f8:	bf44      	itt	mi
 80071fa:	2320      	movmi	r3, #32
 80071fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007200:	0711      	lsls	r1, r2, #28
 8007202:	bf44      	itt	mi
 8007204:	232b      	movmi	r3, #43	; 0x2b
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720a:	f89a 3000 	ldrb.w	r3, [sl]
 800720e:	2b2a      	cmp	r3, #42	; 0x2a
 8007210:	d015      	beq.n	800723e <_svfiprintf_r+0xf6>
 8007212:	9a07      	ldr	r2, [sp, #28]
 8007214:	4654      	mov	r4, sl
 8007216:	2000      	movs	r0, #0
 8007218:	f04f 0c0a 	mov.w	ip, #10
 800721c:	4621      	mov	r1, r4
 800721e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007222:	3b30      	subs	r3, #48	; 0x30
 8007224:	2b09      	cmp	r3, #9
 8007226:	d94e      	bls.n	80072c6 <_svfiprintf_r+0x17e>
 8007228:	b1b0      	cbz	r0, 8007258 <_svfiprintf_r+0x110>
 800722a:	9207      	str	r2, [sp, #28]
 800722c:	e014      	b.n	8007258 <_svfiprintf_r+0x110>
 800722e:	eba0 0308 	sub.w	r3, r0, r8
 8007232:	fa09 f303 	lsl.w	r3, r9, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	46a2      	mov	sl, r4
 800723c:	e7d2      	b.n	80071e4 <_svfiprintf_r+0x9c>
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	1d19      	adds	r1, r3, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	9103      	str	r1, [sp, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfbb      	ittet	lt
 800724a:	425b      	neglt	r3, r3
 800724c:	f042 0202 	orrlt.w	r2, r2, #2
 8007250:	9307      	strge	r3, [sp, #28]
 8007252:	9307      	strlt	r3, [sp, #28]
 8007254:	bfb8      	it	lt
 8007256:	9204      	strlt	r2, [sp, #16]
 8007258:	7823      	ldrb	r3, [r4, #0]
 800725a:	2b2e      	cmp	r3, #46	; 0x2e
 800725c:	d10c      	bne.n	8007278 <_svfiprintf_r+0x130>
 800725e:	7863      	ldrb	r3, [r4, #1]
 8007260:	2b2a      	cmp	r3, #42	; 0x2a
 8007262:	d135      	bne.n	80072d0 <_svfiprintf_r+0x188>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	9203      	str	r2, [sp, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	bfb8      	it	lt
 8007270:	f04f 33ff 	movlt.w	r3, #4294967295
 8007274:	3402      	adds	r4, #2
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007344 <_svfiprintf_r+0x1fc>
 800727c:	7821      	ldrb	r1, [r4, #0]
 800727e:	2203      	movs	r2, #3
 8007280:	4650      	mov	r0, sl
 8007282:	f7f8 ffbd 	bl	8000200 <memchr>
 8007286:	b140      	cbz	r0, 800729a <_svfiprintf_r+0x152>
 8007288:	2340      	movs	r3, #64	; 0x40
 800728a:	eba0 000a 	sub.w	r0, r0, sl
 800728e:	fa03 f000 	lsl.w	r0, r3, r0
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	4303      	orrs	r3, r0
 8007296:	3401      	adds	r4, #1
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729e:	4826      	ldr	r0, [pc, #152]	; (8007338 <_svfiprintf_r+0x1f0>)
 80072a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072a4:	2206      	movs	r2, #6
 80072a6:	f7f8 ffab 	bl	8000200 <memchr>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d038      	beq.n	8007320 <_svfiprintf_r+0x1d8>
 80072ae:	4b23      	ldr	r3, [pc, #140]	; (800733c <_svfiprintf_r+0x1f4>)
 80072b0:	bb1b      	cbnz	r3, 80072fa <_svfiprintf_r+0x1b2>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	3307      	adds	r3, #7
 80072b6:	f023 0307 	bic.w	r3, r3, #7
 80072ba:	3308      	adds	r3, #8
 80072bc:	9303      	str	r3, [sp, #12]
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	4433      	add	r3, r6
 80072c2:	9309      	str	r3, [sp, #36]	; 0x24
 80072c4:	e767      	b.n	8007196 <_svfiprintf_r+0x4e>
 80072c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ca:	460c      	mov	r4, r1
 80072cc:	2001      	movs	r0, #1
 80072ce:	e7a5      	b.n	800721c <_svfiprintf_r+0xd4>
 80072d0:	2300      	movs	r3, #0
 80072d2:	3401      	adds	r4, #1
 80072d4:	9305      	str	r3, [sp, #20]
 80072d6:	4619      	mov	r1, r3
 80072d8:	f04f 0c0a 	mov.w	ip, #10
 80072dc:	4620      	mov	r0, r4
 80072de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e2:	3a30      	subs	r2, #48	; 0x30
 80072e4:	2a09      	cmp	r2, #9
 80072e6:	d903      	bls.n	80072f0 <_svfiprintf_r+0x1a8>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0c5      	beq.n	8007278 <_svfiprintf_r+0x130>
 80072ec:	9105      	str	r1, [sp, #20]
 80072ee:	e7c3      	b.n	8007278 <_svfiprintf_r+0x130>
 80072f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f4:	4604      	mov	r4, r0
 80072f6:	2301      	movs	r3, #1
 80072f8:	e7f0      	b.n	80072dc <_svfiprintf_r+0x194>
 80072fa:	ab03      	add	r3, sp, #12
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	462a      	mov	r2, r5
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <_svfiprintf_r+0x1f8>)
 8007302:	a904      	add	r1, sp, #16
 8007304:	4638      	mov	r0, r7
 8007306:	f3af 8000 	nop.w
 800730a:	1c42      	adds	r2, r0, #1
 800730c:	4606      	mov	r6, r0
 800730e:	d1d6      	bne.n	80072be <_svfiprintf_r+0x176>
 8007310:	89ab      	ldrh	r3, [r5, #12]
 8007312:	065b      	lsls	r3, r3, #25
 8007314:	f53f af2c 	bmi.w	8007170 <_svfiprintf_r+0x28>
 8007318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800731a:	b01d      	add	sp, #116	; 0x74
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007320:	ab03      	add	r3, sp, #12
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	462a      	mov	r2, r5
 8007326:	4b06      	ldr	r3, [pc, #24]	; (8007340 <_svfiprintf_r+0x1f8>)
 8007328:	a904      	add	r1, sp, #16
 800732a:	4638      	mov	r0, r7
 800732c:	f000 f87a 	bl	8007424 <_printf_i>
 8007330:	e7eb      	b.n	800730a <_svfiprintf_r+0x1c2>
 8007332:	bf00      	nop
 8007334:	08007a69 	.word	0x08007a69
 8007338:	08007a73 	.word	0x08007a73
 800733c:	00000000 	.word	0x00000000
 8007340:	08007091 	.word	0x08007091
 8007344:	08007a6f 	.word	0x08007a6f

08007348 <_printf_common>:
 8007348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	4616      	mov	r6, r2
 800734e:	4699      	mov	r9, r3
 8007350:	688a      	ldr	r2, [r1, #8]
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007358:	4293      	cmp	r3, r2
 800735a:	bfb8      	it	lt
 800735c:	4613      	movlt	r3, r2
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007364:	4607      	mov	r7, r0
 8007366:	460c      	mov	r4, r1
 8007368:	b10a      	cbz	r2, 800736e <_printf_common+0x26>
 800736a:	3301      	adds	r3, #1
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	0699      	lsls	r1, r3, #26
 8007372:	bf42      	ittt	mi
 8007374:	6833      	ldrmi	r3, [r6, #0]
 8007376:	3302      	addmi	r3, #2
 8007378:	6033      	strmi	r3, [r6, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	f015 0506 	ands.w	r5, r5, #6
 8007380:	d106      	bne.n	8007390 <_printf_common+0x48>
 8007382:	f104 0a19 	add.w	sl, r4, #25
 8007386:	68e3      	ldr	r3, [r4, #12]
 8007388:	6832      	ldr	r2, [r6, #0]
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	42ab      	cmp	r3, r5
 800738e:	dc26      	bgt.n	80073de <_printf_common+0x96>
 8007390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007394:	1e13      	subs	r3, r2, #0
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	bf18      	it	ne
 800739a:	2301      	movne	r3, #1
 800739c:	0692      	lsls	r2, r2, #26
 800739e:	d42b      	bmi.n	80073f8 <_printf_common+0xb0>
 80073a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d01e      	beq.n	80073ec <_printf_common+0xa4>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	68e5      	ldr	r5, [r4, #12]
 80073b2:	6832      	ldr	r2, [r6, #0]
 80073b4:	f003 0306 	and.w	r3, r3, #6
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	bf08      	it	eq
 80073bc:	1aad      	subeq	r5, r5, r2
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	bf0c      	ite	eq
 80073c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c8:	2500      	movne	r5, #0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bfc4      	itt	gt
 80073ce:	1a9b      	subgt	r3, r3, r2
 80073d0:	18ed      	addgt	r5, r5, r3
 80073d2:	2600      	movs	r6, #0
 80073d4:	341a      	adds	r4, #26
 80073d6:	42b5      	cmp	r5, r6
 80073d8:	d11a      	bne.n	8007410 <_printf_common+0xc8>
 80073da:	2000      	movs	r0, #0
 80073dc:	e008      	b.n	80073f0 <_printf_common+0xa8>
 80073de:	2301      	movs	r3, #1
 80073e0:	4652      	mov	r2, sl
 80073e2:	4649      	mov	r1, r9
 80073e4:	4638      	mov	r0, r7
 80073e6:	47c0      	blx	r8
 80073e8:	3001      	adds	r0, #1
 80073ea:	d103      	bne.n	80073f4 <_printf_common+0xac>
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f4:	3501      	adds	r5, #1
 80073f6:	e7c6      	b.n	8007386 <_printf_common+0x3e>
 80073f8:	18e1      	adds	r1, r4, r3
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	2030      	movs	r0, #48	; 0x30
 80073fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007402:	4422      	add	r2, r4
 8007404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800740c:	3302      	adds	r3, #2
 800740e:	e7c7      	b.n	80073a0 <_printf_common+0x58>
 8007410:	2301      	movs	r3, #1
 8007412:	4622      	mov	r2, r4
 8007414:	4649      	mov	r1, r9
 8007416:	4638      	mov	r0, r7
 8007418:	47c0      	blx	r8
 800741a:	3001      	adds	r0, #1
 800741c:	d0e6      	beq.n	80073ec <_printf_common+0xa4>
 800741e:	3601      	adds	r6, #1
 8007420:	e7d9      	b.n	80073d6 <_printf_common+0x8e>
	...

08007424 <_printf_i>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	460c      	mov	r4, r1
 800742a:	4691      	mov	r9, r2
 800742c:	7e27      	ldrb	r7, [r4, #24]
 800742e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007430:	2f78      	cmp	r7, #120	; 0x78
 8007432:	4680      	mov	r8, r0
 8007434:	469a      	mov	sl, r3
 8007436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800743a:	d807      	bhi.n	800744c <_printf_i+0x28>
 800743c:	2f62      	cmp	r7, #98	; 0x62
 800743e:	d80a      	bhi.n	8007456 <_printf_i+0x32>
 8007440:	2f00      	cmp	r7, #0
 8007442:	f000 80d8 	beq.w	80075f6 <_printf_i+0x1d2>
 8007446:	2f58      	cmp	r7, #88	; 0x58
 8007448:	f000 80a3 	beq.w	8007592 <_printf_i+0x16e>
 800744c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007454:	e03a      	b.n	80074cc <_printf_i+0xa8>
 8007456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800745a:	2b15      	cmp	r3, #21
 800745c:	d8f6      	bhi.n	800744c <_printf_i+0x28>
 800745e:	a001      	add	r0, pc, #4	; (adr r0, 8007464 <_printf_i+0x40>)
 8007460:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007464:	080074bd 	.word	0x080074bd
 8007468:	080074d1 	.word	0x080074d1
 800746c:	0800744d 	.word	0x0800744d
 8007470:	0800744d 	.word	0x0800744d
 8007474:	0800744d 	.word	0x0800744d
 8007478:	0800744d 	.word	0x0800744d
 800747c:	080074d1 	.word	0x080074d1
 8007480:	0800744d 	.word	0x0800744d
 8007484:	0800744d 	.word	0x0800744d
 8007488:	0800744d 	.word	0x0800744d
 800748c:	0800744d 	.word	0x0800744d
 8007490:	080075dd 	.word	0x080075dd
 8007494:	08007501 	.word	0x08007501
 8007498:	080075bf 	.word	0x080075bf
 800749c:	0800744d 	.word	0x0800744d
 80074a0:	0800744d 	.word	0x0800744d
 80074a4:	080075ff 	.word	0x080075ff
 80074a8:	0800744d 	.word	0x0800744d
 80074ac:	08007501 	.word	0x08007501
 80074b0:	0800744d 	.word	0x0800744d
 80074b4:	0800744d 	.word	0x0800744d
 80074b8:	080075c7 	.word	0x080075c7
 80074bc:	680b      	ldr	r3, [r1, #0]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	600a      	str	r2, [r1, #0]
 80074c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0a3      	b.n	8007618 <_printf_i+0x1f4>
 80074d0:	6825      	ldr	r5, [r4, #0]
 80074d2:	6808      	ldr	r0, [r1, #0]
 80074d4:	062e      	lsls	r6, r5, #24
 80074d6:	f100 0304 	add.w	r3, r0, #4
 80074da:	d50a      	bpl.n	80074f2 <_printf_i+0xce>
 80074dc:	6805      	ldr	r5, [r0, #0]
 80074de:	600b      	str	r3, [r1, #0]
 80074e0:	2d00      	cmp	r5, #0
 80074e2:	da03      	bge.n	80074ec <_printf_i+0xc8>
 80074e4:	232d      	movs	r3, #45	; 0x2d
 80074e6:	426d      	negs	r5, r5
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ec:	485e      	ldr	r0, [pc, #376]	; (8007668 <_printf_i+0x244>)
 80074ee:	230a      	movs	r3, #10
 80074f0:	e019      	b.n	8007526 <_printf_i+0x102>
 80074f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074f6:	6805      	ldr	r5, [r0, #0]
 80074f8:	600b      	str	r3, [r1, #0]
 80074fa:	bf18      	it	ne
 80074fc:	b22d      	sxthne	r5, r5
 80074fe:	e7ef      	b.n	80074e0 <_printf_i+0xbc>
 8007500:	680b      	ldr	r3, [r1, #0]
 8007502:	6825      	ldr	r5, [r4, #0]
 8007504:	1d18      	adds	r0, r3, #4
 8007506:	6008      	str	r0, [r1, #0]
 8007508:	0628      	lsls	r0, r5, #24
 800750a:	d501      	bpl.n	8007510 <_printf_i+0xec>
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	e002      	b.n	8007516 <_printf_i+0xf2>
 8007510:	0669      	lsls	r1, r5, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0xe8>
 8007514:	881d      	ldrh	r5, [r3, #0]
 8007516:	4854      	ldr	r0, [pc, #336]	; (8007668 <_printf_i+0x244>)
 8007518:	2f6f      	cmp	r7, #111	; 0x6f
 800751a:	bf0c      	ite	eq
 800751c:	2308      	moveq	r3, #8
 800751e:	230a      	movne	r3, #10
 8007520:	2100      	movs	r1, #0
 8007522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007526:	6866      	ldr	r6, [r4, #4]
 8007528:	60a6      	str	r6, [r4, #8]
 800752a:	2e00      	cmp	r6, #0
 800752c:	bfa2      	ittt	ge
 800752e:	6821      	ldrge	r1, [r4, #0]
 8007530:	f021 0104 	bicge.w	r1, r1, #4
 8007534:	6021      	strge	r1, [r4, #0]
 8007536:	b90d      	cbnz	r5, 800753c <_printf_i+0x118>
 8007538:	2e00      	cmp	r6, #0
 800753a:	d04d      	beq.n	80075d8 <_printf_i+0x1b4>
 800753c:	4616      	mov	r6, r2
 800753e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007542:	fb03 5711 	mls	r7, r3, r1, r5
 8007546:	5dc7      	ldrb	r7, [r0, r7]
 8007548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800754c:	462f      	mov	r7, r5
 800754e:	42bb      	cmp	r3, r7
 8007550:	460d      	mov	r5, r1
 8007552:	d9f4      	bls.n	800753e <_printf_i+0x11a>
 8007554:	2b08      	cmp	r3, #8
 8007556:	d10b      	bne.n	8007570 <_printf_i+0x14c>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	07df      	lsls	r7, r3, #31
 800755c:	d508      	bpl.n	8007570 <_printf_i+0x14c>
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	6861      	ldr	r1, [r4, #4]
 8007562:	4299      	cmp	r1, r3
 8007564:	bfde      	ittt	le
 8007566:	2330      	movle	r3, #48	; 0x30
 8007568:	f806 3c01 	strble.w	r3, [r6, #-1]
 800756c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007570:	1b92      	subs	r2, r2, r6
 8007572:	6122      	str	r2, [r4, #16]
 8007574:	f8cd a000 	str.w	sl, [sp]
 8007578:	464b      	mov	r3, r9
 800757a:	aa03      	add	r2, sp, #12
 800757c:	4621      	mov	r1, r4
 800757e:	4640      	mov	r0, r8
 8007580:	f7ff fee2 	bl	8007348 <_printf_common>
 8007584:	3001      	adds	r0, #1
 8007586:	d14c      	bne.n	8007622 <_printf_i+0x1fe>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b004      	add	sp, #16
 800758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007592:	4835      	ldr	r0, [pc, #212]	; (8007668 <_printf_i+0x244>)
 8007594:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	680e      	ldr	r6, [r1, #0]
 800759c:	061f      	lsls	r7, r3, #24
 800759e:	f856 5b04 	ldr.w	r5, [r6], #4
 80075a2:	600e      	str	r6, [r1, #0]
 80075a4:	d514      	bpl.n	80075d0 <_printf_i+0x1ac>
 80075a6:	07d9      	lsls	r1, r3, #31
 80075a8:	bf44      	itt	mi
 80075aa:	f043 0320 	orrmi.w	r3, r3, #32
 80075ae:	6023      	strmi	r3, [r4, #0]
 80075b0:	b91d      	cbnz	r5, 80075ba <_printf_i+0x196>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f023 0320 	bic.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	2310      	movs	r3, #16
 80075bc:	e7b0      	b.n	8007520 <_printf_i+0xfc>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	2378      	movs	r3, #120	; 0x78
 80075c8:	4828      	ldr	r0, [pc, #160]	; (800766c <_printf_i+0x248>)
 80075ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ce:	e7e3      	b.n	8007598 <_printf_i+0x174>
 80075d0:	065e      	lsls	r6, r3, #25
 80075d2:	bf48      	it	mi
 80075d4:	b2ad      	uxthmi	r5, r5
 80075d6:	e7e6      	b.n	80075a6 <_printf_i+0x182>
 80075d8:	4616      	mov	r6, r2
 80075da:	e7bb      	b.n	8007554 <_printf_i+0x130>
 80075dc:	680b      	ldr	r3, [r1, #0]
 80075de:	6826      	ldr	r6, [r4, #0]
 80075e0:	6960      	ldr	r0, [r4, #20]
 80075e2:	1d1d      	adds	r5, r3, #4
 80075e4:	600d      	str	r5, [r1, #0]
 80075e6:	0635      	lsls	r5, r6, #24
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	d501      	bpl.n	80075f0 <_printf_i+0x1cc>
 80075ec:	6018      	str	r0, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <_printf_i+0x1d2>
 80075f0:	0671      	lsls	r1, r6, #25
 80075f2:	d5fb      	bpl.n	80075ec <_printf_i+0x1c8>
 80075f4:	8018      	strh	r0, [r3, #0]
 80075f6:	2300      	movs	r3, #0
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	4616      	mov	r6, r2
 80075fc:	e7ba      	b.n	8007574 <_printf_i+0x150>
 80075fe:	680b      	ldr	r3, [r1, #0]
 8007600:	1d1a      	adds	r2, r3, #4
 8007602:	600a      	str	r2, [r1, #0]
 8007604:	681e      	ldr	r6, [r3, #0]
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	2100      	movs	r1, #0
 800760a:	4630      	mov	r0, r6
 800760c:	f7f8 fdf8 	bl	8000200 <memchr>
 8007610:	b108      	cbz	r0, 8007616 <_printf_i+0x1f2>
 8007612:	1b80      	subs	r0, r0, r6
 8007614:	6060      	str	r0, [r4, #4]
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	2300      	movs	r3, #0
 800761c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007620:	e7a8      	b.n	8007574 <_printf_i+0x150>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	4632      	mov	r2, r6
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	47d0      	blx	sl
 800762c:	3001      	adds	r0, #1
 800762e:	d0ab      	beq.n	8007588 <_printf_i+0x164>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	079b      	lsls	r3, r3, #30
 8007634:	d413      	bmi.n	800765e <_printf_i+0x23a>
 8007636:	68e0      	ldr	r0, [r4, #12]
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	4298      	cmp	r0, r3
 800763c:	bfb8      	it	lt
 800763e:	4618      	movlt	r0, r3
 8007640:	e7a4      	b.n	800758c <_printf_i+0x168>
 8007642:	2301      	movs	r3, #1
 8007644:	4632      	mov	r2, r6
 8007646:	4649      	mov	r1, r9
 8007648:	4640      	mov	r0, r8
 800764a:	47d0      	blx	sl
 800764c:	3001      	adds	r0, #1
 800764e:	d09b      	beq.n	8007588 <_printf_i+0x164>
 8007650:	3501      	adds	r5, #1
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	9903      	ldr	r1, [sp, #12]
 8007656:	1a5b      	subs	r3, r3, r1
 8007658:	42ab      	cmp	r3, r5
 800765a:	dcf2      	bgt.n	8007642 <_printf_i+0x21e>
 800765c:	e7eb      	b.n	8007636 <_printf_i+0x212>
 800765e:	2500      	movs	r5, #0
 8007660:	f104 0619 	add.w	r6, r4, #25
 8007664:	e7f5      	b.n	8007652 <_printf_i+0x22e>
 8007666:	bf00      	nop
 8007668:	08007a7a 	.word	0x08007a7a
 800766c:	08007a8b 	.word	0x08007a8b

08007670 <memcpy>:
 8007670:	440a      	add	r2, r1
 8007672:	4291      	cmp	r1, r2
 8007674:	f100 33ff 	add.w	r3, r0, #4294967295
 8007678:	d100      	bne.n	800767c <memcpy+0xc>
 800767a:	4770      	bx	lr
 800767c:	b510      	push	{r4, lr}
 800767e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007686:	4291      	cmp	r1, r2
 8007688:	d1f9      	bne.n	800767e <memcpy+0xe>
 800768a:	bd10      	pop	{r4, pc}

0800768c <memmove>:
 800768c:	4288      	cmp	r0, r1
 800768e:	b510      	push	{r4, lr}
 8007690:	eb01 0402 	add.w	r4, r1, r2
 8007694:	d902      	bls.n	800769c <memmove+0x10>
 8007696:	4284      	cmp	r4, r0
 8007698:	4623      	mov	r3, r4
 800769a:	d807      	bhi.n	80076ac <memmove+0x20>
 800769c:	1e43      	subs	r3, r0, #1
 800769e:	42a1      	cmp	r1, r4
 80076a0:	d008      	beq.n	80076b4 <memmove+0x28>
 80076a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076aa:	e7f8      	b.n	800769e <memmove+0x12>
 80076ac:	4402      	add	r2, r0
 80076ae:	4601      	mov	r1, r0
 80076b0:	428a      	cmp	r2, r1
 80076b2:	d100      	bne.n	80076b6 <memmove+0x2a>
 80076b4:	bd10      	pop	{r4, pc}
 80076b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076be:	e7f7      	b.n	80076b0 <memmove+0x24>

080076c0 <_free_r>:
 80076c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076c2:	2900      	cmp	r1, #0
 80076c4:	d048      	beq.n	8007758 <_free_r+0x98>
 80076c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ca:	9001      	str	r0, [sp, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f1a1 0404 	sub.w	r4, r1, #4
 80076d2:	bfb8      	it	lt
 80076d4:	18e4      	addlt	r4, r4, r3
 80076d6:	f000 f8d3 	bl	8007880 <__malloc_lock>
 80076da:	4a20      	ldr	r2, [pc, #128]	; (800775c <_free_r+0x9c>)
 80076dc:	9801      	ldr	r0, [sp, #4]
 80076de:	6813      	ldr	r3, [r2, #0]
 80076e0:	4615      	mov	r5, r2
 80076e2:	b933      	cbnz	r3, 80076f2 <_free_r+0x32>
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	6014      	str	r4, [r2, #0]
 80076e8:	b003      	add	sp, #12
 80076ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076ee:	f000 b8cd 	b.w	800788c <__malloc_unlock>
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	d90b      	bls.n	800770e <_free_r+0x4e>
 80076f6:	6821      	ldr	r1, [r4, #0]
 80076f8:	1862      	adds	r2, r4, r1
 80076fa:	4293      	cmp	r3, r2
 80076fc:	bf04      	itt	eq
 80076fe:	681a      	ldreq	r2, [r3, #0]
 8007700:	685b      	ldreq	r3, [r3, #4]
 8007702:	6063      	str	r3, [r4, #4]
 8007704:	bf04      	itt	eq
 8007706:	1852      	addeq	r2, r2, r1
 8007708:	6022      	streq	r2, [r4, #0]
 800770a:	602c      	str	r4, [r5, #0]
 800770c:	e7ec      	b.n	80076e8 <_free_r+0x28>
 800770e:	461a      	mov	r2, r3
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b10b      	cbz	r3, 8007718 <_free_r+0x58>
 8007714:	42a3      	cmp	r3, r4
 8007716:	d9fa      	bls.n	800770e <_free_r+0x4e>
 8007718:	6811      	ldr	r1, [r2, #0]
 800771a:	1855      	adds	r5, r2, r1
 800771c:	42a5      	cmp	r5, r4
 800771e:	d10b      	bne.n	8007738 <_free_r+0x78>
 8007720:	6824      	ldr	r4, [r4, #0]
 8007722:	4421      	add	r1, r4
 8007724:	1854      	adds	r4, r2, r1
 8007726:	42a3      	cmp	r3, r4
 8007728:	6011      	str	r1, [r2, #0]
 800772a:	d1dd      	bne.n	80076e8 <_free_r+0x28>
 800772c:	681c      	ldr	r4, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	6053      	str	r3, [r2, #4]
 8007732:	4421      	add	r1, r4
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	e7d7      	b.n	80076e8 <_free_r+0x28>
 8007738:	d902      	bls.n	8007740 <_free_r+0x80>
 800773a:	230c      	movs	r3, #12
 800773c:	6003      	str	r3, [r0, #0]
 800773e:	e7d3      	b.n	80076e8 <_free_r+0x28>
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	1961      	adds	r1, r4, r5
 8007744:	428b      	cmp	r3, r1
 8007746:	bf04      	itt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	6063      	str	r3, [r4, #4]
 800774e:	bf04      	itt	eq
 8007750:	1949      	addeq	r1, r1, r5
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	6054      	str	r4, [r2, #4]
 8007756:	e7c7      	b.n	80076e8 <_free_r+0x28>
 8007758:	b003      	add	sp, #12
 800775a:	bd30      	pop	{r4, r5, pc}
 800775c:	20000180 	.word	0x20000180

08007760 <_malloc_r>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	1ccd      	adds	r5, r1, #3
 8007764:	f025 0503 	bic.w	r5, r5, #3
 8007768:	3508      	adds	r5, #8
 800776a:	2d0c      	cmp	r5, #12
 800776c:	bf38      	it	cc
 800776e:	250c      	movcc	r5, #12
 8007770:	2d00      	cmp	r5, #0
 8007772:	4606      	mov	r6, r0
 8007774:	db01      	blt.n	800777a <_malloc_r+0x1a>
 8007776:	42a9      	cmp	r1, r5
 8007778:	d903      	bls.n	8007782 <_malloc_r+0x22>
 800777a:	230c      	movs	r3, #12
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	2000      	movs	r0, #0
 8007780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007782:	f000 f87d 	bl	8007880 <__malloc_lock>
 8007786:	4921      	ldr	r1, [pc, #132]	; (800780c <_malloc_r+0xac>)
 8007788:	680a      	ldr	r2, [r1, #0]
 800778a:	4614      	mov	r4, r2
 800778c:	b99c      	cbnz	r4, 80077b6 <_malloc_r+0x56>
 800778e:	4f20      	ldr	r7, [pc, #128]	; (8007810 <_malloc_r+0xb0>)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	b923      	cbnz	r3, 800779e <_malloc_r+0x3e>
 8007794:	4621      	mov	r1, r4
 8007796:	4630      	mov	r0, r6
 8007798:	f000 f862 	bl	8007860 <_sbrk_r>
 800779c:	6038      	str	r0, [r7, #0]
 800779e:	4629      	mov	r1, r5
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f85d 	bl	8007860 <_sbrk_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d123      	bne.n	80077f2 <_malloc_r+0x92>
 80077aa:	230c      	movs	r3, #12
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	4630      	mov	r0, r6
 80077b0:	f000 f86c 	bl	800788c <__malloc_unlock>
 80077b4:	e7e3      	b.n	800777e <_malloc_r+0x1e>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	1b5b      	subs	r3, r3, r5
 80077ba:	d417      	bmi.n	80077ec <_malloc_r+0x8c>
 80077bc:	2b0b      	cmp	r3, #11
 80077be:	d903      	bls.n	80077c8 <_malloc_r+0x68>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	441c      	add	r4, r3
 80077c4:	6025      	str	r5, [r4, #0]
 80077c6:	e004      	b.n	80077d2 <_malloc_r+0x72>
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	42a2      	cmp	r2, r4
 80077cc:	bf0c      	ite	eq
 80077ce:	600b      	streq	r3, [r1, #0]
 80077d0:	6053      	strne	r3, [r2, #4]
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f85a 	bl	800788c <__malloc_unlock>
 80077d8:	f104 000b 	add.w	r0, r4, #11
 80077dc:	1d23      	adds	r3, r4, #4
 80077de:	f020 0007 	bic.w	r0, r0, #7
 80077e2:	1ac2      	subs	r2, r0, r3
 80077e4:	d0cc      	beq.n	8007780 <_malloc_r+0x20>
 80077e6:	1a1b      	subs	r3, r3, r0
 80077e8:	50a3      	str	r3, [r4, r2]
 80077ea:	e7c9      	b.n	8007780 <_malloc_r+0x20>
 80077ec:	4622      	mov	r2, r4
 80077ee:	6864      	ldr	r4, [r4, #4]
 80077f0:	e7cc      	b.n	800778c <_malloc_r+0x2c>
 80077f2:	1cc4      	adds	r4, r0, #3
 80077f4:	f024 0403 	bic.w	r4, r4, #3
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d0e3      	beq.n	80077c4 <_malloc_r+0x64>
 80077fc:	1a21      	subs	r1, r4, r0
 80077fe:	4630      	mov	r0, r6
 8007800:	f000 f82e 	bl	8007860 <_sbrk_r>
 8007804:	3001      	adds	r0, #1
 8007806:	d1dd      	bne.n	80077c4 <_malloc_r+0x64>
 8007808:	e7cf      	b.n	80077aa <_malloc_r+0x4a>
 800780a:	bf00      	nop
 800780c:	20000180 	.word	0x20000180
 8007810:	20000184 	.word	0x20000184

08007814 <_realloc_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	4607      	mov	r7, r0
 8007818:	4614      	mov	r4, r2
 800781a:	460e      	mov	r6, r1
 800781c:	b921      	cbnz	r1, 8007828 <_realloc_r+0x14>
 800781e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007822:	4611      	mov	r1, r2
 8007824:	f7ff bf9c 	b.w	8007760 <_malloc_r>
 8007828:	b922      	cbnz	r2, 8007834 <_realloc_r+0x20>
 800782a:	f7ff ff49 	bl	80076c0 <_free_r>
 800782e:	4625      	mov	r5, r4
 8007830:	4628      	mov	r0, r5
 8007832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007834:	f000 f830 	bl	8007898 <_malloc_usable_size_r>
 8007838:	42a0      	cmp	r0, r4
 800783a:	d20f      	bcs.n	800785c <_realloc_r+0x48>
 800783c:	4621      	mov	r1, r4
 800783e:	4638      	mov	r0, r7
 8007840:	f7ff ff8e 	bl	8007760 <_malloc_r>
 8007844:	4605      	mov	r5, r0
 8007846:	2800      	cmp	r0, #0
 8007848:	d0f2      	beq.n	8007830 <_realloc_r+0x1c>
 800784a:	4631      	mov	r1, r6
 800784c:	4622      	mov	r2, r4
 800784e:	f7ff ff0f 	bl	8007670 <memcpy>
 8007852:	4631      	mov	r1, r6
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff ff33 	bl	80076c0 <_free_r>
 800785a:	e7e9      	b.n	8007830 <_realloc_r+0x1c>
 800785c:	4635      	mov	r5, r6
 800785e:	e7e7      	b.n	8007830 <_realloc_r+0x1c>

08007860 <_sbrk_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d06      	ldr	r5, [pc, #24]	; (800787c <_sbrk_r+0x1c>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	f7f9 ffee 	bl	800184c <_sbrk>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_sbrk_r+0x1a>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_sbrk_r+0x1a>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	2000044c 	.word	0x2000044c

08007880 <__malloc_lock>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__malloc_lock+0x8>)
 8007882:	f000 b811 	b.w	80078a8 <__retarget_lock_acquire_recursive>
 8007886:	bf00      	nop
 8007888:	20000454 	.word	0x20000454

0800788c <__malloc_unlock>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__malloc_unlock+0x8>)
 800788e:	f000 b80c 	b.w	80078aa <__retarget_lock_release_recursive>
 8007892:	bf00      	nop
 8007894:	20000454 	.word	0x20000454

08007898 <_malloc_usable_size_r>:
 8007898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789c:	1f18      	subs	r0, r3, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfbc      	itt	lt
 80078a2:	580b      	ldrlt	r3, [r1, r0]
 80078a4:	18c0      	addlt	r0, r0, r3
 80078a6:	4770      	bx	lr

080078a8 <__retarget_lock_acquire_recursive>:
 80078a8:	4770      	bx	lr

080078aa <__retarget_lock_release_recursive>:
 80078aa:	4770      	bx	lr

080078ac <_init>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr

080078b8 <_fini>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr
