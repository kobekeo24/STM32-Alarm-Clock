
STM32-Alarm-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c0  080071c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071c8  080071c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080071d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000078  08007248  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08007248  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e995  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d17  00000000  00000000  0002ea3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00030758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  000311b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ced  00000000  00000000  00031b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3dc  00000000  00000000  00052885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5a28  00000000  00000000  0005fc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  001256dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800712c 	.word	0x0800712c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800712c 	.word	0x0800712c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <RTC_INIT_TIME>:

/* variables -----------------------------------------------------------------*/

/* funtions -----------------------------------------------------------------*/
void RTC_INIT_TIME(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	RTC_Time.seconds_reg = TIME_SECONDS_REG;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <RTC_INIT_TIME+0x38>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	RTC_Time.minutes_reg = TIME_MINUTES_REG;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <RTC_INIT_TIME+0x38>)
 8000584:	2201      	movs	r2, #1
 8000586:	705a      	strb	r2, [r3, #1]
	RTC_Time.hours_reg 	 = TIME_HOURS_REG;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <RTC_INIT_TIME+0x38>)
 800058a:	2202      	movs	r2, #2
 800058c:	709a      	strb	r2, [r3, #2]
	RTC_Time.day_reg 	 = TIME_DAY_REG;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <RTC_INIT_TIME+0x38>)
 8000590:	2203      	movs	r2, #3
 8000592:	70da      	strb	r2, [r3, #3]
	RTC_Time.date_reg 	 = TIME_DATE_REG;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <RTC_INIT_TIME+0x38>)
 8000596:	2204      	movs	r2, #4
 8000598:	711a      	strb	r2, [r3, #4]
	RTC_Time.month_reg 	 = TIME_MONTH_REG;
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <RTC_INIT_TIME+0x38>)
 800059c:	2205      	movs	r2, #5
 800059e:	715a      	strb	r2, [r3, #5]
	RTC_Time.year_reg 	 = TIME_YEAR_REG;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <RTC_INIT_TIME+0x38>)
 80005a2:	2206      	movs	r2, #6
 80005a4:	719a      	strb	r2, [r3, #6]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	20000168 	.word	0x20000168

080005b4 <RTC_INIT_ALARMS>:

void RTC_INIT_ALARMS(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	RTC_Alarm1.seconds_reg 	 = ALARM1_SECONDS_REG;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <RTC_INIT_ALARMS+0x38>)
 80005ba:	2207      	movs	r2, #7
 80005bc:	701a      	strb	r2, [r3, #0]
	RTC_Alarm1.minutes_reg 	 = ALARM1_MINUTES_REG;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <RTC_INIT_ALARMS+0x38>)
 80005c0:	2208      	movs	r2, #8
 80005c2:	705a      	strb	r2, [r3, #1]
	RTC_Alarm1.hours_reg 	 = ALARM1_HOURS_REG;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <RTC_INIT_ALARMS+0x38>)
 80005c6:	2209      	movs	r2, #9
 80005c8:	709a      	strb	r2, [r3, #2]
	RTC_Alarm1.day_date_reg  = ALARM1_DAY_DATE_REG;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <RTC_INIT_ALARMS+0x38>)
 80005cc:	220a      	movs	r2, #10
 80005ce:	71da      	strb	r2, [r3, #7]

	RTC_Alarm2.minutes_reg 	 = ALARM2_MINUTES_REG;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <RTC_INIT_ALARMS+0x3c>)
 80005d2:	220b      	movs	r2, #11
 80005d4:	705a      	strb	r2, [r3, #1]
	RTC_Alarm2.hours_reg 	 = ALARM2_HOURS_REG;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <RTC_INIT_ALARMS+0x3c>)
 80005d8:	220c      	movs	r2, #12
 80005da:	709a      	strb	r2, [r3, #2]
	RTC_Alarm2.day_date_reg  = ALARM2_DAY_DATE_REG;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <RTC_INIT_ALARMS+0x3c>)
 80005de:	220d      	movs	r2, #13
 80005e0:	71da      	strb	r2, [r3, #7]
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	20000208 	.word	0x20000208
 80005f0:	2000017c 	.word	0x2000017c

080005f4 <RTC_Write>:

void RTC_Write(uint8_t reg, uint8_t data)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	4613      	mov	r3, r2
 8000602:	71bb      	strb	r3, [r7, #6]
	  static uint8_t payload[2];
	  payload[0] = reg;
 8000604:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <RTC_Write+0x3c>)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	7013      	strb	r3, [r2, #0]
	  payload[1] = data;
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <RTC_Write+0x3c>)
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	7053      	strb	r3, [r2, #1]
	  HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS,payload,2,10);
 8000610:	230a      	movs	r3, #10
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2302      	movs	r3, #2
 8000616:	4a06      	ldr	r2, [pc, #24]	; (8000630 <RTC_Write+0x3c>)
 8000618:	21d0      	movs	r1, #208	; 0xd0
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <RTC_Write+0x40>)
 800061c:	f002 f86a 	bl	80026f4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(30);
 8000620:	201e      	movs	r0, #30
 8000622:	f000 fff7 	bl	8001614 <HAL_Delay>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000009c 	.word	0x2000009c
 8000634:	20000114 	.word	0x20000114

08000638 <RTC_Read>:

void RTC_Read(uint8_t* p_reg, uint8_t *p_data)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	//Ask slave to read data from register
	HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS+1,p_reg,1,10);
 8000642:	230a      	movs	r3, #10
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	21d1      	movs	r1, #209	; 0xd1
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <RTC_Read+0x38>)
 800064e:	f002 f851 	bl	80026f4 <HAL_I2C_Master_Transmit>
	//Store data
	HAL_I2C_Master_Receive(&hi2c1,RTC_ADDRESS,p_data,1,10);
 8000652:	230a      	movs	r3, #10
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	21d0      	movs	r1, #208	; 0xd0
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <RTC_Read+0x38>)
 800065e:	f002 f947 	bl	80028f0 <HAL_I2C_Master_Receive>
	HAL_Delay(30);
 8000662:	201e      	movs	r0, #30
 8000664:	f000 ffd6 	bl	8001614 <HAL_Delay>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000114 	.word	0x20000114

08000674 <RTC_Enable_Alarm_IT>:

void RTC_Enable_Alarm_IT(uint8_t alarm)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&control_reg, &control_data);
 800067e:	4914      	ldr	r1, [pc, #80]	; (80006d0 <RTC_Enable_Alarm_IT+0x5c>)
 8000680:	4814      	ldr	r0, [pc, #80]	; (80006d4 <RTC_Enable_Alarm_IT+0x60>)
 8000682:	f7ff ffd9 	bl	8000638 <RTC_Read>
	//Enable Alarm 1 interrupt
	if(alarm == 1)
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10a      	bne.n	80006a2 <RTC_Enable_Alarm_IT+0x2e>
	{
		control_data |=	 ENABLE_CONTROL_ALARM1;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <RTC_Enable_Alarm_IT+0x5c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f043 0305 	orr.w	r3, r3, #5
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <RTC_Enable_Alarm_IT+0x5c>)
 8000698:	701a      	strb	r2, [r3, #0]
		RTC_Alarm1.b_alarm_set = true;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <RTC_Enable_Alarm_IT+0x64>)
 800069c:	2201      	movs	r2, #1
 800069e:	745a      	strb	r2, [r3, #17]
 80006a0:	e009      	b.n	80006b6 <RTC_Enable_Alarm_IT+0x42>
	}
	//Enable Alarm 2 interrupt
	else
	{
		control_data |=	 ENABLE_CONTROL_ALARM2;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <RTC_Enable_Alarm_IT+0x5c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f043 0306 	orr.w	r3, r3, #6
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <RTC_Enable_Alarm_IT+0x5c>)
 80006ae:	701a      	strb	r2, [r3, #0]
		RTC_Alarm2.b_alarm_set = true;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <RTC_Enable_Alarm_IT+0x68>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	745a      	strb	r2, [r3, #17]
	}

	RTC_Write(control_reg, control_data);
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <RTC_Enable_Alarm_IT+0x60>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <RTC_Enable_Alarm_IT+0x5c>)
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff97 	bl	80005f4 <RTC_Write>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000097 	.word	0x20000097
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000208 	.word	0x20000208
 80006dc:	2000017c 	.word	0x2000017c

080006e0 <RTC_Clear_Alarm_IT>:

void RTC_Clear_Alarm_IT(uint8_t alarm)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&status_reg, &status_data);
 80006ea:	4926      	ldr	r1, [pc, #152]	; (8000784 <RTC_Clear_Alarm_IT+0xa4>)
 80006ec:	4826      	ldr	r0, [pc, #152]	; (8000788 <RTC_Clear_Alarm_IT+0xa8>)
 80006ee:	f7ff ffa3 	bl	8000638 <RTC_Read>
	RTC_Read(&control_reg, &control_data);
 80006f2:	4926      	ldr	r1, [pc, #152]	; (800078c <RTC_Clear_Alarm_IT+0xac>)
 80006f4:	4826      	ldr	r0, [pc, #152]	; (8000790 <RTC_Clear_Alarm_IT+0xb0>)
 80006f6:	f7ff ff9f 	bl	8000638 <RTC_Read>

	//Clear Alarm 1 interrupt
	if(alarm == 1)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d114      	bne.n	800072a <RTC_Clear_Alarm_IT+0x4a>
	{
		status_data &=	 CLEAR_STATUS_ALARM1;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <RTC_Clear_Alarm_IT+0xa4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f023 0301 	bic.w	r3, r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <RTC_Clear_Alarm_IT+0xa4>)
 800070c:	701a      	strb	r2, [r3, #0]
		control_data &=	 CLEAR_CONTROL_ALARM1;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <RTC_Clear_Alarm_IT+0xac>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f023 0301 	bic.w	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <RTC_Clear_Alarm_IT+0xac>)
 800071a:	701a      	strb	r2, [r3, #0]
		RTC_Alarm1.b_alarmed_triggered = false;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <RTC_Clear_Alarm_IT+0xb4>)
 800071e:	2200      	movs	r2, #0
 8000720:	741a      	strb	r2, [r3, #16]

		RTC_Alarm1.b_alarm_set = false;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <RTC_Clear_Alarm_IT+0xb4>)
 8000724:	2200      	movs	r2, #0
 8000726:	745a      	strb	r2, [r3, #17]
 8000728:	e013      	b.n	8000752 <RTC_Clear_Alarm_IT+0x72>
	}
	//Clear Alarm 2 interrupt
	else
	{
		status_data &=	 CLEAR_STATUS_ALARM2;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <RTC_Clear_Alarm_IT+0xa4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f023 0302 	bic.w	r3, r3, #2
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <RTC_Clear_Alarm_IT+0xa4>)
 8000736:	701a      	strb	r2, [r3, #0]
		control_data &=	 CLEAR_CONTROL_ALARM2;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <RTC_Clear_Alarm_IT+0xac>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f023 0302 	bic.w	r3, r3, #2
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <RTC_Clear_Alarm_IT+0xac>)
 8000744:	701a      	strb	r2, [r3, #0]
		RTC_Alarm2.b_alarmed_triggered = false;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <RTC_Clear_Alarm_IT+0xb8>)
 8000748:	2200      	movs	r2, #0
 800074a:	741a      	strb	r2, [r3, #16]

		RTC_Alarm2.b_alarm_set = false;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <RTC_Clear_Alarm_IT+0xb8>)
 800074e:	2200      	movs	r2, #0
 8000750:	745a      	strb	r2, [r3, #17]
	}

	RTC_Write(control_reg, control_data);
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <RTC_Clear_Alarm_IT+0xb0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4a0d      	ldr	r2, [pc, #52]	; (800078c <RTC_Clear_Alarm_IT+0xac>)
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff49 	bl	80005f4 <RTC_Write>
	RTC_Write(status_reg, status_data);
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <RTC_Clear_Alarm_IT+0xa8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <RTC_Clear_Alarm_IT+0xa4>)
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff41 	bl	80005f4 <RTC_Write>
	HAL_Delay(500);
 8000772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000776:	f000 ff4d 	bl	8001614 <HAL_Delay>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000098 	.word	0x20000098
 8000788:	20000001 	.word	0x20000001
 800078c:	20000097 	.word	0x20000097
 8000790:	20000000 	.word	0x20000000
 8000794:	20000208 	.word	0x20000208
 8000798:	2000017c 	.word	0x2000017c

0800079c <RTC_Display_Time>:

void RTC_Display_Time(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af02      	add	r7, sp, #8
	RTC_Read(&RTC_Time.seconds_reg, &RTC_Time.seconds);
 80007a2:	4924      	ldr	r1, [pc, #144]	; (8000834 <RTC_Display_Time+0x98>)
 80007a4:	4824      	ldr	r0, [pc, #144]	; (8000838 <RTC_Display_Time+0x9c>)
 80007a6:	f7ff ff47 	bl	8000638 <RTC_Read>
	RTC_Read(&RTC_Time.minutes_reg, &RTC_Time.minutes);
 80007aa:	4924      	ldr	r1, [pc, #144]	; (800083c <RTC_Display_Time+0xa0>)
 80007ac:	4824      	ldr	r0, [pc, #144]	; (8000840 <RTC_Display_Time+0xa4>)
 80007ae:	f7ff ff43 	bl	8000638 <RTC_Read>
	RTC_Read(&RTC_Time.hours_reg, &RTC_Time.hours);
 80007b2:	4924      	ldr	r1, [pc, #144]	; (8000844 <RTC_Display_Time+0xa8>)
 80007b4:	4824      	ldr	r0, [pc, #144]	; (8000848 <RTC_Display_Time+0xac>)
 80007b6:	f7ff ff3f 	bl	8000638 <RTC_Read>
	RTC_Read(&RTC_Time.day_reg, &RTC_Time.day);
 80007ba:	4924      	ldr	r1, [pc, #144]	; (800084c <RTC_Display_Time+0xb0>)
 80007bc:	4824      	ldr	r0, [pc, #144]	; (8000850 <RTC_Display_Time+0xb4>)
 80007be:	f7ff ff3b 	bl	8000638 <RTC_Read>

	if(last_second != RTC_Time.seconds || last_minute != RTC_Time.minutes || last_hour != RTC_Time.hours)
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <RTC_Display_Time+0x9c>)
 80007c4:	7a1a      	ldrb	r2, [r3, #8]
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <RTC_Display_Time+0xb8>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d10b      	bne.n	80007e6 <RTC_Display_Time+0x4a>
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <RTC_Display_Time+0x9c>)
 80007d0:	7a5a      	ldrb	r2, [r3, #9]
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <RTC_Display_Time+0xbc>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d105      	bne.n	80007e6 <RTC_Display_Time+0x4a>
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <RTC_Display_Time+0x9c>)
 80007dc:	7a9a      	ldrb	r2, [r3, #10]
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <RTC_Display_Time+0xc0>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d017      	beq.n	8000816 <RTC_Display_Time+0x7a>
	{
		sprintf(txData, "%x:%x:%x\n",RTC_Time.hours, RTC_Time.minutes, RTC_Time.seconds);
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <RTC_Display_Time+0x9c>)
 80007e8:	7a9b      	ldrb	r3, [r3, #10]
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <RTC_Display_Time+0x9c>)
 80007ee:	7a5b      	ldrb	r3, [r3, #9]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <RTC_Display_Time+0x9c>)
 80007f4:	7a1b      	ldrb	r3, [r3, #8]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	460b      	mov	r3, r1
 80007fa:	4919      	ldr	r1, [pc, #100]	; (8000860 <RTC_Display_Time+0xc4>)
 80007fc:	4819      	ldr	r0, [pc, #100]	; (8000864 <RTC_Display_Time+0xc8>)
 80007fe:	f006 f867 	bl	80068d0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 10);
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <RTC_Display_Time+0xc8>)
 8000804:	f7ff fce4 	bl	80001d0 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	230a      	movs	r3, #10
 800080e:	4915      	ldr	r1, [pc, #84]	; (8000864 <RTC_Display_Time+0xc8>)
 8000810:	4815      	ldr	r0, [pc, #84]	; (8000868 <RTC_Display_Time+0xcc>)
 8000812:	f004 ff26 	bl	8005662 <HAL_UART_Transmit>
	}
	last_second = RTC_Time.seconds;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <RTC_Display_Time+0x9c>)
 8000818:	7a1a      	ldrb	r2, [r3, #8]
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <RTC_Display_Time+0xb8>)
 800081c:	701a      	strb	r2, [r3, #0]
	last_minute = RTC_Time.minutes;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <RTC_Display_Time+0x9c>)
 8000820:	7a5a      	ldrb	r2, [r3, #9]
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <RTC_Display_Time+0xbc>)
 8000824:	701a      	strb	r2, [r3, #0]
	last_hour	= RTC_Time.hours;
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <RTC_Display_Time+0x9c>)
 8000828:	7a9a      	ldrb	r2, [r3, #10]
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <RTC_Display_Time+0xc0>)
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000170 	.word	0x20000170
 8000838:	20000168 	.word	0x20000168
 800083c:	20000171 	.word	0x20000171
 8000840:	20000169 	.word	0x20000169
 8000844:	20000172 	.word	0x20000172
 8000848:	2000016a 	.word	0x2000016a
 800084c:	20000173 	.word	0x20000173
 8000850:	2000016b 	.word	0x2000016b
 8000854:	20000094 	.word	0x20000094
 8000858:	20000095 	.word	0x20000095
 800085c:	20000096 	.word	0x20000096
 8000860:	08007144 	.word	0x08007144
 8000864:	200000e0 	.word	0x200000e0
 8000868:	200001c4 	.word	0x200001c4

0800086c <RTC_Set_Seconds>:

void RTC_Set_Seconds(uint8_t seconds)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	RTC_Time.seconds = seconds;
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <RTC_Set_Seconds+0x28>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	7213      	strb	r3, [r2, #8]
	RTC_Write(RTC_Time.seconds_reg, RTC_Time.seconds);
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <RTC_Set_Seconds+0x28>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <RTC_Set_Seconds+0x28>)
 8000882:	7a12      	ldrb	r2, [r2, #8]
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff feb4 	bl	80005f4 <RTC_Write>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000168 	.word	0x20000168

08000898 <RTC_Set_Time>:
	RTC_Time.hours   = hours;
	RTC_Write(RTC_Time.hours_reg, RTC_Time.hours);
}

void RTC_Set_Time(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	460b      	mov	r3, r1
 80008a4:	71bb      	strb	r3, [r7, #6]
 80008a6:	4613      	mov	r3, r2
 80008a8:	717b      	strb	r3, [r7, #5]
	RTC_Time.seconds = seconds;
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008ac:	797b      	ldrb	r3, [r7, #5]
 80008ae:	7213      	strb	r3, [r2, #8]
	RTC_Time.minutes = minutes;
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	7253      	strb	r3, [r2, #9]
	RTC_Time.hours   = hours;
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	7293      	strb	r3, [r2, #10]

	RTC_Write(RTC_Time.seconds_reg, RTC_Time.seconds);
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008c2:	7a12      	ldrb	r2, [r2, #8]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fe94 	bl	80005f4 <RTC_Write>
	RTC_Write(RTC_Time.minutes_reg, RTC_Time.minutes);
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008d2:	7a52      	ldrb	r2, [r2, #9]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe8c 	bl	80005f4 <RTC_Write>
	RTC_Write(RTC_Time.hours_reg, RTC_Time.hours);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008de:	789b      	ldrb	r3, [r3, #2]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <RTC_Set_Time+0x5c>)
 80008e2:	7a92      	ldrb	r2, [r2, #10]
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe84 	bl	80005f4 <RTC_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000168 	.word	0x20000168

080008f8 <RTC_Day_Date>:

void RTC_Day_Date(uint8_t day, uint8_t date)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	RTC_Time.day = day;
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <RTC_Day_Date+0x44>)
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	72d3      	strb	r3, [r2, #11]
	RTC_Time.date = date;
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <RTC_Day_Date+0x44>)
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	7313      	strb	r3, [r2, #12]

	RTC_Write(RTC_Time.day_reg, RTC_Time.day);
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <RTC_Day_Date+0x44>)
 8000916:	78db      	ldrb	r3, [r3, #3]
 8000918:	4a08      	ldr	r2, [pc, #32]	; (800093c <RTC_Day_Date+0x44>)
 800091a:	7ad2      	ldrb	r2, [r2, #11]
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe68 	bl	80005f4 <RTC_Write>
	RTC_Write(RTC_Time.date_reg, RTC_Time.date);
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <RTC_Day_Date+0x44>)
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <RTC_Day_Date+0x44>)
 800092a:	7b12      	ldrb	r2, [r2, #12]
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe60 	bl	80005f4 <RTC_Write>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000168 	.word	0x20000168

08000940 <RTC_Set_Alarm>:

void RTC_Set_Alarm(uint8_t alarm, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4604      	mov	r4, r0
 8000948:	4608      	mov	r0, r1
 800094a:	4611      	mov	r1, r2
 800094c:	461a      	mov	r2, r3
 800094e:	4623      	mov	r3, r4
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	4603      	mov	r3, r0
 8000954:	71bb      	strb	r3, [r7, #6]
 8000956:	460b      	mov	r3, r1
 8000958:	717b      	strb	r3, [r7, #5]
 800095a:	4613      	mov	r3, r2
 800095c:	713b      	strb	r3, [r7, #4]
	if(alarm == 0x01)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d12f      	bne.n	80009c4 <RTC_Set_Alarm+0x84>
	{
		RTC_Alarm1.seconds = seconds;
 8000964:	4a31      	ldr	r2, [pc, #196]	; (8000a2c <RTC_Set_Alarm+0xec>)
 8000966:	793b      	ldrb	r3, [r7, #4]
 8000968:	7213      	strb	r3, [r2, #8]
		RTC_Alarm1.minutes = minutes;
 800096a:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <RTC_Set_Alarm+0xec>)
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	7253      	strb	r3, [r2, #9]
		RTC_Alarm1.hours   = hours;
 8000970:	4a2e      	ldr	r2, [pc, #184]	; (8000a2c <RTC_Set_Alarm+0xec>)
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	7293      	strb	r3, [r2, #10]
		RTC_Alarm1.day_date = 0x40 + RTC_Time.day;
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <RTC_Set_Alarm+0xf0>)
 8000978:	7adb      	ldrb	r3, [r3, #11]
 800097a:	3340      	adds	r3, #64	; 0x40
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <RTC_Set_Alarm+0xec>)
 8000980:	73da      	strb	r2, [r3, #15]

		RTC_Write(RTC_Alarm1.seconds_reg, RTC_Alarm1.seconds);
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <RTC_Set_Alarm+0xec>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <RTC_Set_Alarm+0xec>)
 8000988:	7a12      	ldrb	r2, [r2, #8]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe31 	bl	80005f4 <RTC_Write>
		RTC_Write(RTC_Alarm1.minutes_reg, RTC_Alarm1.minutes);
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <RTC_Set_Alarm+0xec>)
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <RTC_Set_Alarm+0xec>)
 8000998:	7a52      	ldrb	r2, [r2, #9]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fe29 	bl	80005f4 <RTC_Write>
		RTC_Write(RTC_Alarm1.hours_reg, RTC_Alarm1.hours);
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <RTC_Set_Alarm+0xec>)
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <RTC_Set_Alarm+0xec>)
 80009a8:	7a92      	ldrb	r2, [r2, #10]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe21 	bl	80005f4 <RTC_Write>
		RTC_Write(RTC_Alarm1.day_date_reg, RTC_Alarm1.day_date);
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <RTC_Set_Alarm+0xec>)
 80009b4:	79db      	ldrb	r3, [r3, #7]
 80009b6:	4a1d      	ldr	r2, [pc, #116]	; (8000a2c <RTC_Set_Alarm+0xec>)
 80009b8:	7bd2      	ldrb	r2, [r2, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe19 	bl	80005f4 <RTC_Write>
 80009c2:	e026      	b.n	8000a12 <RTC_Set_Alarm+0xd2>
	}

	else if(alarm == 0x02)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d123      	bne.n	8000a12 <RTC_Set_Alarm+0xd2>
	{
		RTC_Alarm2.minutes = minutes;
 80009ca:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	7253      	strb	r3, [r2, #9]
		RTC_Alarm2.hours   = hours;
 80009d0:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	7293      	strb	r3, [r2, #10]
		RTC_Alarm2.day_date = 0x40 + RTC_Time.day;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <RTC_Set_Alarm+0xf0>)
 80009d8:	7adb      	ldrb	r3, [r3, #11]
 80009da:	3340      	adds	r3, #64	; 0x40
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 80009e0:	73da      	strb	r2, [r3, #15]

		RTC_Write(RTC_Alarm2.minutes_reg, RTC_Alarm2.minutes);
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 80009e8:	7a52      	ldrb	r2, [r2, #9]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fe01 	bl	80005f4 <RTC_Write>
		RTC_Write(RTC_Alarm2.hours_reg, RTC_Alarm2.hours);
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 80009f8:	7a92      	ldrb	r2, [r2, #10]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fdf9 	bl	80005f4 <RTC_Write>
		RTC_Write(RTC_Alarm2.day_date_reg, RTC_Alarm2.day_date);
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 8000a04:	79db      	ldrb	r3, [r3, #7]
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <RTC_Set_Alarm+0xf4>)
 8000a08:	7bd2      	ldrb	r2, [r2, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fdf1 	bl	80005f4 <RTC_Write>
	}
	RTC_Clear_Alarm_IT(alarm);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe63 	bl	80006e0 <RTC_Clear_Alarm_IT>
	RTC_Enable_Alarm_IT(alarm);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe29 	bl	8000674 <RTC_Enable_Alarm_IT>
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000208 	.word	0x20000208
 8000a30:	20000168 	.word	0x20000168
 8000a34:	2000017c 	.word	0x2000017c

08000a38 <RTC_Alarm_triggered>:

bool RTC_Alarm_triggered(uint8_t alarm)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	if(alarm == 0x01)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d102      	bne.n	8000a4e <RTC_Alarm_triggered+0x16>
	{
		return RTC_Alarm1.b_alarmed_triggered;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <RTC_Alarm_triggered+0x30>)
 8000a4a:	7c1b      	ldrb	r3, [r3, #16]
 8000a4c:	e005      	b.n	8000a5a <RTC_Alarm_triggered+0x22>
	}
	else if(alarm == 0x02)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d102      	bne.n	8000a5a <RTC_Alarm_triggered+0x22>
	{
		return RTC_Alarm2.b_alarmed_triggered;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <RTC_Alarm_triggered+0x34>)
 8000a56:	7c1b      	ldrb	r3, [r3, #16]
 8000a58:	e7ff      	b.n	8000a5a <RTC_Alarm_triggered+0x22>
	}
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000208 	.word	0x20000208
 8000a6c:	2000017c 	.word	0x2000017c

08000a70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a7e:	f001 fcab 	bl	80023d8 <HAL_GPIO_ReadPin>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10e      	bne.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x36>
  {
	  if(RTC_Alarm1.b_alarm_set)
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a8a:	7c5b      	ldrb	r3, [r3, #17]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_EXTI_Callback+0x28>
	  {
		  RTC_Alarm1.b_alarmed_triggered = true;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	741a      	strb	r2, [r3, #16]
 8000a96:	e006      	b.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x36>
	  }
	  else if(RTC_Alarm2.b_alarm_set)
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a9a:	7c5b      	ldrb	r3, [r3, #17]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x36>
	  {
		  RTC_Alarm2.b_alarmed_triggered = true;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	741a      	strb	r2, [r3, #16]
	  }
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000aaa:	f001 fc95 	bl	80023d8 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d102      	bne.n	8000aba <HAL_GPIO_EXTI_Callback+0x4a>
  {
	  b_button_pressed = true;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	20000208 	.word	0x20000208
 8000acc:	2000017c 	.word	0x2000017c
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	200001c2 	.word	0x200001c2

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f000 fd20 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f8a8 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 f9c4 	bl	8000e80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af8:	f000 f984 	bl	8000e04 <MX_DMA_Init>
  MX_I2C1_Init();
 8000afc:	f000 f900 	bl	8000d00 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b00:	f000 f92c 	bl	8000d5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b04:	f000 f954 	bl	8000db0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  *Ask_seconds = "Enter seconds: \n";
 8000b08:	4b44      	ldr	r3, [pc, #272]	; (8000c1c <main+0x144>)
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b44      	ldr	r3, [pc, #272]	; (8000c20 <main+0x148>)
 8000b0e:	701a      	strb	r2, [r3, #0]
  *txData = "Hello \n";
 8000b10:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <main+0x14c>)
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <main+0x150>)
 8000b16:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxData, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4944      	ldr	r1, [pc, #272]	; (8000c2c <main+0x154>)
 8000b1c:	4844      	ldr	r0, [pc, #272]	; (8000c30 <main+0x158>)
 8000b1e:	f004 fe32 	bl	8005786 <HAL_UART_Receive_DMA>

  HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000b22:	4841      	ldr	r0, [pc, #260]	; (8000c28 <main+0x150>)
 8000b24:	f7ff fb54 	bl	80001d0 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	2332      	movs	r3, #50	; 0x32
 8000b2e:	493e      	ldr	r1, [pc, #248]	; (8000c28 <main+0x150>)
 8000b30:	483f      	ldr	r0, [pc, #252]	; (8000c30 <main+0x158>)
 8000b32:	f004 fd96 	bl	8005662 <HAL_UART_Transmit>



  //Time settings
  RTC_INIT_TIME();
 8000b36:	f7ff fd1f 	bl	8000578 <RTC_INIT_TIME>
  RTC_INIT_ALARMS();
 8000b3a:	f7ff fd3b 	bl	80005b4 <RTC_INIT_ALARMS>

  //Set time
  RTC_Set_Time(0x65, 0x00, 0x00);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2065      	movs	r0, #101	; 0x65
 8000b44:	f7ff fea8 	bl	8000898 <RTC_Set_Time>
  RTC_Day_Date(0x01, 0x20);
 8000b48:	2120      	movs	r1, #32
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fed4 	bl	80008f8 <RTC_Day_Date>

  //Alarm settings
  RTC_Set_Alarm(alarm[0], 0x65, 0x00, 0x10);
 8000b50:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <main+0x15c>)
 8000b52:	7818      	ldrb	r0, [r3, #0]
 8000b54:	2310      	movs	r3, #16
 8000b56:	2200      	movs	r2, #0
 8000b58:	2165      	movs	r1, #101	; 0x65
 8000b5a:	f7ff fef1 	bl	8000940 <RTC_Set_Alarm>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Read time
	  RTC_Display_Time();
 8000b5e:	f7ff fe1d 	bl	800079c <RTC_Display_Time>

	HAL_Delay(30);
 8000b62:	201e      	movs	r0, #30
 8000b64:	f000 fd56 	bl	8001614 <HAL_Delay>

	if(b_button_pressed)
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <main+0x160>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d034      	beq.n	8000bda <main+0x102>
	{
		HAL_UART_Transmit(&huart2,(uint8_t*) Ask_seconds,strlen(Ask_seconds), 50);
 8000b70:	482b      	ldr	r0, [pc, #172]	; (8000c20 <main+0x148>)
 8000b72:	f7ff fb2d 	bl	80001d0 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	2332      	movs	r3, #50	; 0x32
 8000b7c:	4928      	ldr	r1, [pc, #160]	; (8000c20 <main+0x148>)
 8000b7e:	482c      	ldr	r0, [pc, #176]	; (8000c30 <main+0x158>)
 8000b80:	f004 fd6f 	bl	8005662 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f000 fd44 	bl	8001614 <HAL_Delay>
		b_button_pressed = false;
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <main+0x160>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
		while(!b_seconds_entered);
 8000b92:	bf00      	nop
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <main+0x164>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f083 0301 	eor.w	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f8      	bne.n	8000b94 <main+0xbc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba8:	4825      	ldr	r0, [pc, #148]	; (8000c40 <main+0x168>)
 8000baa:	f001 fc2d 	bl	8002408 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);
 8000bae:	481f      	ldr	r0, [pc, #124]	; (8000c2c <main+0x154>)
 8000bb0:	f7ff fb0e 	bl	80001d0 <strlen>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2332      	movs	r3, #50	; 0x32
 8000bba:	491c      	ldr	r1, [pc, #112]	; (8000c2c <main+0x154>)
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <main+0x158>)
 8000bbe:	f004 fd50 	bl	8005662 <HAL_UART_Transmit>
		RTC_Set_Seconds(rxData[0]);
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <main+0x154>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe50 	bl	800086c <RTC_Set_Seconds>
		HAL_Delay(100);
 8000bcc:	2064      	movs	r0, #100	; 0x64
 8000bce:	f000 fd21 	bl	8001614 <HAL_Delay>
		b_seconds_entered = false;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <main+0x164>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e005      	b.n	8000be6 <main+0x10e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be0:	4817      	ldr	r0, [pc, #92]	; (8000c40 <main+0x168>)
 8000be2:	f001 fc11 	bl	8002408 <HAL_GPIO_WritePin>
	}


	if(RTC_Alarm_triggered(alarm[0]))
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <main+0x15c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff24 	bl	8000a38 <RTC_Alarm_triggered>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0b3      	beq.n	8000b5e <main+0x86>
	{
		RTC_Display_Time();
 8000bf6:	f7ff fdd1 	bl	800079c <RTC_Display_Time>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <main+0x168>)
 8000c02:	f001 fc01 	bl	8002408 <HAL_GPIO_WritePin>
		RTC_Clear_Alarm_IT(alarm[0]);
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <main+0x15c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd68 	bl	80006e0 <RTC_Clear_Alarm_IT>
		HAL_Delay(1000);
 8000c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c14:	f000 fcfe 	bl	8001614 <HAL_Delay>
	  RTC_Display_Time();
 8000c18:	e7a1      	b.n	8000b5e <main+0x86>
 8000c1a:	bf00      	nop
 8000c1c:	08007150 	.word	0x08007150
 8000c20:	20000190 	.word	0x20000190
 8000c24:	08007164 	.word	0x08007164
 8000c28:	200000e0 	.word	0x200000e0
 8000c2c:	200000ac 	.word	0x200000ac
 8000c30:	200001c4 	.word	0x200001c4
 8000c34:	20000004 	.word	0x20000004
 8000c38:	200001c2 	.word	0x200001c2
 8000c3c:	2000018f 	.word	0x2000018f
 8000c40:	40020c00 	.word	0x40020c00

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	; 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f005 fe34 	bl	80068c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <SystemClock_Config+0xb4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a21      	ldr	r2, [pc, #132]	; (8000cf8 <SystemClock_Config+0xb4>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <SystemClock_Config+0xb4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <SystemClock_Config+0xb8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <SystemClock_Config+0xb8>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <SystemClock_Config+0xb8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 f83f 	bl	8004d38 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cc0:	f000 f99c 	bl	8000ffc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 faa2 	bl	8005228 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cea:	f000 f987 	bl	8000ffc <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	; 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_I2C1_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d3e:	f001 fb95 	bl	800246c <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 f958 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000114 	.word	0x20000114
 8000d54:	40005400 	.word	0x40005400
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_USART1_UART_Init+0x50>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d94:	f004 fc18 	bl	80055c8 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d9e:	f000 f92d 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200002dc 	.word	0x200002dc
 8000dac:	40011000 	.word	0x40011000

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_USART2_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de8:	f004 fbee 	bl	80055c8 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f000 f903 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001c4 	.word	0x200001c4
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_DMA_Init+0x78>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <MX_DMA_Init+0x78>)
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_DMA_Init+0x78>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_DMA_Init+0x78>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a13      	ldr	r2, [pc, #76]	; (8000e7c <MX_DMA_Init+0x78>)
 8000e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_DMA_Init+0x78>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	200b      	movs	r0, #11
 8000e48:	f000 fce3 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e4c:	200b      	movs	r0, #11
 8000e4e:	f000 fcfc 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	2010      	movs	r0, #16
 8000e58:	f000 fcdb 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f000 fcf4 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	203a      	movs	r0, #58	; 0x3a
 8000e68:	f000 fcd3 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e6c:	203a      	movs	r0, #58	; 0x3a
 8000e6e:	f000 fcec 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a45      	ldr	r2, [pc, #276]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a3e      	ldr	r2, [pc, #248]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a37      	ldr	r2, [pc, #220]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a30      	ldr	r2, [pc, #192]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_GPIO_Init+0x134>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	482b      	ldr	r0, [pc, #172]	; (8000fb8 <MX_GPIO_Init+0x138>)
 8000f0c:	f001 fa7c 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f16:	4829      	ldr	r0, [pc, #164]	; (8000fbc <MX_GPIO_Init+0x13c>)
 8000f18:	f001 fa76 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0x140>)
 8000f32:	f001 f8b5 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481b      	ldr	r0, [pc, #108]	; (8000fb8 <MX_GPIO_Init+0x138>)
 8000f4c:	f001 f8a8 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f50:	2320      	movs	r3, #32
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_GPIO_Init+0x138>)
 8000f68:	f001 f89a 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f6c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_GPIO_Init+0x13c>)
 8000f86:	f001 f88b 	bl	80020a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2006      	movs	r0, #6
 8000f90:	f000 fc3f 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f94:	2006      	movs	r0, #6
 8000f96:	f000 fc58 	bl	800184a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2007      	movs	r0, #7
 8000fa0:	f000 fc37 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fa4:	2007      	movs	r0, #7
 8000fa6:	f000 fc50 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

  HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <HAL_UART_RxCpltCallback+0x2c>)
 8000fce:	f7ff f8ff 	bl	80001d0 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	2332      	movs	r3, #50	; 0x32
 8000fd8:	4905      	ldr	r1, [pc, #20]	; (8000ff0 <HAL_UART_RxCpltCallback+0x2c>)
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <HAL_UART_RxCpltCallback+0x30>)
 8000fdc:	f004 fb41 	bl	8005662 <HAL_UART_Transmit>

  b_seconds_entered = true;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_UART_RxCpltCallback+0x34>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000ac 	.word	0x200000ac
 8000ff4:	200001c4 	.word	0x200001c4
 8000ff8:	2000018f 	.word	0x2000018f

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x8>
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_MspInit+0x4c>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x4c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a38      	ldr	r2, [pc, #224]	; (8001158 <HAL_I2C_MspInit+0x100>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d16a      	bne.n	8001150 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <HAL_I2C_MspInit+0x104>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a36      	ldr	r2, [pc, #216]	; (800115c <HAL_I2C_MspInit+0x104>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b34      	ldr	r3, [pc, #208]	; (800115c <HAL_I2C_MspInit+0x104>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109a:	2312      	movs	r3, #18
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a6:	2304      	movs	r3, #4
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	482b      	ldr	r0, [pc, #172]	; (8001160 <HAL_I2C_MspInit+0x108>)
 80010b2:	f000 fff5 	bl	80020a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <HAL_I2C_MspInit+0x104>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a27      	ldr	r2, [pc, #156]	; (800115c <HAL_I2C_MspInit+0x104>)
 80010c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_I2C_MspInit+0x104>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <HAL_I2C_MspInit+0x110>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 80010da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010de:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 80010ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 8001102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001106:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 8001116:	f000 fbb3 	bl	8001880 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001120:	f7ff ff6c 	bl	8000ffc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_I2C_MspInit+0x10c>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	201f      	movs	r0, #31
 8001136:	f000 fb6c 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800113a:	201f      	movs	r0, #31
 800113c:	f000 fb85 	bl	800184a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2020      	movs	r0, #32
 8001146:	f000 fb64 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800114a:	2020      	movs	r0, #32
 800114c:	f000 fb7d 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40005400 	.word	0x40005400
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400
 8001164:	20000320 	.word	0x20000320
 8001168:	40026010 	.word	0x40026010

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a69      	ldr	r2, [pc, #420]	; (8001330 <HAL_UART_MspInit+0x1c4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d164      	bne.n	8001258 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a67      	ldr	r2, [pc, #412]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a60      	ldr	r2, [pc, #384]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d8:	2307      	movs	r3, #7
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4855      	ldr	r0, [pc, #340]	; (8001338 <HAL_UART_MspInit+0x1cc>)
 80011e4:	f000 ff5c 	bl	80020a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80011e8:	4b54      	ldr	r3, [pc, #336]	; (800133c <HAL_UART_MspInit+0x1d0>)
 80011ea:	4a55      	ldr	r2, [pc, #340]	; (8001340 <HAL_UART_MspInit+0x1d4>)
 80011ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_UART_MspInit+0x1d0>)
 80011f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_UART_MspInit+0x1d0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b4f      	ldr	r3, [pc, #316]	; (800133c <HAL_UART_MspInit+0x1d0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <HAL_UART_MspInit+0x1d0>)
 8001204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <HAL_UART_MspInit+0x1d0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_UART_MspInit+0x1d0>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <HAL_UART_MspInit+0x1d0>)
 8001218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_UART_MspInit+0x1d0>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <HAL_UART_MspInit+0x1d0>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800122a:	4844      	ldr	r0, [pc, #272]	; (800133c <HAL_UART_MspInit+0x1d0>)
 800122c:	f000 fb28 	bl	8001880 <HAL_DMA_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001236:	f7ff fee1 	bl	8000ffc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a3f      	ldr	r2, [pc, #252]	; (800133c <HAL_UART_MspInit+0x1d0>)
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
 8001240:	4a3e      	ldr	r2, [pc, #248]	; (800133c <HAL_UART_MspInit+0x1d0>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2025      	movs	r0, #37	; 0x25
 800124c:	f000 fae1 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001250:	2025      	movs	r0, #37	; 0x25
 8001252:	f000 fafa 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001256:	e067      	b.n	8001328 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a39      	ldr	r2, [pc, #228]	; (8001344 <HAL_UART_MspInit+0x1d8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d162      	bne.n	8001328 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a32      	ldr	r2, [pc, #200]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a2b      	ldr	r2, [pc, #172]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_UART_MspInit+0x1c8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800129a:	230c      	movs	r3, #12
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012aa:	2307      	movs	r3, #7
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4820      	ldr	r0, [pc, #128]	; (8001338 <HAL_UART_MspInit+0x1cc>)
 80012b6:	f000 fef3 	bl	80020a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012bc:	4a23      	ldr	r2, [pc, #140]	; (800134c <HAL_UART_MspInit+0x1e0>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012fc:	4812      	ldr	r0, [pc, #72]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 80012fe:	f000 fabf 	bl	8001880 <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001308:	f7ff fe78 	bl	8000ffc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_UART_MspInit+0x1dc>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2026      	movs	r0, #38	; 0x26
 800131e:	f000 fa78 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001322:	2026      	movs	r0, #38	; 0x26
 8001324:	f000 fa91 	bl	800184a <HAL_NVIC_EnableIRQ>
}
 8001328:	bf00      	nop
 800132a:	3730      	adds	r7, #48	; 0x30
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40011000 	.word	0x40011000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000
 800133c:	2000027c 	.word	0x2000027c
 8001340:	40026440 	.word	0x40026440
 8001344:	40004400 	.word	0x40004400
 8001348:	2000021c 	.word	0x2000021c
 800134c:	40026088 	.word	0x40026088

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f91a 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f001 f847 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013b6:	2002      	movs	r0, #2
 80013b8:	f001 f840 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA1_Stream0_IRQHandler+0x10>)
 80013c6:	f000 fbf3 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000320 	.word	0x20000320

080013d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA1_Stream5_IRQHandler+0x10>)
 80013da:	f000 fbe9 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000021c 	.word	0x2000021c

080013e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <I2C1_EV_IRQHandler+0x10>)
 80013ee:	f001 fca5 	bl	8002d3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000114 	.word	0x20000114

080013fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <I2C1_ER_IRQHandler+0x10>)
 8001402:	f001 fe0c 	bl	800301e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000114 	.word	0x20000114

08001410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USART1_IRQHandler+0x10>)
 8001416:	f004 f9e7 	bl	80057e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002dc 	.word	0x200002dc

08001424 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <USART2_IRQHandler+0x10>)
 800142a:	f004 f9dd 	bl	80057e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001c4 	.word	0x200001c4

08001438 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <DMA2_Stream2_IRQHandler+0x10>)
 800143e:	f000 fbb7 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000027c 	.word	0x2000027c

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f005 f9f6 	bl	800686c <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20020000 	.word	0x20020000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	200000a0 	.word	0x200000a0
 80014b4:	20000398 	.word	0x20000398

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e2:	490e      	ldr	r1, [pc, #56]	; (800151c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f8:	4c0b      	ldr	r4, [pc, #44]	; (8001528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001506:	f7ff ffd7 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f005 f9b5 	bl	8006878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff fae3 	bl	8000ad8 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001520:	080071d0 	.word	0x080071d0
  ldr r2, =_sbss
 8001524:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001528:	20000394 	.word	0x20000394

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f94f 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fd50 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f967 	bl	8001866 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f92f 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000010 	.word	0x20000010
 80015d0:	2000000c 	.word	0x2000000c

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000010 	.word	0x20000010
 80015f8:	20000380 	.word	0x20000380

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000380 	.word	0x20000380

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000010 	.word	0x20000010

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	; (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff29 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff3e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff8e 	bl	8001750 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff31 	bl	80016c0 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff feb6 	bl	80015fc <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e099      	b.n	80019d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018bc:	e00f      	b.n	80018de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018be:	f7ff fe9d 	bl	80015fc <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d908      	bls.n	80018de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e078      	b.n	80019d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e8      	bne.n	80018be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_DMA_Init+0x158>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	2b04      	cmp	r3, #4
 8001936:	d107      	bne.n	8001948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4313      	orrs	r3, r2
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f023 0307 	bic.w	r3, r3, #7
 800195e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4313      	orrs	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	2b04      	cmp	r3, #4
 8001970:	d117      	bne.n	80019a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00e      	beq.n	80019a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fb0f 	bl	8001fa8 <DMA_CheckFifoParam>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800199e:	2301      	movs	r3, #1
 80019a0:	e016      	b.n	80019d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fac6 	bl	8001f3c <DMA_CalcBaseAndBitshift>
 80019b0:	4603      	mov	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	223f      	movs	r2, #63	; 0x3f
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	f010803f 	.word	0xf010803f

080019dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Start_IT+0x26>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e040      	b.n	8001a84 <HAL_DMA_Start_IT+0xa8>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d12f      	bne.n	8001a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fa58 	bl	8001ee0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	223f      	movs	r2, #63	; 0x3f
 8001a36:	409a      	lsls	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0216 	orr.w	r2, r2, #22
 8001a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0208 	orr.w	r2, r2, #8
 8001a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e005      	b.n	8001a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a9a:	f7ff fdaf 	bl	80015fc <HAL_GetTick>
 8001a9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d008      	beq.n	8001abe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e052      	b.n	8001b64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0216 	bic.w	r2, r2, #22
 8001acc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001adc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <HAL_DMA_Abort+0x62>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0208 	bic.w	r2, r2, #8
 8001afc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0e:	e013      	b.n	8001b38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b10:	f7ff fd74 	bl	80015fc <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d90c      	bls.n	8001b38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2220      	movs	r2, #32
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2203      	movs	r2, #3
 8001b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e015      	b.n	8001b64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e4      	bne.n	8001b10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	223f      	movs	r2, #63	; 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d004      	beq.n	8001b8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00c      	b.n	8001ba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_DMA_IRQHandler+0x258>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a92      	ldr	r2, [pc, #584]	; (8001e0c <HAL_DMA_IRQHandler+0x25c>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	2208      	movs	r2, #8
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	2208      	movs	r2, #8
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2201      	movs	r2, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2204      	movs	r2, #4
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	2204      	movs	r2, #4
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f043 0204 	orr.w	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d043      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03c      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2210      	movs	r2, #16
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d018      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d024      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
 8001cde:	e01f      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
 8001cf0:	e016      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0208 	bic.w	r2, r2, #8
 8001d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2220      	movs	r2, #32
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 808e 	beq.w	8001e4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8086 	beq.w	8001e4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2220      	movs	r2, #32
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d136      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0216 	bic.w	r2, r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_DMA_IRQHandler+0x1da>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0208 	bic.w	r2, r2, #8
 8001d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	223f      	movs	r2, #63	; 0x3f
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d07d      	beq.n	8001eba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
        }
        return;
 8001dc6:	e078      	b.n	8001eba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01c      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d030      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	e02b      	b.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d027      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
 8001e06:	e022      	b.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0210 	bic.w	r2, r2, #16
 8001e2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d032      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d022      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2205      	movs	r2, #5
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d307      	bcc.n	8001e96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f2      	bne.n	8001e7a <HAL_DMA_IRQHandler+0x2ca>
 8001e94:	e000      	b.n	8001e98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e96:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e000      	b.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001eba:	bf00      	nop
    }
  }
}
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop

08001ec4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed2:	b2db      	uxtb	r3, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001efc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d108      	bne.n	8001f20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f1e:	e007      	b.n	8001f30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3b10      	subs	r3, #16
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d909      	bls.n	8001f7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	1d1a      	adds	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f7c:	e007      	b.n	8001f8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	aaaaaaab 	.word	0xaaaaaaab
 8001fa4:	08007184 	.word	0x08007184

08001fa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d11f      	bne.n	8002002 <DMA_CheckFifoParam+0x5a>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d856      	bhi.n	8002076 <DMA_CheckFifoParam+0xce>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <DMA_CheckFifoParam+0x28>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001ff3 	.word	0x08001ff3
 8001fd8:	08001fe1 	.word	0x08001fe1
 8001fdc:	08002077 	.word	0x08002077
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d046      	beq.n	800207a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff0:	e043      	b.n	800207a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ffa:	d140      	bne.n	800207e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002000:	e03d      	b.n	800207e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200a:	d121      	bne.n	8002050 <DMA_CheckFifoParam+0xa8>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d837      	bhi.n	8002082 <DMA_CheckFifoParam+0xda>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <DMA_CheckFifoParam+0x70>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002029 	.word	0x08002029
 800201c:	0800202f 	.word	0x0800202f
 8002020:	08002029 	.word	0x08002029
 8002024:	08002041 	.word	0x08002041
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
      break;
 800202c:	e030      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d025      	beq.n	8002086 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203e:	e022      	b.n	8002086 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002048:	d11f      	bne.n	800208a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800204e:	e01c      	b.n	800208a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d903      	bls.n	800205e <DMA_CheckFifoParam+0xb6>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d003      	beq.n	8002064 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800205c:	e018      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      break;
 8002062:	e015      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
      break;
 8002074:	e00b      	b.n	800208e <DMA_CheckFifoParam+0xe6>
      break;
 8002076:	bf00      	nop
 8002078:	e00a      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800207a:	bf00      	nop
 800207c:	e008      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
 8002080:	e006      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e004      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 8002086:	bf00      	nop
 8002088:	e002      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;   
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
    }
  } 
  
  return status; 
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e16b      	b.n	8002394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 815a 	bne.w	800238e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d005      	beq.n	80020f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d130      	bne.n	8002154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d017      	beq.n	8002190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d123      	bne.n	80021e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80b4 	beq.w	800238e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b60      	ldr	r3, [pc, #384]	; (80023ac <HAL_GPIO_Init+0x30c>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a5f      	ldr	r2, [pc, #380]	; (80023ac <HAL_GPIO_Init+0x30c>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_GPIO_Init+0x30c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a5b      	ldr	r2, [pc, #364]	; (80023b0 <HAL_GPIO_Init+0x310>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x314>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_GPIO_Init+0x318>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_GPIO_Init+0x31c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x320>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x21a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_GPIO_Init+0x324>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x216>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x328>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x212>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_GPIO_Init+0x32c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x20e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_GPIO_Init+0x330>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x20a>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00e      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022aa:	2308      	movs	r3, #8
 80022ac:	e00c      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022ae:	2306      	movs	r3, #6
 80022b0:	e00a      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x310>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_GPIO_Init+0x334>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230a:	4a32      	ldr	r2, [pc, #200]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f ae90 	bls.w	80020bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021800 	.word	0x40021800
 80023d0:	40021c00 	.word	0x40021c00
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fb08 	bl	8000a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e12b      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fde0 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d0:	f003 f852 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 80024d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a81      	ldr	r2, [pc, #516]	; (80026e0 <HAL_I2C_Init+0x274>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d807      	bhi.n	80024f0 <HAL_I2C_Init+0x84>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a80      	ldr	r2, [pc, #512]	; (80026e4 <HAL_I2C_Init+0x278>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e006      	b.n	80024fe <HAL_I2C_Init+0x92>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a7d      	ldr	r2, [pc, #500]	; (80026e8 <HAL_I2C_Init+0x27c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0e7      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a78      	ldr	r2, [pc, #480]	; (80026ec <HAL_I2C_Init+0x280>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9b      	lsrs	r3, r3, #18
 8002510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a6a      	ldr	r2, [pc, #424]	; (80026e0 <HAL_I2C_Init+0x274>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d802      	bhi.n	8002540 <HAL_I2C_Init+0xd4>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	e009      	b.n	8002554 <HAL_I2C_Init+0xe8>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_I2C_Init+0x284>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	3301      	adds	r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	430b      	orrs	r3, r1
 800255a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	495c      	ldr	r1, [pc, #368]	; (80026e0 <HAL_I2C_Init+0x274>)
 8002570:	428b      	cmp	r3, r1
 8002572:	d819      	bhi.n	80025a8 <HAL_I2C_Init+0x13c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e59      	subs	r1, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002588:	400b      	ands	r3, r1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_I2C_Init+0x138>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e59      	subs	r1, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fbb1 f3f3 	udiv	r3, r1, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a2:	e051      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a4:	2304      	movs	r3, #4
 80025a6:	e04f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <HAL_I2C_Init+0x168>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e012      	b.n	80025fa <HAL_I2C_Init+0x18e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Init+0x196>
 80025fe:	2301      	movs	r3, #1
 8002600:	e022      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10e      	bne.n	8002628 <HAL_I2C_Init+0x1bc>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e58      	subs	r0, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	440b      	add	r3, r1
 8002618:	fbb0 f3f3 	udiv	r3, r0, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002626:	e00f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	0099      	lsls	r1, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	6809      	ldr	r1, [r1, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6911      	ldr	r1, [r2, #16]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	000186a0 	.word	0x000186a0
 80026e4:	001e847f 	.word	0x001e847f
 80026e8:	003d08ff 	.word	0x003d08ff
 80026ec:	431bde83 	.word	0x431bde83
 80026f0:	10624dd3 	.word	0x10624dd3

080026f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	4613      	mov	r3, r2
 8002706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7fe ff78 	bl	80015fc <HAL_GetTick>
 800270c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 80e0 	bne.w	80028dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	4970      	ldr	r1, [pc, #448]	; (80028e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f002 f8dc 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	e0d3      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x50>
 8002740:	2302      	movs	r3, #2
 8002742:	e0cc      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d007      	beq.n	800276a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2221      	movs	r2, #33	; 0x21
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2210      	movs	r2, #16
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	893a      	ldrh	r2, [r7, #8]
 800279a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a50      	ldr	r2, [pc, #320]	; (80028ec <HAL_I2C_Master_Transmit+0x1f8>)
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	6a3a      	ldr	r2, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f001 fe9e 	bl	80044f4 <I2C_MasterRequestWrite>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e08d      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027d8:	e066      	b.n	80028a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	6a39      	ldr	r1, [r7, #32]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f002 f956 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00d      	beq.n	8002806 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d107      	bne.n	8002802 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002800:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06b      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b04      	cmp	r3, #4
 8002842:	d11b      	bne.n	800287c <HAL_I2C_Master_Transmit+0x188>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	2b00      	cmp	r3, #0
 800284a:	d017      	beq.n	800287c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	6a39      	ldr	r1, [r7, #32]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f002 f946 	bl	8004b12 <I2C_WaitOnBTFFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b04      	cmp	r3, #4
 8002892:	d107      	bne.n	80028a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e01a      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d194      	bne.n	80027da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	00100002 	.word	0x00100002
 80028ec:	ffff0000 	.word	0xffff0000

080028f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	460b      	mov	r3, r1
 80028fe:	817b      	strh	r3, [r7, #10]
 8002900:	4613      	mov	r3, r2
 8002902:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7fe fe7a 	bl	80015fc <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	f040 820b 	bne.w	8002d2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2319      	movs	r3, #25
 800291e:	2201      	movs	r2, #1
 8002920:	497c      	ldr	r1, [pc, #496]	; (8002b14 <HAL_I2C_Master_Receive+0x224>)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f001 ffde 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	e1fe      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_I2C_Master_Receive+0x50>
 800293c:	2302      	movs	r3, #2
 800293e:	e1f7      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d007      	beq.n	8002966 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002974:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2222      	movs	r2, #34	; 0x22
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2210      	movs	r2, #16
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	893a      	ldrh	r2, [r7, #8]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_I2C_Master_Receive+0x228>)
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029a8:	8979      	ldrh	r1, [r7, #10]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f001 fe22 	bl	80045f8 <I2C_MasterRequestRead>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e1b8      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e18c      	b.n	8002d08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d11b      	bne.n	8002a2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e16c      	b.n	8002d08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d11b      	bne.n	8002a6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	e14c      	b.n	8002d08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a94:	e138      	b.n	8002d08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	f200 80f1 	bhi.w	8002c82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d123      	bne.n	8002af0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f002 f8a3 	bl	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e139      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aee:	e10b      	b.n	8002d08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d14e      	bne.n	8002b96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <HAL_I2C_Master_Receive+0x22c>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f001 feee 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e10e      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
 8002b12:	bf00      	nop
 8002b14:	00100002 	.word	0x00100002
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b94:	e0b8      	b.n	8002d08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4966      	ldr	r1, [pc, #408]	; (8002d38 <HAL_I2C_Master_Receive+0x448>)
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f001 fe9f 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0bf      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	494f      	ldr	r1, [pc, #316]	; (8002d38 <HAL_I2C_Master_Receive+0x448>)
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f001 fe71 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e091      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c80:	e042      	b.n	8002d08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f001 ffb6 	bl	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e04c      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d118      	bne.n	8002d08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f aec2 	bne.w	8002a96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	00010004 	.word	0x00010004

08002d3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d003      	beq.n	8002d74 <HAL_I2C_EV_IRQHandler+0x38>
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	f040 80c1 	bne.w	8002ef6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10d      	bne.n	8002daa <HAL_I2C_EV_IRQHandler+0x6e>
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d94:	d003      	beq.n	8002d9e <HAL_I2C_EV_IRQHandler+0x62>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_EV_IRQHandler+0x66>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_I2C_EV_IRQHandler+0x68>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f000 8132 	beq.w	800300e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00c      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0x92>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	0a5b      	lsrs	r3, r3, #9
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f001 ff9e 	bl	8004d02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fd79 	bl	80038be <I2C_Master_SB>
 8002dcc:	e092      	b.n	8002ef4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0xb2>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	0a5b      	lsrs	r3, r3, #9
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fdef 	bl	80039ca <I2C_Master_ADD10>
 8002dec:	e082      	b.n	8002ef4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_I2C_EV_IRQHandler+0xd2>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	0a5b      	lsrs	r3, r3, #9
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fe09 	bl	8003a1e <I2C_Master_ADDR>
 8002e0c:	e072      	b.n	8002ef4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03b      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e28:	f000 80f3 	beq.w	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	09db      	lsrs	r3, r3, #7
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00f      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f9f3 	bl	800323c <I2C_MasterTransmit_TXE>
 8002e56:	e04d      	b.n	8002ef4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80d6 	beq.w	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	0a5b      	lsrs	r3, r3, #9
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80cf 	beq.w	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e74:	7bbb      	ldrb	r3, [r7, #14]
 8002e76:	2b21      	cmp	r3, #33	; 0x21
 8002e78:	d103      	bne.n	8002e82 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa7a 	bl	8003374 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e80:	e0c7      	b.n	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	f040 80c4 	bne.w	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fae8 	bl	8003460 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e90:	e0bf      	b.n	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea0:	f000 80b7 	beq.w	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00f      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x194>
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	0a9b      	lsrs	r3, r3, #10
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x194>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fb5d 	bl	8003588 <I2C_MasterReceive_RXNE>
 8002ece:	e011      	b.n	8002ef4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 809a 	beq.w	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	0a5b      	lsrs	r3, r3, #9
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8093 	beq.w	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fbfc 	bl	80036ea <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ef2:	e08e      	b.n	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ef4:	e08d      	b.n	8003012 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e007      	b.n	8002f18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x20e>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	0a5b      	lsrs	r3, r3, #9
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00c      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 ffba 	bl	8003ebc <I2C_Slave_ADDR>
 8002f48:	e066      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_I2C_EV_IRQHandler+0x22e>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	0a5b      	lsrs	r3, r3, #9
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fff4 	bl	8003f50 <I2C_Slave_STOPF>
 8002f68:	e056      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f6a:	7bbb      	ldrb	r3, [r7, #14]
 8002f6c:	2b21      	cmp	r3, #33	; 0x21
 8002f6e:	d002      	beq.n	8002f76 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f70:	7bbb      	ldrb	r3, [r7, #14]
 8002f72:	2b29      	cmp	r3, #41	; 0x29
 8002f74:	d125      	bne.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	09db      	lsrs	r3, r3, #7
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00f      	beq.n	8002fa2 <HAL_I2C_EV_IRQHandler+0x266>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	0a9b      	lsrs	r3, r3, #10
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_I2C_EV_IRQHandler+0x266>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fed0 	bl	8003d40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa0:	e039      	b.n	8003016 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d033      	beq.n	8003016 <HAL_I2C_EV_IRQHandler+0x2da>
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	0a5b      	lsrs	r3, r3, #9
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d02d      	beq.n	8003016 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fefd 	bl	8003dba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fc0:	e029      	b.n	8003016 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00f      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	0a9b      	lsrs	r3, r3, #10
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 ff08 	bl	8003dfc <I2C_SlaveReceive_RXNE>
 8002fec:	e014      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00e      	beq.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	0a5b      	lsrs	r3, r3, #9
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 ff36 	bl	8003e78 <I2C_SlaveReceive_BTF>
 800300c:	e004      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003016:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b08a      	sub	sp, #40	; 0x28
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003040:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <HAL_I2C_ER_IRQHandler+0x4e>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800306a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	0a5b      	lsrs	r3, r3, #9
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <HAL_I2C_ER_IRQHandler+0x78>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	f043 0302 	orr.w	r3, r3, #2
 800308a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003094:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	0a9b      	lsrs	r3, r3, #10
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d03f      	beq.n	8003122 <HAL_I2C_ER_IRQHandler+0x104>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d039      	beq.n	8003122 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80030ae:	7efb      	ldrb	r3, [r7, #27]
 80030b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80030c8:	7ebb      	ldrb	r3, [r7, #26]
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d112      	bne.n	80030f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10f      	bne.n	80030f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b21      	cmp	r3, #33	; 0x21
 80030d8:	d008      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b29      	cmp	r3, #41	; 0x29
 80030de:	d005      	beq.n	80030ec <HAL_I2C_ER_IRQHandler+0xce>
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	2b28      	cmp	r3, #40	; 0x28
 80030e4:	d106      	bne.n	80030f4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b21      	cmp	r3, #33	; 0x21
 80030ea:	d103      	bne.n	80030f4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f001 f85f 	bl	80041b0 <I2C_Slave_AF>
 80030f2:	e016      	b.n	8003122 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003106:	7efb      	ldrb	r3, [r7, #27]
 8003108:	2b10      	cmp	r3, #16
 800310a:	d002      	beq.n	8003112 <HAL_I2C_ER_IRQHandler+0xf4>
 800310c:	7efb      	ldrb	r3, [r7, #27]
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d107      	bne.n	8003122 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	0adb      	lsrs	r3, r3, #11
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00e      	beq.n	800314c <HAL_I2C_ER_IRQHandler+0x12e>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	f043 0308 	orr.w	r3, r3, #8
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800314a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f001 f896 	bl	8004290 <I2C_ITError>
  }
}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
 80031c8:	4613      	mov	r3, r2
 80031ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b00      	cmp	r3, #0
 8003260:	d150      	bne.n	8003304 <I2C_MasterTransmit_TXE+0xc8>
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b21      	cmp	r3, #33	; 0x21
 8003266:	d14d      	bne.n	8003304 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d01d      	beq.n	80032aa <I2C_MasterTransmit_TXE+0x6e>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b20      	cmp	r3, #32
 8003272:	d01a      	beq.n	80032aa <I2C_MasterTransmit_TXE+0x6e>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800327a:	d016      	beq.n	80032aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800328a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2211      	movs	r2, #17
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff62 	bl	800316c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032a8:	e060      	b.n	800336c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d107      	bne.n	80032f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff7d 	bl	80031ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032f2:	e03b      	b.n	800336c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff35 	bl	800316c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003302:	e033      	b.n	800336c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b21      	cmp	r3, #33	; 0x21
 8003308:	d005      	beq.n	8003316 <I2C_MasterTransmit_TXE+0xda>
 800330a:	7bbb      	ldrb	r3, [r7, #14]
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d12d      	bne.n	800336c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b22      	cmp	r3, #34	; 0x22
 8003314:	d12a      	bne.n	800336c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d108      	bne.n	8003332 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003330:	e01c      	b.n	800336c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d103      	bne.n	8003346 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f88e 	bl	8003460 <I2C_MemoryTransmit_TXE_BTF>
}
 8003344:	e012      	b.n	800336c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800336a:	e7ff      	b.n	800336c <I2C_MasterTransmit_TXE+0x130>
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b21      	cmp	r3, #33	; 0x21
 800338c:	d164      	bne.n	8003458 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033bc:	e04c      	b.n	8003458 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d01d      	beq.n	8003400 <I2C_MasterTransmit_BTF+0x8c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d01a      	beq.n	8003400 <I2C_MasterTransmit_BTF+0x8c>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d0:	d016      	beq.n	8003400 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2211      	movs	r2, #17
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff feb7 	bl	800316c <HAL_I2C_MasterTxCpltCallback>
}
 80033fe:	e02b      	b.n	8003458 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d107      	bne.n	800344a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fed2 	bl	80031ec <HAL_I2C_MemTxCpltCallback>
}
 8003448:	e006      	b.n	8003458 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fe8a 	bl	800316c <HAL_I2C_MasterTxCpltCallback>
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11d      	bne.n	80034b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10b      	bne.n	8003498 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	b2da      	uxtb	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003496:	e073      	b.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	b29b      	uxth	r3, r3
 800349e:	121b      	asrs	r3, r3, #8
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034b2:	e065      	b.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10b      	bne.n	80034d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034d2:	e055      	b.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d151      	bne.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b22      	cmp	r3, #34	; 0x22
 80034e0:	d10d      	bne.n	80034fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034fc:	e040      	b.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d015      	beq.n	8003534 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b21      	cmp	r3, #33	; 0x21
 800350c:	d112      	bne.n	8003534 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003532:	e025      	b.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d120      	bne.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b21      	cmp	r3, #33	; 0x21
 8003542:	d11d      	bne.n	8003580 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003552:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fe36 	bl	80031ec <HAL_I2C_MemTxCpltCallback>
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b22      	cmp	r3, #34	; 0x22
 800359a:	f040 80a2 	bne.w	80036e2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d921      	bls.n	80035f0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	f040 8082 	bne.w	80036e2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ec:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80035ee:	e078      	b.n	80036e2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d074      	beq.n	80036e2 <I2C_MasterReceive_RXNE+0x15a>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d002      	beq.n	8003604 <I2C_MasterReceive_RXNE+0x7c>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d16e      	bne.n	80036e2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f001 fac5 	bl	8004b94 <I2C_WaitOnSTOPRequestThroughIT>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d142      	bne.n	8003696 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800362e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d10a      	bne.n	8003680 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fdc1 	bl	8003200 <HAL_I2C_MemRxCpltCallback>
}
 800367e:	e030      	b.n	80036e2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2212      	movs	r2, #18
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fd76 	bl	8003180 <HAL_I2C_MasterRxCpltCallback>
}
 8003694:	e025      	b.n	80036e2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fd99 	bl	8003214 <HAL_I2C_ErrorCallback>
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d11b      	bne.n	800373a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003710:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003738:	e0bd      	b.n	80038b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b03      	cmp	r3, #3
 8003742:	d129      	bne.n	8003798 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003752:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b04      	cmp	r3, #4
 8003758:	d00a      	beq.n	8003770 <I2C_MasterReceive_BTF+0x86>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d007      	beq.n	8003770 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003796:	e08e      	b.n	80038b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d176      	bne.n	8003890 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d002      	beq.n	80037ae <I2C_MasterReceive_BTF+0xc4>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d108      	bne.n	80037c0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e019      	b.n	80037f4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d002      	beq.n	80037cc <I2C_MasterReceive_BTF+0xe2>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d108      	bne.n	80037de <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e00a      	b.n	80037f4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d007      	beq.n	80037f4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800384e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d10a      	bne.n	800387a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fcc4 	bl	8003200 <HAL_I2C_MemRxCpltCallback>
}
 8003878:	e01d      	b.n	80038b6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2212      	movs	r2, #18
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fc79 	bl	8003180 <HAL_I2C_MasterRxCpltCallback>
}
 800388e:	e012      	b.n	80038b6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d117      	bne.n	8003902 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038ec:	e067      	b.n	80039be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]
}
 8003900:	e05d      	b.n	80039be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800390a:	d133      	bne.n	8003974 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b21      	cmp	r3, #33	; 0x21
 8003916:	d109      	bne.n	800392c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003928:	611a      	str	r2, [r3, #16]
 800392a:	e008      	b.n	800393e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	b2da      	uxtb	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <I2C_Master_SB+0x92>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	2b00      	cmp	r3, #0
 8003956:	d032      	beq.n	80039be <I2C_Master_SB+0x100>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02d      	beq.n	80039be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003970:	605a      	str	r2, [r3, #4]
}
 8003972:	e024      	b.n	80039be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10e      	bne.n	800399a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	b29b      	uxth	r3, r3
 8003982:	11db      	asrs	r3, r3, #7
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f003 0306 	and.w	r3, r3, #6
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f063 030f 	orn	r3, r3, #15
 8003990:	b2da      	uxtb	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]
}
 8003998:	e011      	b.n	80039be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d10d      	bne.n	80039be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	11db      	asrs	r3, r3, #7
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 0306 	and.w	r3, r3, #6
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f063 030e 	orn	r3, r3, #14
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <I2C_Master_ADD10+0x26>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00c      	beq.n	8003a12 <I2C_Master_ADD10+0x48>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a10:	605a      	str	r2, [r3, #4]
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b091      	sub	sp, #68	; 0x44
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b22      	cmp	r3, #34	; 0x22
 8003a46:	f040 8169 	bne.w	8003d1c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <I2C_Master_ADDR+0x54>
 8003a52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d10b      	bne.n	8003a72 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	e160      	b.n	8003d34 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <I2C_Master_ADDR+0x98>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a82:	d118      	bne.n	8003ab6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ab4:	e13e      	b.n	8003d34 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d113      	bne.n	8003ae8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e115      	b.n	8003d14 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	f040 808a 	bne.w	8003c08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003afa:	d137      	bne.n	8003b6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1a:	d113      	bne.n	8003b44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	e0e7      	b.n	8003d14 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e0d3      	b.n	8003d14 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d02e      	beq.n	8003bd0 <I2C_Master_ADDR+0x1b2>
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d02b      	beq.n	8003bd0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	2b12      	cmp	r3, #18
 8003b7c:	d102      	bne.n	8003b84 <I2C_Master_ADDR+0x166>
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d125      	bne.n	8003bd0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d00e      	beq.n	8003ba8 <I2C_Master_ADDR+0x18a>
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d00b      	beq.n	8003ba8 <I2C_Master_ADDR+0x18a>
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d008      	beq.n	8003ba8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e007      	b.n	8003bb8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bb6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	e0a1      	b.n	8003d14 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bde:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e085      	b.n	8003d14 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d14d      	bne.n	8003cae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d016      	beq.n	8003c46 <I2C_Master_ADDR+0x228>
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d013      	beq.n	8003c46 <I2C_Master_ADDR+0x228>
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d010      	beq.n	8003c46 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c32:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e007      	b.n	8003c56 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c54:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c64:	d117      	bne.n	8003c96 <I2C_Master_ADDR+0x278>
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c6c:	d00b      	beq.n	8003c86 <I2C_Master_ADDR+0x268>
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d008      	beq.n	8003c86 <I2C_Master_ADDR+0x268>
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d005      	beq.n	8003c86 <I2C_Master_ADDR+0x268>
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d002      	beq.n	8003c86 <I2C_Master_ADDR+0x268>
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d107      	bne.n	8003c96 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	e032      	b.n	8003d14 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ccc:	d117      	bne.n	8003cfe <I2C_Master_ADDR+0x2e0>
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd4:	d00b      	beq.n	8003cee <I2C_Master_ADDR+0x2d0>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d008      	beq.n	8003cee <I2C_Master_ADDR+0x2d0>
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d005      	beq.n	8003cee <I2C_Master_ADDR+0x2d0>
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d002      	beq.n	8003cee <I2C_Master_ADDR+0x2d0>
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d107      	bne.n	8003cfe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d1a:	e00b      	b.n	8003d34 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	e7ff      	b.n	8003d34 <I2C_Master_ADDR+0x316>
 8003d34:	bf00      	nop
 8003d36:	3744      	adds	r7, #68	; 0x44
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02b      	beq.n	8003db2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d114      	bne.n	8003db2 <I2C_SlaveTransmit_TXE+0x72>
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b29      	cmp	r3, #41	; 0x29
 8003d8c:	d111      	bne.n	8003db2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2221      	movs	r2, #33	; 0x21
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2228      	movs	r2, #40	; 0x28
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff f9f1 	bl	8003194 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d011      	beq.n	8003df0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02c      	beq.n	8003e70 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d114      	bne.n	8003e70 <I2C_SlaveReceive_RXNE+0x74>
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b2a      	cmp	r3, #42	; 0x2a
 8003e4a:	d111      	bne.n	8003e70 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2222      	movs	r2, #34	; 0x22
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2228      	movs	r2, #40	; 0x28
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff f99c 	bl	80031a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ed6:	2b28      	cmp	r3, #40	; 0x28
 8003ed8:	d127      	bne.n	8003f2a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	09db      	lsrs	r3, r3, #7
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	81bb      	strh	r3, [r7, #12]
 8003f0c:	e002      	b.n	8003f14 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f1c:	89ba      	ldrh	r2, [r7, #12]
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff f94a 	bl	80031bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f28:	e00e      	b.n	8003f48 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d172      	bne.n	8004094 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b22      	cmp	r3, #34	; 0x22
 8003fb2:	d002      	beq.n	8003fba <I2C_Slave_STOPF+0x6a>
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d135      	bne.n	8004026 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd ff66 	bl	8001ec4 <HAL_DMA_GetState>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d049      	beq.n	8004092 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	4a69      	ldr	r2, [pc, #420]	; (80041a8 <I2C_Slave_STOPF+0x258>)
 8004004:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd fdae 	bl	8001b6c <HAL_DMA_Abort_IT>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03d      	beq.n	8004092 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004020:	4610      	mov	r0, r2
 8004022:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004024:	e035      	b.n	8004092 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004058:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	4618      	mov	r0, r3
 8004060:	f7fd ff30 	bl	8001ec4 <HAL_DMA_GetState>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d014      	beq.n	8004094 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	4a4e      	ldr	r2, [pc, #312]	; (80041a8 <I2C_Slave_STOPF+0x258>)
 8004070:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fd78 	bl	8001b6c <HAL_DMA_Abort_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800408c:	4610      	mov	r0, r2
 800408e:	4798      	blx	r3
 8004090:	e000      	b.n	8004094 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004092:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d03e      	beq.n	800411c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d112      	bne.n	80040d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d112      	bne.n	8004106 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f043 0204 	orr.w	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f8b3 	bl	8004290 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800412a:	e039      	b.n	80041a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b2a      	cmp	r3, #42	; 0x2a
 8004130:	d109      	bne.n	8004146 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2228      	movs	r2, #40	; 0x28
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff f831 	bl	80031a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b28      	cmp	r3, #40	; 0x28
 8004150:	d111      	bne.n	8004176 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <I2C_Slave_STOPF+0x25c>)
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff f832 	bl	80031d8 <HAL_I2C_ListenCpltCallback>
}
 8004174:	e014      	b.n	80041a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	2b22      	cmp	r3, #34	; 0x22
 800417c:	d002      	beq.n	8004184 <I2C_Slave_STOPF+0x234>
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b22      	cmp	r3, #34	; 0x22
 8004182:	d10d      	bne.n	80041a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff f804 	bl	80031a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	08004795 	.word	0x08004795
 80041ac:	ffff0000 	.word	0xffff0000

080041b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d002      	beq.n	80041d2 <I2C_Slave_AF+0x22>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d129      	bne.n	8004226 <I2C_Slave_AF+0x76>
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b28      	cmp	r3, #40	; 0x28
 80041d6:	d126      	bne.n	8004226 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a2c      	ldr	r2, [pc, #176]	; (800428c <I2C_Slave_AF+0xdc>)
 80041dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004206:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fe ffda 	bl	80031d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004224:	e02e      	b.n	8004284 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b21      	cmp	r3, #33	; 0x21
 800422a:	d126      	bne.n	800427a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <I2C_Slave_AF+0xdc>)
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2221      	movs	r2, #33	; 0x21
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004256:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004260:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004270:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fe ff8e 	bl	8003194 <HAL_I2C_SlaveTxCpltCallback>
}
 8004278:	e004      	b.n	8004284 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004282:	615a      	str	r2, [r3, #20]
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	ffff0000 	.word	0xffff0000

08004290 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042a8:	7bbb      	ldrb	r3, [r7, #14]
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d002      	beq.n	80042b4 <I2C_ITError+0x24>
 80042ae:	7bbb      	ldrb	r3, [r7, #14]
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d10a      	bne.n	80042ca <I2C_ITError+0x3a>
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b22      	cmp	r3, #34	; 0x22
 80042b8:	d107      	bne.n	80042ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042d0:	2b28      	cmp	r3, #40	; 0x28
 80042d2:	d107      	bne.n	80042e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2228      	movs	r2, #40	; 0x28
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042e2:	e015      	b.n	8004310 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f2:	d00a      	beq.n	800430a <I2C_ITError+0x7a>
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b60      	cmp	r3, #96	; 0x60
 80042f8:	d007      	beq.n	800430a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431e:	d162      	bne.n	80043e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d020      	beq.n	8004380 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	4a6a      	ldr	r2, [pc, #424]	; (80044ec <I2C_ITError+0x25c>)
 8004344:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	4618      	mov	r0, r3
 800434c:	f7fd fc0e 	bl	8001b6c <HAL_DMA_Abort_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8089 	beq.w	800446a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800437a:	4610      	mov	r0, r2
 800437c:	4798      	blx	r3
 800437e:	e074      	b.n	800446a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	4a59      	ldr	r2, [pc, #356]	; (80044ec <I2C_ITError+0x25c>)
 8004386:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	4618      	mov	r0, r3
 800438e:	f7fd fbed 	bl	8001b6c <HAL_DMA_Abort_IT>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d068      	beq.n	800446a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d10b      	bne.n	80043be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e0:	4610      	mov	r0, r2
 80043e2:	4798      	blx	r3
 80043e4:	e041      	b.n	800446a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b60      	cmp	r3, #96	; 0x60
 80043f0:	d125      	bne.n	800443e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d10b      	bne.n	8004426 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fe fef6 	bl	8003228 <HAL_I2C_AbortCpltCallback>
 800443c:	e015      	b.n	800446a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d10b      	bne.n	8004464 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fe fed5 	bl	8003214 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10e      	bne.n	8004498 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d113      	bne.n	80044e4 <I2C_ITError+0x254>
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b28      	cmp	r3, #40	; 0x28
 80044c0:	d110      	bne.n	80044e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <I2C_ITError+0x260>)
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fe fe7a 	bl	80031d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	08004795 	.word	0x08004795
 80044f0:	ffff0000 	.word	0xffff0000

080044f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	460b      	mov	r3, r1
 8004502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d006      	beq.n	800451e <I2C_MasterRequestWrite+0x2a>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d003      	beq.n	800451e <I2C_MasterRequestWrite+0x2a>
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451c:	d108      	bne.n	8004530 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e00b      	b.n	8004548 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	2b12      	cmp	r3, #18
 8004536:	d107      	bne.n	8004548 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004546:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f9c5 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00d      	beq.n	800457c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456e:	d103      	bne.n	8004578 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e035      	b.n	80045e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004584:	d108      	bne.n	8004598 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004586:	897b      	ldrh	r3, [r7, #10]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004594:	611a      	str	r2, [r3, #16]
 8004596:	e01b      	b.n	80045d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004598:	897b      	ldrh	r3, [r7, #10]
 800459a:	11db      	asrs	r3, r3, #7
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0306 	and.w	r3, r3, #6
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f063 030f 	orn	r3, r3, #15
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <I2C_MasterRequestWrite+0xfc>)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9eb 	bl	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e010      	b.n	80045e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4907      	ldr	r1, [pc, #28]	; (80045f4 <I2C_MasterRequestWrite+0x100>)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f9db 	bl	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	00010008 	.word	0x00010008
 80045f4:	00010002 	.word	0x00010002

080045f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	460b      	mov	r3, r1
 8004606:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800461c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d006      	beq.n	8004632 <I2C_MasterRequestRead+0x3a>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d003      	beq.n	8004632 <I2C_MasterRequestRead+0x3a>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004630:	d108      	bne.n	8004644 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e00b      	b.n	800465c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	2b11      	cmp	r3, #17
 800464a:	d107      	bne.n	800465c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f93b 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d103      	bne.n	800468c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e079      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004698:	d108      	bne.n	80046ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800469a:	897b      	ldrh	r3, [r7, #10]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	611a      	str	r2, [r3, #16]
 80046aa:	e05f      	b.n	800476c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046ac:	897b      	ldrh	r3, [r7, #10]
 80046ae:	11db      	asrs	r3, r3, #7
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 0306 	and.w	r3, r3, #6
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f063 030f 	orn	r3, r3, #15
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4930      	ldr	r1, [pc, #192]	; (800478c <I2C_MasterRequestRead+0x194>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f961 	bl	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e054      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046da:	897b      	ldrh	r3, [r7, #10]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4929      	ldr	r1, [pc, #164]	; (8004790 <I2C_MasterRequestRead+0x198>)
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f951 	bl	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e044      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f8d9 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d103      	bne.n	8004750 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e017      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004754:	897b      	ldrh	r3, [r7, #10]
 8004756:	11db      	asrs	r3, r3, #7
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f063 030e 	orn	r3, r3, #14
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4907      	ldr	r1, [pc, #28]	; (8004790 <I2C_MasterRequestRead+0x198>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f90d 	bl	8004992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010008 	.word	0x00010008
 8004790:	00010002 	.word	0x00010002

08004794 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047ae:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <I2C_DMAAbort+0x148>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	4a4a      	ldr	r2, [pc, #296]	; (80048e0 <I2C_DMAAbort+0x14c>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	0a1a      	lsrs	r2, r3, #8
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00da      	lsls	r2, r3, #3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047da:	e00a      	b.n	80047f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3b01      	subs	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f0:	d0ea      	beq.n	80047c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fe:	2200      	movs	r2, #0
 8004800:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	2200      	movs	r2, #0
 8004810:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004820:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	2200      	movs	r2, #0
 8004836:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	2200      	movs	r2, #0
 8004846:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b60      	cmp	r3, #96	; 0x60
 8004862:	d10e      	bne.n	8004882 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f7fe fcd4 	bl	8003228 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004880:	e027      	b.n	80048d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004888:	2b28      	cmp	r3, #40	; 0x28
 800488a:	d117      	bne.n	80048bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2228      	movs	r2, #40	; 0x28
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048ba:	e007      	b.n	80048cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048cc:	6978      	ldr	r0, [r7, #20]
 80048ce:	f7fe fca1 	bl	8003214 <HAL_I2C_ErrorCallback>
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000008 	.word	0x20000008
 80048e0:	14f8b589 	.word	0x14f8b589

080048e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f4:	e025      	b.n	8004942 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d021      	beq.n	8004942 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fe:	f7fc fe7d 	bl	80015fc <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d116      	bne.n	8004942 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e023      	b.n	800498a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10d      	bne.n	8004968 <I2C_WaitOnFlagUntilTimeout+0x84>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	43da      	mvns	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	e00c      	b.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	429a      	cmp	r2, r3
 8004986:	d0b6      	beq.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a0:	e051      	b.n	8004a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b0:	d123      	bne.n	80049fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e046      	b.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d021      	beq.n	8004a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a02:	f7fc fdfb 	bl	80015fc <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d116      	bne.n	8004a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e020      	b.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10c      	bne.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e00b      	b.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	43da      	mvns	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d18d      	bne.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a9c:	e02d      	b.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f900 	bl	8004ca4 <I2C_IsAcknowledgeFailed>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e02d      	b.n	8004b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d021      	beq.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fc fda1 	bl	80015fc <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d116      	bne.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f043 0220 	orr.w	r2, r3, #32
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e007      	b.n	8004b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b04:	2b80      	cmp	r3, #128	; 0x80
 8004b06:	d1ca      	bne.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b1e:	e02d      	b.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f8bf 	bl	8004ca4 <I2C_IsAcknowledgeFailed>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e02d      	b.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d021      	beq.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b38:	f7fc fd60 	bl	80015fc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f043 0220 	orr.w	r2, r3, #32
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e007      	b.n	8004b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d1ca      	bne.n	8004b20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ba0:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	0a1a      	lsrs	r2, r3, #8
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e008      	b.n	8004be4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be0:	d0e9      	beq.n	8004bb6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000008 	.word	0x20000008
 8004bf4:	14f8b589 	.word	0x14f8b589

08004bf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c04:	e042      	b.n	8004c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d119      	bne.n	8004c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0210 	mvn.w	r2, #16
 8004c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e029      	b.n	8004c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c48:	f7fc fcd8 	bl	80015fc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d116      	bne.n	8004c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e007      	b.n	8004c9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d1b5      	bne.n	8004c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cba:	d11b      	bne.n	8004cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d12:	d103      	bne.n	8004d1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d1a:	e007      	b.n	8004d2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d24:	d102      	bne.n	8004d2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e264      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d075      	beq.n	8004e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d56:	4ba3      	ldr	r3, [pc, #652]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d00c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d62:	4ba0      	ldr	r3, [pc, #640]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d112      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6e:	4b9d      	ldr	r3, [pc, #628]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	d10b      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	4b99      	ldr	r3, [pc, #612]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05b      	beq.n	8004e40 <HAL_RCC_OscConfig+0x108>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d157      	bne.n	8004e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e23f      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x74>
 8004d9e:	4b91      	ldr	r3, [pc, #580]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a90      	ldr	r2, [pc, #576]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e01d      	b.n	8004de8 <HAL_RCC_OscConfig+0xb0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x98>
 8004db6:	4b8b      	ldr	r3, [pc, #556]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a8a      	ldr	r2, [pc, #552]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a87      	ldr	r2, [pc, #540]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0xb0>
 8004dd0:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a83      	ldr	r2, [pc, #524]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a80      	ldr	r2, [pc, #512]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fc fc04 	bl	80015fc <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fc fc00 	bl	80015fc <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e204      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b76      	ldr	r3, [pc, #472]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0xc0>
 8004e16:	e014      	b.n	8004e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fc fbf0 	bl	80015fc <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fc fbec 	bl	80015fc <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	; 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e1f0      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	4b6c      	ldr	r3, [pc, #432]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0xe8>
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d063      	beq.n	8004f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e4e:	4b65      	ldr	r3, [pc, #404]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5a:	4b62      	ldr	r3, [pc, #392]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d11c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e66:	4b5f      	ldr	r3, [pc, #380]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d116      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e72:	4b5c      	ldr	r3, [pc, #368]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_RCC_OscConfig+0x152>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d001      	beq.n	8004e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e1c4      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8a:	4b56      	ldr	r3, [pc, #344]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4952      	ldr	r1, [pc, #328]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9e:	e03a      	b.n	8004f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea8:	4b4f      	ldr	r3, [pc, #316]	; (8004fe8 <HAL_RCC_OscConfig+0x2b0>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fc fba5 	bl	80015fc <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb6:	f7fc fba1 	bl	80015fc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1a5      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4940      	ldr	r1, [pc, #256]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	600b      	str	r3, [r1, #0]
 8004ee8:	e015      	b.n	8004f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eea:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_OscConfig+0x2b0>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fc fb84 	bl	80015fc <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef8:	f7fc fb80 	bl	80015fc <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e184      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d030      	beq.n	8004f84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2a:	4b30      	ldr	r3, [pc, #192]	; (8004fec <HAL_RCC_OscConfig+0x2b4>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fc fb64 	bl	80015fc <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f38:	f7fc fb60 	bl	80015fc <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e164      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x200>
 8004f56:	e015      	b.n	8004f84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f58:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCC_OscConfig+0x2b4>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5e:	f7fc fb4d 	bl	80015fc <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f66:	f7fc fb49 	bl	80015fc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e14d      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a0 	beq.w	80050d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f92:	2300      	movs	r3, #0
 8004f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f96:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10f      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_RCC_OscConfig+0x2b8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d121      	bne.n	8005012 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_RCC_OscConfig+0x2b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a07      	ldr	r2, [pc, #28]	; (8004ff0 <HAL_RCC_OscConfig+0x2b8>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fda:	f7fc fb0f 	bl	80015fc <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe0:	e011      	b.n	8005006 <HAL_RCC_OscConfig+0x2ce>
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	42470000 	.word	0x42470000
 8004fec:	42470e80 	.word	0x42470e80
 8004ff0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff4:	f7fc fb02 	bl	80015fc <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e106      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005006:	4b85      	ldr	r3, [pc, #532]	; (800521c <HAL_RCC_OscConfig+0x4e4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d106      	bne.n	8005028 <HAL_RCC_OscConfig+0x2f0>
 800501a:	4b81      	ldr	r3, [pc, #516]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4a80      	ldr	r2, [pc, #512]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6713      	str	r3, [r2, #112]	; 0x70
 8005026:	e01c      	b.n	8005062 <HAL_RCC_OscConfig+0x32a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b05      	cmp	r3, #5
 800502e:	d10c      	bne.n	800504a <HAL_RCC_OscConfig+0x312>
 8005030:	4b7b      	ldr	r3, [pc, #492]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	4a7a      	ldr	r2, [pc, #488]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6713      	str	r3, [r2, #112]	; 0x70
 800503c:	4b78      	ldr	r3, [pc, #480]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	4a77      	ldr	r2, [pc, #476]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6713      	str	r3, [r2, #112]	; 0x70
 8005048:	e00b      	b.n	8005062 <HAL_RCC_OscConfig+0x32a>
 800504a:	4b75      	ldr	r3, [pc, #468]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	4a74      	ldr	r2, [pc, #464]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6713      	str	r3, [r2, #112]	; 0x70
 8005056:	4b72      	ldr	r3, [pc, #456]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	4a71      	ldr	r2, [pc, #452]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d015      	beq.n	8005096 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506a:	f7fc fac7 	bl	80015fc <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	e00a      	b.n	8005088 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005072:	f7fc fac3 	bl	80015fc <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e0c5      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005088:	4b65      	ldr	r3, [pc, #404]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ee      	beq.n	8005072 <HAL_RCC_OscConfig+0x33a>
 8005094:	e014      	b.n	80050c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005096:	f7fc fab1 	bl	80015fc <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800509e:	f7fc faad 	bl	80015fc <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0af      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b4:	4b5a      	ldr	r3, [pc, #360]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ee      	bne.n	800509e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c6:	4b56      	ldr	r3, [pc, #344]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a55      	ldr	r2, [pc, #340]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 809b 	beq.w	8005212 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050dc:	4b50      	ldr	r3, [pc, #320]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d05c      	beq.n	80051a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d141      	bne.n	8005174 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f0:	4b4c      	ldr	r3, [pc, #304]	; (8005224 <HAL_RCC_OscConfig+0x4ec>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f6:	f7fc fa81 	bl	80015fc <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050fe:	f7fc fa7d 	bl	80015fc <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e081      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005110:	4b43      	ldr	r3, [pc, #268]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	019b      	lsls	r3, r3, #6
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	3b01      	subs	r3, #1
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	4937      	ldr	r1, [pc, #220]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005146:	4b37      	ldr	r3, [pc, #220]	; (8005224 <HAL_RCC_OscConfig+0x4ec>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fc fa56 	bl	80015fc <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005154:	f7fc fa52 	bl	80015fc <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e056      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005166:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x41c>
 8005172:	e04e      	b.n	8005212 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005174:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <HAL_RCC_OscConfig+0x4ec>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517a:	f7fc fa3f 	bl	80015fc <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005182:	f7fc fa3b 	bl	80015fc <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e03f      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005194:	4b22      	ldr	r3, [pc, #136]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f0      	bne.n	8005182 <HAL_RCC_OscConfig+0x44a>
 80051a0:	e037      	b.n	8005212 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e032      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <HAL_RCC_OscConfig+0x4e8>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d028      	beq.n	800520e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d121      	bne.n	800520e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d11a      	bne.n	800520e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051de:	4013      	ands	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d111      	bne.n	800520e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	3b01      	subs	r3, #1
 80051f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d107      	bne.n	800520e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005208:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40007000 	.word	0x40007000
 8005220:	40023800 	.word	0x40023800
 8005224:	42470060 	.word	0x42470060

08005228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0cc      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b68      	ldr	r3, [pc, #416]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d90c      	bls.n	8005264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b65      	ldr	r3, [pc, #404]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0b8      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800527c:	4b59      	ldr	r3, [pc, #356]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a58      	ldr	r2, [pc, #352]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005294:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4a52      	ldr	r2, [pc, #328]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800529e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a0:	4b50      	ldr	r3, [pc, #320]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	494d      	ldr	r1, [pc, #308]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d044      	beq.n	8005348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d107      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c6:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d119      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e07f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d003      	beq.n	80052e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	4b3f      	ldr	r3, [pc, #252]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e06f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f6:	4b3b      	ldr	r3, [pc, #236]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e067      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f023 0203 	bic.w	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4934      	ldr	r1, [pc, #208]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005318:	f7fc f970 	bl	80015fc <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531e:	e00a      	b.n	8005336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005320:	f7fc f96c 	bl	80015fc <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e04f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 020c 	and.w	r2, r3, #12
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	429a      	cmp	r2, r3
 8005346:	d1eb      	bne.n	8005320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d20c      	bcs.n	8005370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535e:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e032      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4916      	ldr	r1, [pc, #88]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	490e      	ldr	r1, [pc, #56]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ae:	f000 f821 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80053b2:	4602      	mov	r2, r0
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	490a      	ldr	r1, [pc, #40]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 80053c0:	5ccb      	ldrb	r3, [r1, r3]
 80053c2:	fa22 f303 	lsr.w	r3, r2, r3
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_ClockConfig+0x1c8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fc f8d0 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023c00 	.word	0x40023c00
 80053e4:	40023800 	.word	0x40023800
 80053e8:	0800716c 	.word	0x0800716c
 80053ec:	20000008 	.word	0x20000008
 80053f0:	2000000c 	.word	0x2000000c

080053f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f4:	b5b0      	push	{r4, r5, r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053fa:	2100      	movs	r1, #0
 80053fc:	6079      	str	r1, [r7, #4]
 80053fe:	2100      	movs	r1, #0
 8005400:	60f9      	str	r1, [r7, #12]
 8005402:	2100      	movs	r1, #0
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005406:	2100      	movs	r1, #0
 8005408:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800540a:	4952      	ldr	r1, [pc, #328]	; (8005554 <HAL_RCC_GetSysClockFreq+0x160>)
 800540c:	6889      	ldr	r1, [r1, #8]
 800540e:	f001 010c 	and.w	r1, r1, #12
 8005412:	2908      	cmp	r1, #8
 8005414:	d00d      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x3e>
 8005416:	2908      	cmp	r1, #8
 8005418:	f200 8094 	bhi.w	8005544 <HAL_RCC_GetSysClockFreq+0x150>
 800541c:	2900      	cmp	r1, #0
 800541e:	d002      	beq.n	8005426 <HAL_RCC_GetSysClockFreq+0x32>
 8005420:	2904      	cmp	r1, #4
 8005422:	d003      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0x38>
 8005424:	e08e      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005426:	4b4c      	ldr	r3, [pc, #304]	; (8005558 <HAL_RCC_GetSysClockFreq+0x164>)
 8005428:	60bb      	str	r3, [r7, #8]
       break;
 800542a:	e08e      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800542c:	4b4b      	ldr	r3, [pc, #300]	; (800555c <HAL_RCC_GetSysClockFreq+0x168>)
 800542e:	60bb      	str	r3, [r7, #8]
      break;
 8005430:	e08b      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005432:	4948      	ldr	r1, [pc, #288]	; (8005554 <HAL_RCC_GetSysClockFreq+0x160>)
 8005434:	6849      	ldr	r1, [r1, #4]
 8005436:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800543a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543c:	4945      	ldr	r1, [pc, #276]	; (8005554 <HAL_RCC_GetSysClockFreq+0x160>)
 800543e:	6849      	ldr	r1, [r1, #4]
 8005440:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005444:	2900      	cmp	r1, #0
 8005446:	d024      	beq.n	8005492 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005448:	4942      	ldr	r1, [pc, #264]	; (8005554 <HAL_RCC_GetSysClockFreq+0x160>)
 800544a:	6849      	ldr	r1, [r1, #4]
 800544c:	0989      	lsrs	r1, r1, #6
 800544e:	4608      	mov	r0, r1
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005458:	f04f 0500 	mov.w	r5, #0
 800545c:	ea00 0204 	and.w	r2, r0, r4
 8005460:	ea01 0305 	and.w	r3, r1, r5
 8005464:	493d      	ldr	r1, [pc, #244]	; (800555c <HAL_RCC_GetSysClockFreq+0x168>)
 8005466:	fb01 f003 	mul.w	r0, r1, r3
 800546a:	2100      	movs	r1, #0
 800546c:	fb01 f102 	mul.w	r1, r1, r2
 8005470:	1844      	adds	r4, r0, r1
 8005472:	493a      	ldr	r1, [pc, #232]	; (800555c <HAL_RCC_GetSysClockFreq+0x168>)
 8005474:	fba2 0101 	umull	r0, r1, r2, r1
 8005478:	1863      	adds	r3, r4, r1
 800547a:	4619      	mov	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	461a      	mov	r2, r3
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	f7fa fefc 	bl	8000280 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4613      	mov	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e04a      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005492:	4b30      	ldr	r3, [pc, #192]	; (8005554 <HAL_RCC_GetSysClockFreq+0x160>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	461a      	mov	r2, r3
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054a2:	f04f 0100 	mov.w	r1, #0
 80054a6:	ea02 0400 	and.w	r4, r2, r0
 80054aa:	ea03 0501 	and.w	r5, r3, r1
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	014b      	lsls	r3, r1, #5
 80054bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054c0:	0142      	lsls	r2, r0, #5
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	1b00      	subs	r0, r0, r4
 80054c8:	eb61 0105 	sbc.w	r1, r1, r5
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	018b      	lsls	r3, r1, #6
 80054d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054da:	0182      	lsls	r2, r0, #6
 80054dc:	1a12      	subs	r2, r2, r0
 80054de:	eb63 0301 	sbc.w	r3, r3, r1
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	00d9      	lsls	r1, r3, #3
 80054ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054f0:	00d0      	lsls	r0, r2, #3
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	1912      	adds	r2, r2, r4
 80054f8:	eb45 0303 	adc.w	r3, r5, r3
 80054fc:	f04f 0000 	mov.w	r0, #0
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	0299      	lsls	r1, r3, #10
 8005506:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800550a:	0290      	lsls	r0, r2, #10
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	461a      	mov	r2, r3
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	f7fa feb0 	bl	8000280 <__aeabi_uldivmod>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4613      	mov	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_RCC_GetSysClockFreq+0x160>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	3301      	adds	r3, #1
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	60bb      	str	r3, [r7, #8]
      break;
 8005542:	e002      	b.n	800554a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <HAL_RCC_GetSysClockFreq+0x164>)
 8005546:	60bb      	str	r3, [r7, #8]
      break;
 8005548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800554a:	68bb      	ldr	r3, [r7, #8]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bdb0      	pop	{r4, r5, r7, pc}
 8005554:	40023800 	.word	0x40023800
 8005558:	00f42400 	.word	0x00f42400
 800555c:	017d7840 	.word	0x017d7840

08005560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005564:	4b03      	ldr	r3, [pc, #12]	; (8005574 <HAL_RCC_GetHCLKFreq+0x14>)
 8005566:	681b      	ldr	r3, [r3, #0]
}
 8005568:	4618      	mov	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000008 	.word	0x20000008

08005578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800557c:	f7ff fff0 	bl	8005560 <HAL_RCC_GetHCLKFreq>
 8005580:	4602      	mov	r2, r0
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	0a9b      	lsrs	r3, r3, #10
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	4903      	ldr	r1, [pc, #12]	; (800559c <HAL_RCC_GetPCLK1Freq+0x24>)
 800558e:	5ccb      	ldrb	r3, [r1, r3]
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40023800 	.word	0x40023800
 800559c:	0800717c 	.word	0x0800717c

080055a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055a4:	f7ff ffdc 	bl	8005560 <HAL_RCC_GetHCLKFreq>
 80055a8:	4602      	mov	r2, r0
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0b5b      	lsrs	r3, r3, #13
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4903      	ldr	r1, [pc, #12]	; (80055c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b6:	5ccb      	ldrb	r3, [r1, r3]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40023800 	.word	0x40023800
 80055c4:	0800717c 	.word	0x0800717c

080055c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e03f      	b.n	800565a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fdbc 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2224      	movs	r2, #36	; 0x24
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800560a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 ff65 	bl	80064dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695a      	ldr	r2, [r3, #20]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b08a      	sub	sp, #40	; 0x28
 8005666:	af02      	add	r7, sp, #8
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b20      	cmp	r3, #32
 8005680:	d17c      	bne.n	800577c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_UART_Transmit+0x2c>
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e075      	b.n	800577e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_UART_Transmit+0x3e>
 800569c:	2302      	movs	r3, #2
 800569e:	e06e      	b.n	800577e <HAL_UART_Transmit+0x11c>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2221      	movs	r2, #33	; 0x21
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b6:	f7fb ffa1 	bl	80015fc <HAL_GetTick>
 80056ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d108      	bne.n	80056e4 <HAL_UART_Transmit+0x82>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e003      	b.n	80056ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056f4:	e02a      	b.n	800574c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fc21 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e036      	b.n	800577e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	3302      	adds	r3, #2
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e007      	b.n	800573e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	3301      	adds	r3, #1
 800573c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1cf      	bne.n	80056f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2200      	movs	r2, #0
 800575e:	2140      	movs	r1, #64	; 0x40
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fbf1 	bl	8005f48 <UART_WaitOnFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e006      	b.n	800577e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	e000      	b.n	800577e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800577c:	2302      	movs	r3, #2
  }
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	4613      	mov	r3, r2
 8005792:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b20      	cmp	r3, #32
 800579e:	d11d      	bne.n	80057dc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_UART_Receive_DMA+0x26>
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e016      	b.n	80057de <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_UART_Receive_DMA+0x38>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e00f      	b.n	80057de <HAL_UART_Receive_DMA+0x58>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	461a      	mov	r2, r3
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fc26 	bl	8006024 <UART_Start_Receive_DMA>
 80057d8:	4603      	mov	r3, r0
 80057da:	e000      	b.n	80057de <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057dc:	2302      	movs	r3, #2
  }
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b0ba      	sub	sp, #232	; 0xe8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800580e:	2300      	movs	r3, #0
 8005810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10f      	bne.n	800584e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <HAL_UART_IRQHandler+0x66>
 800583a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fd8d 	bl	8006366 <UART_Receive_IT>
      return;
 800584c:	e256      	b.n	8005cfc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800584e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80de 	beq.w	8005a14 <HAL_UART_IRQHandler+0x22c>
 8005858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005868:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80d1 	beq.w	8005a14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <HAL_UART_IRQHandler+0xae>
 800587e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f043 0201 	orr.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_UART_IRQHandler+0xd2>
 80058a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f043 0202 	orr.w	r2, r3, #2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <HAL_UART_IRQHandler+0xf6>
 80058c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f043 0204 	orr.w	r2, r3, #4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d011      	beq.n	800590e <HAL_UART_IRQHandler+0x126>
 80058ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d105      	bne.n	8005902 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f043 0208 	orr.w	r2, r3, #8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 81ed 	beq.w	8005cf2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_UART_IRQHandler+0x14e>
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fd18 	bl	8006366 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d103      	bne.n	8005962 <HAL_UART_IRQHandler+0x17a>
 800595a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d04f      	beq.n	8005a02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fc20 	bl	80061a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d141      	bne.n	80059fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3314      	adds	r3, #20
 800597c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800598c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3314      	adds	r3, #20
 800599e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1d9      	bne.n	8005976 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d013      	beq.n	80059f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	4a7d      	ldr	r2, [pc, #500]	; (8005bc4 <HAL_UART_IRQHandler+0x3dc>)
 80059d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fc f8c8 	bl	8001b6c <HAL_DMA_Abort_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059ec:	4610      	mov	r0, r2
 80059ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	e00e      	b.n	8005a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f99a 	bl	8005d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	e00a      	b.n	8005a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f996 	bl	8005d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	e006      	b.n	8005a10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f992 	bl	8005d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a0e:	e170      	b.n	8005cf2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	bf00      	nop
    return;
 8005a12:	e16e      	b.n	8005cf2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	f040 814a 	bne.w	8005cb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8143 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 813c 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	f040 80b4 	bne.w	8005bc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8140 	beq.w	8005cf6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	f080 8139 	bcs.w	8005cf6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a96:	f000 8088 	beq.w	8005baa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1d9      	bne.n	8005a9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3314      	adds	r3, #20
 8005aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3314      	adds	r3, #20
 8005b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e1      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e3      	bne.n	8005b22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e3      	bne.n	8005b68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fb ff71 	bl	8001a8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f8c0 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bc0:	e099      	b.n	8005cf6 <HAL_UART_IRQHandler+0x50e>
 8005bc2:	bf00      	nop
 8005bc4:	0800626f 	.word	0x0800626f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 808b 	beq.w	8005cfa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 8086 	beq.w	8005cfa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c12:	647a      	str	r2, [r7, #68]	; 0x44
 8005c14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e3      	bne.n	8005bee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	623b      	str	r3, [r7, #32]
   return(result);
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e3      	bne.n	8005c26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0310 	bic.w	r3, r3, #16
 8005c82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c90:	61fa      	str	r2, [r7, #28]
 8005c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	69b9      	ldr	r1, [r7, #24]
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e3      	bne.n	8005c6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f848 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cb0:	e023      	b.n	8005cfa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x4ea>
 8005cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fae3 	bl	8006296 <UART_Transmit_IT>
    return;
 8005cd0:	e014      	b.n	8005cfc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <HAL_UART_IRQHandler+0x514>
 8005cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fb23 	bl	8006336 <UART_EndTransmit_IT>
    return;
 8005cf0:	e004      	b.n	8005cfc <HAL_UART_IRQHandler+0x514>
    return;
 8005cf2:	bf00      	nop
 8005cf4:	e002      	b.n	8005cfc <HAL_UART_IRQHandler+0x514>
      return;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <HAL_UART_IRQHandler+0x514>
      return;
 8005cfa:	bf00      	nop
  }
}
 8005cfc:	37e8      	adds	r7, #232	; 0xe8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b09c      	sub	sp, #112	; 0x70
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d172      	bne.n	8005e5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	2200      	movs	r2, #0
 8005d78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dce:	647a      	str	r2, [r7, #68]	; 0x44
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3314      	adds	r3, #20
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	623b      	str	r3, [r7, #32]
   return(result);
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e02:	633a      	str	r2, [r7, #48]	; 0x30
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e5      	bne.n	8005de2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d119      	bne.n	8005e5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 0310 	bic.w	r3, r3, #16
 8005e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e46:	61fa      	str	r2, [r7, #28]
 8005e48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	69b9      	ldr	r1, [r7, #24]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	617b      	str	r3, [r7, #20]
   return(result);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e5      	bne.n	8005e26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d106      	bne.n	8005e70 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e66:	4619      	mov	r1, r3
 8005e68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e6a:	f7ff ff69 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e6e:	e002      	b.n	8005e76 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005e70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e72:	f7fb f8a7 	bl	8000fc4 <HAL_UART_RxCpltCallback>
}
 8005e76:	bf00      	nop
 8005e78:	3770      	adds	r7, #112	; 0x70
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d108      	bne.n	8005ea6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff ff4e 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ea4:	e002      	b.n	8005eac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff ff36 	bl	8005d18 <HAL_UART_RxHalfCpltCallback>
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed0:	2b80      	cmp	r3, #128	; 0x80
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b21      	cmp	r3, #33	; 0x21
 8005ee6:	d108      	bne.n	8005efa <UART_DMAError+0x46>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ef4:	68b8      	ldr	r0, [r7, #8]
 8005ef6:	f000 f92f 	bl	8006158 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b22      	cmp	r3, #34	; 0x22
 8005f1a:	d108      	bne.n	8005f2e <UART_DMAError+0x7a>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f28:	68b8      	ldr	r0, [r7, #8]
 8005f2a:	f000 f93d 	bl	80061a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f043 0210 	orr.w	r2, r3, #16
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f3a:	68b8      	ldr	r0, [r7, #8]
 8005f3c:	f7ff fef6 	bl	8005d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b090      	sub	sp, #64	; 0x40
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f58:	e050      	b.n	8005ffc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d04c      	beq.n	8005ffc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f68:	f7fb fb48 	bl	80015fc <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d241      	bcs.n	8005ffc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f98:	637a      	str	r2, [r7, #52]	; 0x34
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 0301 	bic.w	r3, r3, #1
 8005fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3314      	adds	r3, #20
 8005fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fcc:	623a      	str	r2, [r7, #32]
 8005fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e00f      	b.n	800601c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4013      	ands	r3, r2
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	429a      	cmp	r2, r3
 8006018:	d09f      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3740      	adds	r7, #64	; 0x40
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b098      	sub	sp, #96	; 0x60
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2222      	movs	r2, #34	; 0x22
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	4a3e      	ldr	r2, [pc, #248]	; (800614c <UART_Start_Receive_DMA+0x128>)
 8006052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	4a3d      	ldr	r2, [pc, #244]	; (8006150 <UART_Start_Receive_DMA+0x12c>)
 800605a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	4a3c      	ldr	r2, [pc, #240]	; (8006154 <UART_Start_Receive_DMA+0x130>)
 8006062:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	2200      	movs	r2, #0
 800606a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800606c:	f107 0308 	add.w	r3, r7, #8
 8006070:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	f7fb fcaa 	bl	80019dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006088:	2300      	movs	r3, #0
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80060c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80060d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	657b      	str	r3, [r7, #84]	; 0x54
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3314      	adds	r3, #20
 80060f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e5      	bne.n	80060da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3314      	adds	r3, #20
 8006114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	617b      	str	r3, [r7, #20]
   return(result);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3314      	adds	r3, #20
 800612c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800612e:	627a      	str	r2, [r7, #36]	; 0x24
 8006130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6a39      	ldr	r1, [r7, #32]
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	61fb      	str	r3, [r7, #28]
   return(result);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3760      	adds	r7, #96	; 0x60
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	08005d59 	.word	0x08005d59
 8006150:	08005e7f 	.word	0x08005e7f
 8006154:	08005eb5 	.word	0x08005eb5

08006158 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b089      	sub	sp, #36	; 0x24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	61ba      	str	r2, [r7, #24]
 8006182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6979      	ldr	r1, [r7, #20]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	613b      	str	r3, [r7, #16]
   return(result);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800619c:	bf00      	nop
 800619e:	3724      	adds	r7, #36	; 0x24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b095      	sub	sp, #84	; 0x54
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061d0:	643a      	str	r2, [r7, #64]	; 0x40
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e5      	bne.n	80061b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f023 0301 	bic.w	r3, r3, #1
 80061fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3314      	adds	r3, #20
 8006202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800620a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e5      	bne.n	80061e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	2b01      	cmp	r3, #1
 800621e:	d119      	bne.n	8006254 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	e853 3f00 	ldrex	r3, [r3]
 800622e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f023 0310 	bic.w	r3, r3, #16
 8006236:	647b      	str	r3, [r7, #68]	; 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	330c      	adds	r3, #12
 800623e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006240:	61ba      	str	r2, [r7, #24]
 8006242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6979      	ldr	r1, [r7, #20]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	613b      	str	r3, [r7, #16]
   return(result);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e5      	bne.n	8006220 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006262:	bf00      	nop
 8006264:	3754      	adds	r7, #84	; 0x54
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fd4f 	bl	8005d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b21      	cmp	r3, #33	; 0x21
 80062a8:	d13e      	bne.n	8006328 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	d114      	bne.n	80062de <UART_Transmit_IT+0x48>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d110      	bne.n	80062de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	1c9a      	adds	r2, r3, #2
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	621a      	str	r2, [r3, #32]
 80062dc:	e008      	b.n	80062f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6211      	str	r1, [r2, #32]
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4619      	mov	r1, r3
 80062fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10f      	bne.n	8006324 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006312:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006322:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	e000      	b.n	800632a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006328:	2302      	movs	r3, #2
  }
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fcd4 	bl	8005d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08c      	sub	sp, #48	; 0x30
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b22      	cmp	r3, #34	; 0x22
 8006378:	f040 80ab 	bne.w	80064d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006384:	d117      	bne.n	80063b6 <UART_Receive_IT+0x50>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d113      	bne.n	80063b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	1c9a      	adds	r2, r3, #2
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28
 80063b4:	e026      	b.n	8006404 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063bc:	2300      	movs	r3, #0
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c8:	d007      	beq.n	80063da <UART_Receive_IT+0x74>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <UART_Receive_IT+0x82>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e008      	b.n	80063fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4619      	mov	r1, r3
 8006412:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006414:	2b00      	cmp	r3, #0
 8006416:	d15a      	bne.n	80064ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0220 	bic.w	r2, r2, #32
 8006426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	2b01      	cmp	r3, #1
 8006456:	d135      	bne.n	80064c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	613b      	str	r3, [r7, #16]
   return(result);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f023 0310 	bic.w	r3, r3, #16
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647e:	623a      	str	r2, [r7, #32]
 8006480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	69f9      	ldr	r1, [r7, #28]
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	61bb      	str	r3, [r7, #24]
   return(result);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b10      	cmp	r3, #16
 800649e:	d10a      	bne.n	80064b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fc3f 	bl	8005d40 <HAL_UARTEx_RxEventCallback>
 80064c2:	e002      	b.n	80064ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fa fd7d 	bl	8000fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e002      	b.n	80064d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3730      	adds	r7, #48	; 0x30
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	b09f      	sub	sp, #124	; 0x7c
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	68d9      	ldr	r1, [r3, #12]
 80064f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	ea40 0301 	orr.w	r3, r0, r1
 80064fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	431a      	orrs	r2, r3
 8006508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	431a      	orrs	r2, r3
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	4313      	orrs	r3, r2
 8006514:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006520:	f021 010c 	bic.w	r1, r1, #12
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800652a:	430b      	orrs	r3, r1
 800652c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800652e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653a:	6999      	ldr	r1, [r3, #24]
 800653c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	ea40 0301 	orr.w	r3, r0, r1
 8006544:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4bc5      	ldr	r3, [pc, #788]	; (8006860 <UART_SetConfig+0x384>)
 800654c:	429a      	cmp	r2, r3
 800654e:	d004      	beq.n	800655a <UART_SetConfig+0x7e>
 8006550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4bc3      	ldr	r3, [pc, #780]	; (8006864 <UART_SetConfig+0x388>)
 8006556:	429a      	cmp	r2, r3
 8006558:	d103      	bne.n	8006562 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800655a:	f7ff f821 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 800655e:	6778      	str	r0, [r7, #116]	; 0x74
 8006560:	e002      	b.n	8006568 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006562:	f7ff f809 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 8006566:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006570:	f040 80b6 	bne.w	80066e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006576:	461c      	mov	r4, r3
 8006578:	f04f 0500 	mov.w	r5, #0
 800657c:	4622      	mov	r2, r4
 800657e:	462b      	mov	r3, r5
 8006580:	1891      	adds	r1, r2, r2
 8006582:	6439      	str	r1, [r7, #64]	; 0x40
 8006584:	415b      	adcs	r3, r3
 8006586:	647b      	str	r3, [r7, #68]	; 0x44
 8006588:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800658c:	1912      	adds	r2, r2, r4
 800658e:	eb45 0303 	adc.w	r3, r5, r3
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	00d9      	lsls	r1, r3, #3
 800659c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065a0:	00d0      	lsls	r0, r2, #3
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	1911      	adds	r1, r2, r4
 80065a8:	6639      	str	r1, [r7, #96]	; 0x60
 80065aa:	416b      	adcs	r3, r5
 80065ac:	667b      	str	r3, [r7, #100]	; 0x64
 80065ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80065bc:	415b      	adcs	r3, r3
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065c8:	f7f9 fe5a 	bl	8000280 <__aeabi_uldivmod>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4ba5      	ldr	r3, [pc, #660]	; (8006868 <UART_SetConfig+0x38c>)
 80065d2:	fba3 2302 	umull	r2, r3, r3, r2
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	011e      	lsls	r6, r3, #4
 80065da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065dc:	461c      	mov	r4, r3
 80065de:	f04f 0500 	mov.w	r5, #0
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	1891      	adds	r1, r2, r2
 80065e8:	6339      	str	r1, [r7, #48]	; 0x30
 80065ea:	415b      	adcs	r3, r3
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
 80065ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065f2:	1912      	adds	r2, r2, r4
 80065f4:	eb45 0303 	adc.w	r3, r5, r3
 80065f8:	f04f 0000 	mov.w	r0, #0
 80065fc:	f04f 0100 	mov.w	r1, #0
 8006600:	00d9      	lsls	r1, r3, #3
 8006602:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006606:	00d0      	lsls	r0, r2, #3
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	1911      	adds	r1, r2, r4
 800660e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006610:	416b      	adcs	r3, r5
 8006612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	461a      	mov	r2, r3
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	1891      	adds	r1, r2, r2
 8006620:	62b9      	str	r1, [r7, #40]	; 0x28
 8006622:	415b      	adcs	r3, r3
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800662a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800662e:	f7f9 fe27 	bl	8000280 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b8c      	ldr	r3, [pc, #560]	; (8006868 <UART_SetConfig+0x38c>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	; 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	3332      	adds	r3, #50	; 0x32
 800664a:	4a87      	ldr	r2, [pc, #540]	; (8006868 <UART_SetConfig+0x38c>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006658:	441e      	add	r6, r3
 800665a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800665c:	4618      	mov	r0, r3
 800665e:	f04f 0100 	mov.w	r1, #0
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	1894      	adds	r4, r2, r2
 8006668:	623c      	str	r4, [r7, #32]
 800666a:	415b      	adcs	r3, r3
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
 800666e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006672:	1812      	adds	r2, r2, r0
 8006674:	eb41 0303 	adc.w	r3, r1, r3
 8006678:	f04f 0400 	mov.w	r4, #0
 800667c:	f04f 0500 	mov.w	r5, #0
 8006680:	00dd      	lsls	r5, r3, #3
 8006682:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006686:	00d4      	lsls	r4, r2, #3
 8006688:	4622      	mov	r2, r4
 800668a:	462b      	mov	r3, r5
 800668c:	1814      	adds	r4, r2, r0
 800668e:	653c      	str	r4, [r7, #80]	; 0x50
 8006690:	414b      	adcs	r3, r1
 8006692:	657b      	str	r3, [r7, #84]	; 0x54
 8006694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	461a      	mov	r2, r3
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	1891      	adds	r1, r2, r2
 80066a0:	61b9      	str	r1, [r7, #24]
 80066a2:	415b      	adcs	r3, r3
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066ae:	f7f9 fde7 	bl	8000280 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <UART_SetConfig+0x38c>)
 80066b8:	fba3 1302 	umull	r1, r3, r3, r2
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	2164      	movs	r1, #100	; 0x64
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	3332      	adds	r3, #50	; 0x32
 80066ca:	4a67      	ldr	r2, [pc, #412]	; (8006868 <UART_SetConfig+0x38c>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	f003 0207 	and.w	r2, r3, #7
 80066d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4432      	add	r2, r6
 80066dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066de:	e0b9      	b.n	8006854 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e2:	461c      	mov	r4, r3
 80066e4:	f04f 0500 	mov.w	r5, #0
 80066e8:	4622      	mov	r2, r4
 80066ea:	462b      	mov	r3, r5
 80066ec:	1891      	adds	r1, r2, r2
 80066ee:	6139      	str	r1, [r7, #16]
 80066f0:	415b      	adcs	r3, r3
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066f8:	1912      	adds	r2, r2, r4
 80066fa:	eb45 0303 	adc.w	r3, r5, r3
 80066fe:	f04f 0000 	mov.w	r0, #0
 8006702:	f04f 0100 	mov.w	r1, #0
 8006706:	00d9      	lsls	r1, r3, #3
 8006708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800670c:	00d0      	lsls	r0, r2, #3
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	eb12 0804 	adds.w	r8, r2, r4
 8006716:	eb43 0905 	adc.w	r9, r3, r5
 800671a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	f04f 0100 	mov.w	r1, #0
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	008b      	lsls	r3, r1, #2
 800672e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006732:	0082      	lsls	r2, r0, #2
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f7f9 fda2 	bl	8000280 <__aeabi_uldivmod>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4b49      	ldr	r3, [pc, #292]	; (8006868 <UART_SetConfig+0x38c>)
 8006742:	fba3 2302 	umull	r2, r3, r3, r2
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	011e      	lsls	r6, r3, #4
 800674a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800674c:	4618      	mov	r0, r3
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	1894      	adds	r4, r2, r2
 8006758:	60bc      	str	r4, [r7, #8]
 800675a:	415b      	adcs	r3, r3
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006762:	1812      	adds	r2, r2, r0
 8006764:	eb41 0303 	adc.w	r3, r1, r3
 8006768:	f04f 0400 	mov.w	r4, #0
 800676c:	f04f 0500 	mov.w	r5, #0
 8006770:	00dd      	lsls	r5, r3, #3
 8006772:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006776:	00d4      	lsls	r4, r2, #3
 8006778:	4622      	mov	r2, r4
 800677a:	462b      	mov	r3, r5
 800677c:	1814      	adds	r4, r2, r0
 800677e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006780:	414b      	adcs	r3, r1
 8006782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4618      	mov	r0, r3
 800678a:	f04f 0100 	mov.w	r1, #0
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	008b      	lsls	r3, r1, #2
 8006798:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800679c:	0082      	lsls	r2, r0, #2
 800679e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80067a2:	f7f9 fd6d 	bl	8000280 <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <UART_SetConfig+0x38c>)
 80067ac:	fba3 1302 	umull	r1, r3, r3, r2
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	2164      	movs	r1, #100	; 0x64
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	3332      	adds	r3, #50	; 0x32
 80067be:	4a2a      	ldr	r2, [pc, #168]	; (8006868 <UART_SetConfig+0x38c>)
 80067c0:	fba2 2303 	umull	r2, r3, r2, r3
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ca:	441e      	add	r6, r3
 80067cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ce:	4618      	mov	r0, r3
 80067d0:	f04f 0100 	mov.w	r1, #0
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	1894      	adds	r4, r2, r2
 80067da:	603c      	str	r4, [r7, #0]
 80067dc:	415b      	adcs	r3, r3
 80067de:	607b      	str	r3, [r7, #4]
 80067e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e4:	1812      	adds	r2, r2, r0
 80067e6:	eb41 0303 	adc.w	r3, r1, r3
 80067ea:	f04f 0400 	mov.w	r4, #0
 80067ee:	f04f 0500 	mov.w	r5, #0
 80067f2:	00dd      	lsls	r5, r3, #3
 80067f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067f8:	00d4      	lsls	r4, r2, #3
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	eb12 0a00 	adds.w	sl, r2, r0
 8006802:	eb43 0b01 	adc.w	fp, r3, r1
 8006806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4618      	mov	r0, r3
 800680c:	f04f 0100 	mov.w	r1, #0
 8006810:	f04f 0200 	mov.w	r2, #0
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	008b      	lsls	r3, r1, #2
 800681a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800681e:	0082      	lsls	r2, r0, #2
 8006820:	4650      	mov	r0, sl
 8006822:	4659      	mov	r1, fp
 8006824:	f7f9 fd2c 	bl	8000280 <__aeabi_uldivmod>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <UART_SetConfig+0x38c>)
 800682e:	fba3 1302 	umull	r1, r3, r3, r2
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	2164      	movs	r1, #100	; 0x64
 8006836:	fb01 f303 	mul.w	r3, r1, r3
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	3332      	adds	r3, #50	; 0x32
 8006840:	4a09      	ldr	r2, [pc, #36]	; (8006868 <UART_SetConfig+0x38c>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	f003 020f 	and.w	r2, r3, #15
 800684c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4432      	add	r2, r6
 8006852:	609a      	str	r2, [r3, #8]
}
 8006854:	bf00      	nop
 8006856:	377c      	adds	r7, #124	; 0x7c
 8006858:	46bd      	mov	sp, r7
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	bf00      	nop
 8006860:	40011000 	.word	0x40011000
 8006864:	40011400 	.word	0x40011400
 8006868:	51eb851f 	.word	0x51eb851f

0800686c <__errno>:
 800686c:	4b01      	ldr	r3, [pc, #4]	; (8006874 <__errno+0x8>)
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20000014 	.word	0x20000014

08006878 <__libc_init_array>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4d0d      	ldr	r5, [pc, #52]	; (80068b0 <__libc_init_array+0x38>)
 800687c:	4c0d      	ldr	r4, [pc, #52]	; (80068b4 <__libc_init_array+0x3c>)
 800687e:	1b64      	subs	r4, r4, r5
 8006880:	10a4      	asrs	r4, r4, #2
 8006882:	2600      	movs	r6, #0
 8006884:	42a6      	cmp	r6, r4
 8006886:	d109      	bne.n	800689c <__libc_init_array+0x24>
 8006888:	4d0b      	ldr	r5, [pc, #44]	; (80068b8 <__libc_init_array+0x40>)
 800688a:	4c0c      	ldr	r4, [pc, #48]	; (80068bc <__libc_init_array+0x44>)
 800688c:	f000 fc4e 	bl	800712c <_init>
 8006890:	1b64      	subs	r4, r4, r5
 8006892:	10a4      	asrs	r4, r4, #2
 8006894:	2600      	movs	r6, #0
 8006896:	42a6      	cmp	r6, r4
 8006898:	d105      	bne.n	80068a6 <__libc_init_array+0x2e>
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a0:	4798      	blx	r3
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7ee      	b.n	8006884 <__libc_init_array+0xc>
 80068a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068aa:	4798      	blx	r3
 80068ac:	3601      	adds	r6, #1
 80068ae:	e7f2      	b.n	8006896 <__libc_init_array+0x1e>
 80068b0:	080071c8 	.word	0x080071c8
 80068b4:	080071c8 	.word	0x080071c8
 80068b8:	080071c8 	.word	0x080071c8
 80068bc:	080071cc 	.word	0x080071cc

080068c0 <memset>:
 80068c0:	4402      	add	r2, r0
 80068c2:	4603      	mov	r3, r0
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d100      	bne.n	80068ca <memset+0xa>
 80068c8:	4770      	bx	lr
 80068ca:	f803 1b01 	strb.w	r1, [r3], #1
 80068ce:	e7f9      	b.n	80068c4 <memset+0x4>

080068d0 <siprintf>:
 80068d0:	b40e      	push	{r1, r2, r3}
 80068d2:	b500      	push	{lr}
 80068d4:	b09c      	sub	sp, #112	; 0x70
 80068d6:	ab1d      	add	r3, sp, #116	; 0x74
 80068d8:	9002      	str	r0, [sp, #8]
 80068da:	9006      	str	r0, [sp, #24]
 80068dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068e0:	4809      	ldr	r0, [pc, #36]	; (8006908 <siprintf+0x38>)
 80068e2:	9107      	str	r1, [sp, #28]
 80068e4:	9104      	str	r1, [sp, #16]
 80068e6:	4909      	ldr	r1, [pc, #36]	; (800690c <siprintf+0x3c>)
 80068e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ec:	9105      	str	r1, [sp, #20]
 80068ee:	6800      	ldr	r0, [r0, #0]
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	a902      	add	r1, sp, #8
 80068f4:	f000 f868 	bl	80069c8 <_svfiprintf_r>
 80068f8:	9b02      	ldr	r3, [sp, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	b01c      	add	sp, #112	; 0x70
 8006900:	f85d eb04 	ldr.w	lr, [sp], #4
 8006904:	b003      	add	sp, #12
 8006906:	4770      	bx	lr
 8006908:	20000014 	.word	0x20000014
 800690c:	ffff0208 	.word	0xffff0208

08006910 <__ssputs_r>:
 8006910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	688e      	ldr	r6, [r1, #8]
 8006916:	429e      	cmp	r6, r3
 8006918:	4682      	mov	sl, r0
 800691a:	460c      	mov	r4, r1
 800691c:	4690      	mov	r8, r2
 800691e:	461f      	mov	r7, r3
 8006920:	d838      	bhi.n	8006994 <__ssputs_r+0x84>
 8006922:	898a      	ldrh	r2, [r1, #12]
 8006924:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006928:	d032      	beq.n	8006990 <__ssputs_r+0x80>
 800692a:	6825      	ldr	r5, [r4, #0]
 800692c:	6909      	ldr	r1, [r1, #16]
 800692e:	eba5 0901 	sub.w	r9, r5, r1
 8006932:	6965      	ldr	r5, [r4, #20]
 8006934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800693c:	3301      	adds	r3, #1
 800693e:	444b      	add	r3, r9
 8006940:	106d      	asrs	r5, r5, #1
 8006942:	429d      	cmp	r5, r3
 8006944:	bf38      	it	cc
 8006946:	461d      	movcc	r5, r3
 8006948:	0553      	lsls	r3, r2, #21
 800694a:	d531      	bpl.n	80069b0 <__ssputs_r+0xa0>
 800694c:	4629      	mov	r1, r5
 800694e:	f000 fb47 	bl	8006fe0 <_malloc_r>
 8006952:	4606      	mov	r6, r0
 8006954:	b950      	cbnz	r0, 800696c <__ssputs_r+0x5c>
 8006956:	230c      	movs	r3, #12
 8006958:	f8ca 3000 	str.w	r3, [sl]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696c:	6921      	ldr	r1, [r4, #16]
 800696e:	464a      	mov	r2, r9
 8006970:	f000 fabe 	bl	8006ef0 <memcpy>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800697a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	6126      	str	r6, [r4, #16]
 8006982:	6165      	str	r5, [r4, #20]
 8006984:	444e      	add	r6, r9
 8006986:	eba5 0509 	sub.w	r5, r5, r9
 800698a:	6026      	str	r6, [r4, #0]
 800698c:	60a5      	str	r5, [r4, #8]
 800698e:	463e      	mov	r6, r7
 8006990:	42be      	cmp	r6, r7
 8006992:	d900      	bls.n	8006996 <__ssputs_r+0x86>
 8006994:	463e      	mov	r6, r7
 8006996:	4632      	mov	r2, r6
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	4641      	mov	r1, r8
 800699c:	f000 fab6 	bl	8006f0c <memmove>
 80069a0:	68a3      	ldr	r3, [r4, #8]
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	1b9b      	subs	r3, r3, r6
 80069a6:	4432      	add	r2, r6
 80069a8:	60a3      	str	r3, [r4, #8]
 80069aa:	6022      	str	r2, [r4, #0]
 80069ac:	2000      	movs	r0, #0
 80069ae:	e7db      	b.n	8006968 <__ssputs_r+0x58>
 80069b0:	462a      	mov	r2, r5
 80069b2:	f000 fb6f 	bl	8007094 <_realloc_r>
 80069b6:	4606      	mov	r6, r0
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d1e1      	bne.n	8006980 <__ssputs_r+0x70>
 80069bc:	6921      	ldr	r1, [r4, #16]
 80069be:	4650      	mov	r0, sl
 80069c0:	f000 fabe 	bl	8006f40 <_free_r>
 80069c4:	e7c7      	b.n	8006956 <__ssputs_r+0x46>
	...

080069c8 <_svfiprintf_r>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	4698      	mov	r8, r3
 80069ce:	898b      	ldrh	r3, [r1, #12]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	b09d      	sub	sp, #116	; 0x74
 80069d4:	4607      	mov	r7, r0
 80069d6:	460d      	mov	r5, r1
 80069d8:	4614      	mov	r4, r2
 80069da:	d50e      	bpl.n	80069fa <_svfiprintf_r+0x32>
 80069dc:	690b      	ldr	r3, [r1, #16]
 80069de:	b963      	cbnz	r3, 80069fa <_svfiprintf_r+0x32>
 80069e0:	2140      	movs	r1, #64	; 0x40
 80069e2:	f000 fafd 	bl	8006fe0 <_malloc_r>
 80069e6:	6028      	str	r0, [r5, #0]
 80069e8:	6128      	str	r0, [r5, #16]
 80069ea:	b920      	cbnz	r0, 80069f6 <_svfiprintf_r+0x2e>
 80069ec:	230c      	movs	r3, #12
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e0d1      	b.n	8006b9a <_svfiprintf_r+0x1d2>
 80069f6:	2340      	movs	r3, #64	; 0x40
 80069f8:	616b      	str	r3, [r5, #20]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9309      	str	r3, [sp, #36]	; 0x24
 80069fe:	2320      	movs	r3, #32
 8006a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a08:	2330      	movs	r3, #48	; 0x30
 8006a0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bb4 <_svfiprintf_r+0x1ec>
 8006a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a12:	f04f 0901 	mov.w	r9, #1
 8006a16:	4623      	mov	r3, r4
 8006a18:	469a      	mov	sl, r3
 8006a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a1e:	b10a      	cbz	r2, 8006a24 <_svfiprintf_r+0x5c>
 8006a20:	2a25      	cmp	r2, #37	; 0x25
 8006a22:	d1f9      	bne.n	8006a18 <_svfiprintf_r+0x50>
 8006a24:	ebba 0b04 	subs.w	fp, sl, r4
 8006a28:	d00b      	beq.n	8006a42 <_svfiprintf_r+0x7a>
 8006a2a:	465b      	mov	r3, fp
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff ff6d 	bl	8006910 <__ssputs_r>
 8006a36:	3001      	adds	r0, #1
 8006a38:	f000 80aa 	beq.w	8006b90 <_svfiprintf_r+0x1c8>
 8006a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a3e:	445a      	add	r2, fp
 8006a40:	9209      	str	r2, [sp, #36]	; 0x24
 8006a42:	f89a 3000 	ldrb.w	r3, [sl]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a2 	beq.w	8006b90 <_svfiprintf_r+0x1c8>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a56:	f10a 0a01 	add.w	sl, sl, #1
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	9307      	str	r3, [sp, #28]
 8006a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a62:	931a      	str	r3, [sp, #104]	; 0x68
 8006a64:	4654      	mov	r4, sl
 8006a66:	2205      	movs	r2, #5
 8006a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6c:	4851      	ldr	r0, [pc, #324]	; (8006bb4 <_svfiprintf_r+0x1ec>)
 8006a6e:	f7f9 fbb7 	bl	80001e0 <memchr>
 8006a72:	9a04      	ldr	r2, [sp, #16]
 8006a74:	b9d8      	cbnz	r0, 8006aae <_svfiprintf_r+0xe6>
 8006a76:	06d0      	lsls	r0, r2, #27
 8006a78:	bf44      	itt	mi
 8006a7a:	2320      	movmi	r3, #32
 8006a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a80:	0711      	lsls	r1, r2, #28
 8006a82:	bf44      	itt	mi
 8006a84:	232b      	movmi	r3, #43	; 0x2b
 8006a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a90:	d015      	beq.n	8006abe <_svfiprintf_r+0xf6>
 8006a92:	9a07      	ldr	r2, [sp, #28]
 8006a94:	4654      	mov	r4, sl
 8006a96:	2000      	movs	r0, #0
 8006a98:	f04f 0c0a 	mov.w	ip, #10
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa2:	3b30      	subs	r3, #48	; 0x30
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	d94e      	bls.n	8006b46 <_svfiprintf_r+0x17e>
 8006aa8:	b1b0      	cbz	r0, 8006ad8 <_svfiprintf_r+0x110>
 8006aaa:	9207      	str	r2, [sp, #28]
 8006aac:	e014      	b.n	8006ad8 <_svfiprintf_r+0x110>
 8006aae:	eba0 0308 	sub.w	r3, r0, r8
 8006ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	9304      	str	r3, [sp, #16]
 8006aba:	46a2      	mov	sl, r4
 8006abc:	e7d2      	b.n	8006a64 <_svfiprintf_r+0x9c>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	1d19      	adds	r1, r3, #4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	9103      	str	r1, [sp, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bfbb      	ittet	lt
 8006aca:	425b      	neglt	r3, r3
 8006acc:	f042 0202 	orrlt.w	r2, r2, #2
 8006ad0:	9307      	strge	r3, [sp, #28]
 8006ad2:	9307      	strlt	r3, [sp, #28]
 8006ad4:	bfb8      	it	lt
 8006ad6:	9204      	strlt	r2, [sp, #16]
 8006ad8:	7823      	ldrb	r3, [r4, #0]
 8006ada:	2b2e      	cmp	r3, #46	; 0x2e
 8006adc:	d10c      	bne.n	8006af8 <_svfiprintf_r+0x130>
 8006ade:	7863      	ldrb	r3, [r4, #1]
 8006ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae2:	d135      	bne.n	8006b50 <_svfiprintf_r+0x188>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	9203      	str	r2, [sp, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bfb8      	it	lt
 8006af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006af4:	3402      	adds	r4, #2
 8006af6:	9305      	str	r3, [sp, #20]
 8006af8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bc4 <_svfiprintf_r+0x1fc>
 8006afc:	7821      	ldrb	r1, [r4, #0]
 8006afe:	2203      	movs	r2, #3
 8006b00:	4650      	mov	r0, sl
 8006b02:	f7f9 fb6d 	bl	80001e0 <memchr>
 8006b06:	b140      	cbz	r0, 8006b1a <_svfiprintf_r+0x152>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	eba0 000a 	sub.w	r0, r0, sl
 8006b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b12:	9b04      	ldr	r3, [sp, #16]
 8006b14:	4303      	orrs	r3, r0
 8006b16:	3401      	adds	r4, #1
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b1e:	4826      	ldr	r0, [pc, #152]	; (8006bb8 <_svfiprintf_r+0x1f0>)
 8006b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b24:	2206      	movs	r2, #6
 8006b26:	f7f9 fb5b 	bl	80001e0 <memchr>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d038      	beq.n	8006ba0 <_svfiprintf_r+0x1d8>
 8006b2e:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <_svfiprintf_r+0x1f4>)
 8006b30:	bb1b      	cbnz	r3, 8006b7a <_svfiprintf_r+0x1b2>
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	3307      	adds	r3, #7
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	4433      	add	r3, r6
 8006b42:	9309      	str	r3, [sp, #36]	; 0x24
 8006b44:	e767      	b.n	8006a16 <_svfiprintf_r+0x4e>
 8006b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	e7a5      	b.n	8006a9c <_svfiprintf_r+0xd4>
 8006b50:	2300      	movs	r3, #0
 8006b52:	3401      	adds	r4, #1
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	4619      	mov	r1, r3
 8006b58:	f04f 0c0a 	mov.w	ip, #10
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b62:	3a30      	subs	r2, #48	; 0x30
 8006b64:	2a09      	cmp	r2, #9
 8006b66:	d903      	bls.n	8006b70 <_svfiprintf_r+0x1a8>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0c5      	beq.n	8006af8 <_svfiprintf_r+0x130>
 8006b6c:	9105      	str	r1, [sp, #20]
 8006b6e:	e7c3      	b.n	8006af8 <_svfiprintf_r+0x130>
 8006b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b74:	4604      	mov	r4, r0
 8006b76:	2301      	movs	r3, #1
 8006b78:	e7f0      	b.n	8006b5c <_svfiprintf_r+0x194>
 8006b7a:	ab03      	add	r3, sp, #12
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	462a      	mov	r2, r5
 8006b80:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <_svfiprintf_r+0x1f8>)
 8006b82:	a904      	add	r1, sp, #16
 8006b84:	4638      	mov	r0, r7
 8006b86:	f3af 8000 	nop.w
 8006b8a:	1c42      	adds	r2, r0, #1
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	d1d6      	bne.n	8006b3e <_svfiprintf_r+0x176>
 8006b90:	89ab      	ldrh	r3, [r5, #12]
 8006b92:	065b      	lsls	r3, r3, #25
 8006b94:	f53f af2c 	bmi.w	80069f0 <_svfiprintf_r+0x28>
 8006b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9a:	b01d      	add	sp, #116	; 0x74
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	ab03      	add	r3, sp, #12
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <_svfiprintf_r+0x1f8>)
 8006ba8:	a904      	add	r1, sp, #16
 8006baa:	4638      	mov	r0, r7
 8006bac:	f000 f87a 	bl	8006ca4 <_printf_i>
 8006bb0:	e7eb      	b.n	8006b8a <_svfiprintf_r+0x1c2>
 8006bb2:	bf00      	nop
 8006bb4:	0800718c 	.word	0x0800718c
 8006bb8:	08007196 	.word	0x08007196
 8006bbc:	00000000 	.word	0x00000000
 8006bc0:	08006911 	.word	0x08006911
 8006bc4:	08007192 	.word	0x08007192

08006bc8 <_printf_common>:
 8006bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	4616      	mov	r6, r2
 8006bce:	4699      	mov	r9, r3
 8006bd0:	688a      	ldr	r2, [r1, #8]
 8006bd2:	690b      	ldr	r3, [r1, #16]
 8006bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	bfb8      	it	lt
 8006bdc:	4613      	movlt	r3, r2
 8006bde:	6033      	str	r3, [r6, #0]
 8006be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be4:	4607      	mov	r7, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	b10a      	cbz	r2, 8006bee <_printf_common+0x26>
 8006bea:	3301      	adds	r3, #1
 8006bec:	6033      	str	r3, [r6, #0]
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	0699      	lsls	r1, r3, #26
 8006bf2:	bf42      	ittt	mi
 8006bf4:	6833      	ldrmi	r3, [r6, #0]
 8006bf6:	3302      	addmi	r3, #2
 8006bf8:	6033      	strmi	r3, [r6, #0]
 8006bfa:	6825      	ldr	r5, [r4, #0]
 8006bfc:	f015 0506 	ands.w	r5, r5, #6
 8006c00:	d106      	bne.n	8006c10 <_printf_common+0x48>
 8006c02:	f104 0a19 	add.w	sl, r4, #25
 8006c06:	68e3      	ldr	r3, [r4, #12]
 8006c08:	6832      	ldr	r2, [r6, #0]
 8006c0a:	1a9b      	subs	r3, r3, r2
 8006c0c:	42ab      	cmp	r3, r5
 8006c0e:	dc26      	bgt.n	8006c5e <_printf_common+0x96>
 8006c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c14:	1e13      	subs	r3, r2, #0
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	bf18      	it	ne
 8006c1a:	2301      	movne	r3, #1
 8006c1c:	0692      	lsls	r2, r2, #26
 8006c1e:	d42b      	bmi.n	8006c78 <_printf_common+0xb0>
 8006c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c24:	4649      	mov	r1, r9
 8006c26:	4638      	mov	r0, r7
 8006c28:	47c0      	blx	r8
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d01e      	beq.n	8006c6c <_printf_common+0xa4>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	68e5      	ldr	r5, [r4, #12]
 8006c32:	6832      	ldr	r2, [r6, #0]
 8006c34:	f003 0306 	and.w	r3, r3, #6
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	bf08      	it	eq
 8006c3c:	1aad      	subeq	r5, r5, r2
 8006c3e:	68a3      	ldr	r3, [r4, #8]
 8006c40:	6922      	ldr	r2, [r4, #16]
 8006c42:	bf0c      	ite	eq
 8006c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c48:	2500      	movne	r5, #0
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	bfc4      	itt	gt
 8006c4e:	1a9b      	subgt	r3, r3, r2
 8006c50:	18ed      	addgt	r5, r5, r3
 8006c52:	2600      	movs	r6, #0
 8006c54:	341a      	adds	r4, #26
 8006c56:	42b5      	cmp	r5, r6
 8006c58:	d11a      	bne.n	8006c90 <_printf_common+0xc8>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e008      	b.n	8006c70 <_printf_common+0xa8>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4652      	mov	r2, sl
 8006c62:	4649      	mov	r1, r9
 8006c64:	4638      	mov	r0, r7
 8006c66:	47c0      	blx	r8
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d103      	bne.n	8006c74 <_printf_common+0xac>
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c74:	3501      	adds	r5, #1
 8006c76:	e7c6      	b.n	8006c06 <_printf_common+0x3e>
 8006c78:	18e1      	adds	r1, r4, r3
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	2030      	movs	r0, #48	; 0x30
 8006c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c82:	4422      	add	r2, r4
 8006c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	e7c7      	b.n	8006c20 <_printf_common+0x58>
 8006c90:	2301      	movs	r3, #1
 8006c92:	4622      	mov	r2, r4
 8006c94:	4649      	mov	r1, r9
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c0      	blx	r8
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d0e6      	beq.n	8006c6c <_printf_common+0xa4>
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7d9      	b.n	8006c56 <_printf_common+0x8e>
	...

08006ca4 <_printf_i>:
 8006ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	4691      	mov	r9, r2
 8006cac:	7e27      	ldrb	r7, [r4, #24]
 8006cae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cb0:	2f78      	cmp	r7, #120	; 0x78
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	469a      	mov	sl, r3
 8006cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cba:	d807      	bhi.n	8006ccc <_printf_i+0x28>
 8006cbc:	2f62      	cmp	r7, #98	; 0x62
 8006cbe:	d80a      	bhi.n	8006cd6 <_printf_i+0x32>
 8006cc0:	2f00      	cmp	r7, #0
 8006cc2:	f000 80d8 	beq.w	8006e76 <_printf_i+0x1d2>
 8006cc6:	2f58      	cmp	r7, #88	; 0x58
 8006cc8:	f000 80a3 	beq.w	8006e12 <_printf_i+0x16e>
 8006ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cd4:	e03a      	b.n	8006d4c <_printf_i+0xa8>
 8006cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cda:	2b15      	cmp	r3, #21
 8006cdc:	d8f6      	bhi.n	8006ccc <_printf_i+0x28>
 8006cde:	a001      	add	r0, pc, #4	; (adr r0, 8006ce4 <_printf_i+0x40>)
 8006ce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ce4:	08006d3d 	.word	0x08006d3d
 8006ce8:	08006d51 	.word	0x08006d51
 8006cec:	08006ccd 	.word	0x08006ccd
 8006cf0:	08006ccd 	.word	0x08006ccd
 8006cf4:	08006ccd 	.word	0x08006ccd
 8006cf8:	08006ccd 	.word	0x08006ccd
 8006cfc:	08006d51 	.word	0x08006d51
 8006d00:	08006ccd 	.word	0x08006ccd
 8006d04:	08006ccd 	.word	0x08006ccd
 8006d08:	08006ccd 	.word	0x08006ccd
 8006d0c:	08006ccd 	.word	0x08006ccd
 8006d10:	08006e5d 	.word	0x08006e5d
 8006d14:	08006d81 	.word	0x08006d81
 8006d18:	08006e3f 	.word	0x08006e3f
 8006d1c:	08006ccd 	.word	0x08006ccd
 8006d20:	08006ccd 	.word	0x08006ccd
 8006d24:	08006e7f 	.word	0x08006e7f
 8006d28:	08006ccd 	.word	0x08006ccd
 8006d2c:	08006d81 	.word	0x08006d81
 8006d30:	08006ccd 	.word	0x08006ccd
 8006d34:	08006ccd 	.word	0x08006ccd
 8006d38:	08006e47 	.word	0x08006e47
 8006d3c:	680b      	ldr	r3, [r1, #0]
 8006d3e:	1d1a      	adds	r2, r3, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	600a      	str	r2, [r1, #0]
 8006d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0a3      	b.n	8006e98 <_printf_i+0x1f4>
 8006d50:	6825      	ldr	r5, [r4, #0]
 8006d52:	6808      	ldr	r0, [r1, #0]
 8006d54:	062e      	lsls	r6, r5, #24
 8006d56:	f100 0304 	add.w	r3, r0, #4
 8006d5a:	d50a      	bpl.n	8006d72 <_printf_i+0xce>
 8006d5c:	6805      	ldr	r5, [r0, #0]
 8006d5e:	600b      	str	r3, [r1, #0]
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	da03      	bge.n	8006d6c <_printf_i+0xc8>
 8006d64:	232d      	movs	r3, #45	; 0x2d
 8006d66:	426d      	negs	r5, r5
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	485e      	ldr	r0, [pc, #376]	; (8006ee8 <_printf_i+0x244>)
 8006d6e:	230a      	movs	r3, #10
 8006d70:	e019      	b.n	8006da6 <_printf_i+0x102>
 8006d72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d76:	6805      	ldr	r5, [r0, #0]
 8006d78:	600b      	str	r3, [r1, #0]
 8006d7a:	bf18      	it	ne
 8006d7c:	b22d      	sxthne	r5, r5
 8006d7e:	e7ef      	b.n	8006d60 <_printf_i+0xbc>
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	6825      	ldr	r5, [r4, #0]
 8006d84:	1d18      	adds	r0, r3, #4
 8006d86:	6008      	str	r0, [r1, #0]
 8006d88:	0628      	lsls	r0, r5, #24
 8006d8a:	d501      	bpl.n	8006d90 <_printf_i+0xec>
 8006d8c:	681d      	ldr	r5, [r3, #0]
 8006d8e:	e002      	b.n	8006d96 <_printf_i+0xf2>
 8006d90:	0669      	lsls	r1, r5, #25
 8006d92:	d5fb      	bpl.n	8006d8c <_printf_i+0xe8>
 8006d94:	881d      	ldrh	r5, [r3, #0]
 8006d96:	4854      	ldr	r0, [pc, #336]	; (8006ee8 <_printf_i+0x244>)
 8006d98:	2f6f      	cmp	r7, #111	; 0x6f
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2308      	moveq	r3, #8
 8006d9e:	230a      	movne	r3, #10
 8006da0:	2100      	movs	r1, #0
 8006da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006da6:	6866      	ldr	r6, [r4, #4]
 8006da8:	60a6      	str	r6, [r4, #8]
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	bfa2      	ittt	ge
 8006dae:	6821      	ldrge	r1, [r4, #0]
 8006db0:	f021 0104 	bicge.w	r1, r1, #4
 8006db4:	6021      	strge	r1, [r4, #0]
 8006db6:	b90d      	cbnz	r5, 8006dbc <_printf_i+0x118>
 8006db8:	2e00      	cmp	r6, #0
 8006dba:	d04d      	beq.n	8006e58 <_printf_i+0x1b4>
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8006dc6:	5dc7      	ldrb	r7, [r0, r7]
 8006dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dcc:	462f      	mov	r7, r5
 8006dce:	42bb      	cmp	r3, r7
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	d9f4      	bls.n	8006dbe <_printf_i+0x11a>
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d10b      	bne.n	8006df0 <_printf_i+0x14c>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	07df      	lsls	r7, r3, #31
 8006ddc:	d508      	bpl.n	8006df0 <_printf_i+0x14c>
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	6861      	ldr	r1, [r4, #4]
 8006de2:	4299      	cmp	r1, r3
 8006de4:	bfde      	ittt	le
 8006de6:	2330      	movle	r3, #48	; 0x30
 8006de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006df0:	1b92      	subs	r2, r2, r6
 8006df2:	6122      	str	r2, [r4, #16]
 8006df4:	f8cd a000 	str.w	sl, [sp]
 8006df8:	464b      	mov	r3, r9
 8006dfa:	aa03      	add	r2, sp, #12
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4640      	mov	r0, r8
 8006e00:	f7ff fee2 	bl	8006bc8 <_printf_common>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d14c      	bne.n	8006ea2 <_printf_i+0x1fe>
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0c:	b004      	add	sp, #16
 8006e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e12:	4835      	ldr	r0, [pc, #212]	; (8006ee8 <_printf_i+0x244>)
 8006e14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	680e      	ldr	r6, [r1, #0]
 8006e1c:	061f      	lsls	r7, r3, #24
 8006e1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e22:	600e      	str	r6, [r1, #0]
 8006e24:	d514      	bpl.n	8006e50 <_printf_i+0x1ac>
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	bf44      	itt	mi
 8006e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e2e:	6023      	strmi	r3, [r4, #0]
 8006e30:	b91d      	cbnz	r5, 8006e3a <_printf_i+0x196>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f023 0320 	bic.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	e7b0      	b.n	8006da0 <_printf_i+0xfc>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	f043 0320 	orr.w	r3, r3, #32
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	2378      	movs	r3, #120	; 0x78
 8006e48:	4828      	ldr	r0, [pc, #160]	; (8006eec <_printf_i+0x248>)
 8006e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e4e:	e7e3      	b.n	8006e18 <_printf_i+0x174>
 8006e50:	065e      	lsls	r6, r3, #25
 8006e52:	bf48      	it	mi
 8006e54:	b2ad      	uxthmi	r5, r5
 8006e56:	e7e6      	b.n	8006e26 <_printf_i+0x182>
 8006e58:	4616      	mov	r6, r2
 8006e5a:	e7bb      	b.n	8006dd4 <_printf_i+0x130>
 8006e5c:	680b      	ldr	r3, [r1, #0]
 8006e5e:	6826      	ldr	r6, [r4, #0]
 8006e60:	6960      	ldr	r0, [r4, #20]
 8006e62:	1d1d      	adds	r5, r3, #4
 8006e64:	600d      	str	r5, [r1, #0]
 8006e66:	0635      	lsls	r5, r6, #24
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0x1cc>
 8006e6c:	6018      	str	r0, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <_printf_i+0x1d2>
 8006e70:	0671      	lsls	r1, r6, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0x1c8>
 8006e74:	8018      	strh	r0, [r3, #0]
 8006e76:	2300      	movs	r3, #0
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	4616      	mov	r6, r2
 8006e7c:	e7ba      	b.n	8006df4 <_printf_i+0x150>
 8006e7e:	680b      	ldr	r3, [r1, #0]
 8006e80:	1d1a      	adds	r2, r3, #4
 8006e82:	600a      	str	r2, [r1, #0]
 8006e84:	681e      	ldr	r6, [r3, #0]
 8006e86:	6862      	ldr	r2, [r4, #4]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7f9 f9a8 	bl	80001e0 <memchr>
 8006e90:	b108      	cbz	r0, 8006e96 <_printf_i+0x1f2>
 8006e92:	1b80      	subs	r0, r0, r6
 8006e94:	6060      	str	r0, [r4, #4]
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea0:	e7a8      	b.n	8006df4 <_printf_i+0x150>
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	47d0      	blx	sl
 8006eac:	3001      	adds	r0, #1
 8006eae:	d0ab      	beq.n	8006e08 <_printf_i+0x164>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	079b      	lsls	r3, r3, #30
 8006eb4:	d413      	bmi.n	8006ede <_printf_i+0x23a>
 8006eb6:	68e0      	ldr	r0, [r4, #12]
 8006eb8:	9b03      	ldr	r3, [sp, #12]
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	bfb8      	it	lt
 8006ebe:	4618      	movlt	r0, r3
 8006ec0:	e7a4      	b.n	8006e0c <_printf_i+0x168>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	47d0      	blx	sl
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d09b      	beq.n	8006e08 <_printf_i+0x164>
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	9903      	ldr	r1, [sp, #12]
 8006ed6:	1a5b      	subs	r3, r3, r1
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	dcf2      	bgt.n	8006ec2 <_printf_i+0x21e>
 8006edc:	e7eb      	b.n	8006eb6 <_printf_i+0x212>
 8006ede:	2500      	movs	r5, #0
 8006ee0:	f104 0619 	add.w	r6, r4, #25
 8006ee4:	e7f5      	b.n	8006ed2 <_printf_i+0x22e>
 8006ee6:	bf00      	nop
 8006ee8:	0800719d 	.word	0x0800719d
 8006eec:	080071ae 	.word	0x080071ae

08006ef0 <memcpy>:
 8006ef0:	440a      	add	r2, r1
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef8:	d100      	bne.n	8006efc <memcpy+0xc>
 8006efa:	4770      	bx	lr
 8006efc:	b510      	push	{r4, lr}
 8006efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f06:	4291      	cmp	r1, r2
 8006f08:	d1f9      	bne.n	8006efe <memcpy+0xe>
 8006f0a:	bd10      	pop	{r4, pc}

08006f0c <memmove>:
 8006f0c:	4288      	cmp	r0, r1
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	eb01 0402 	add.w	r4, r1, r2
 8006f14:	d902      	bls.n	8006f1c <memmove+0x10>
 8006f16:	4284      	cmp	r4, r0
 8006f18:	4623      	mov	r3, r4
 8006f1a:	d807      	bhi.n	8006f2c <memmove+0x20>
 8006f1c:	1e43      	subs	r3, r0, #1
 8006f1e:	42a1      	cmp	r1, r4
 8006f20:	d008      	beq.n	8006f34 <memmove+0x28>
 8006f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f2a:	e7f8      	b.n	8006f1e <memmove+0x12>
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4601      	mov	r1, r0
 8006f30:	428a      	cmp	r2, r1
 8006f32:	d100      	bne.n	8006f36 <memmove+0x2a>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f3e:	e7f7      	b.n	8006f30 <memmove+0x24>

08006f40 <_free_r>:
 8006f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d048      	beq.n	8006fd8 <_free_r+0x98>
 8006f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f4a:	9001      	str	r0, [sp, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f52:	bfb8      	it	lt
 8006f54:	18e4      	addlt	r4, r4, r3
 8006f56:	f000 f8d3 	bl	8007100 <__malloc_lock>
 8006f5a:	4a20      	ldr	r2, [pc, #128]	; (8006fdc <_free_r+0x9c>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	4615      	mov	r5, r2
 8006f62:	b933      	cbnz	r3, 8006f72 <_free_r+0x32>
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	6014      	str	r4, [r2, #0]
 8006f68:	b003      	add	sp, #12
 8006f6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f6e:	f000 b8cd 	b.w	800710c <__malloc_unlock>
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	d90b      	bls.n	8006f8e <_free_r+0x4e>
 8006f76:	6821      	ldr	r1, [r4, #0]
 8006f78:	1862      	adds	r2, r4, r1
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	bf04      	itt	eq
 8006f7e:	681a      	ldreq	r2, [r3, #0]
 8006f80:	685b      	ldreq	r3, [r3, #4]
 8006f82:	6063      	str	r3, [r4, #4]
 8006f84:	bf04      	itt	eq
 8006f86:	1852      	addeq	r2, r2, r1
 8006f88:	6022      	streq	r2, [r4, #0]
 8006f8a:	602c      	str	r4, [r5, #0]
 8006f8c:	e7ec      	b.n	8006f68 <_free_r+0x28>
 8006f8e:	461a      	mov	r2, r3
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	b10b      	cbz	r3, 8006f98 <_free_r+0x58>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d9fa      	bls.n	8006f8e <_free_r+0x4e>
 8006f98:	6811      	ldr	r1, [r2, #0]
 8006f9a:	1855      	adds	r5, r2, r1
 8006f9c:	42a5      	cmp	r5, r4
 8006f9e:	d10b      	bne.n	8006fb8 <_free_r+0x78>
 8006fa0:	6824      	ldr	r4, [r4, #0]
 8006fa2:	4421      	add	r1, r4
 8006fa4:	1854      	adds	r4, r2, r1
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	d1dd      	bne.n	8006f68 <_free_r+0x28>
 8006fac:	681c      	ldr	r4, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	6053      	str	r3, [r2, #4]
 8006fb2:	4421      	add	r1, r4
 8006fb4:	6011      	str	r1, [r2, #0]
 8006fb6:	e7d7      	b.n	8006f68 <_free_r+0x28>
 8006fb8:	d902      	bls.n	8006fc0 <_free_r+0x80>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	e7d3      	b.n	8006f68 <_free_r+0x28>
 8006fc0:	6825      	ldr	r5, [r4, #0]
 8006fc2:	1961      	adds	r1, r4, r5
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	bf04      	itt	eq
 8006fc8:	6819      	ldreq	r1, [r3, #0]
 8006fca:	685b      	ldreq	r3, [r3, #4]
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	bf04      	itt	eq
 8006fd0:	1949      	addeq	r1, r1, r5
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	6054      	str	r4, [r2, #4]
 8006fd6:	e7c7      	b.n	8006f68 <_free_r+0x28>
 8006fd8:	b003      	add	sp, #12
 8006fda:	bd30      	pop	{r4, r5, pc}
 8006fdc:	200000a4 	.word	0x200000a4

08006fe0 <_malloc_r>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	1ccd      	adds	r5, r1, #3
 8006fe4:	f025 0503 	bic.w	r5, r5, #3
 8006fe8:	3508      	adds	r5, #8
 8006fea:	2d0c      	cmp	r5, #12
 8006fec:	bf38      	it	cc
 8006fee:	250c      	movcc	r5, #12
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	db01      	blt.n	8006ffa <_malloc_r+0x1a>
 8006ff6:	42a9      	cmp	r1, r5
 8006ff8:	d903      	bls.n	8007002 <_malloc_r+0x22>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	6033      	str	r3, [r6, #0]
 8006ffe:	2000      	movs	r0, #0
 8007000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007002:	f000 f87d 	bl	8007100 <__malloc_lock>
 8007006:	4921      	ldr	r1, [pc, #132]	; (800708c <_malloc_r+0xac>)
 8007008:	680a      	ldr	r2, [r1, #0]
 800700a:	4614      	mov	r4, r2
 800700c:	b99c      	cbnz	r4, 8007036 <_malloc_r+0x56>
 800700e:	4f20      	ldr	r7, [pc, #128]	; (8007090 <_malloc_r+0xb0>)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	b923      	cbnz	r3, 800701e <_malloc_r+0x3e>
 8007014:	4621      	mov	r1, r4
 8007016:	4630      	mov	r0, r6
 8007018:	f000 f862 	bl	80070e0 <_sbrk_r>
 800701c:	6038      	str	r0, [r7, #0]
 800701e:	4629      	mov	r1, r5
 8007020:	4630      	mov	r0, r6
 8007022:	f000 f85d 	bl	80070e0 <_sbrk_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d123      	bne.n	8007072 <_malloc_r+0x92>
 800702a:	230c      	movs	r3, #12
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	4630      	mov	r0, r6
 8007030:	f000 f86c 	bl	800710c <__malloc_unlock>
 8007034:	e7e3      	b.n	8006ffe <_malloc_r+0x1e>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	1b5b      	subs	r3, r3, r5
 800703a:	d417      	bmi.n	800706c <_malloc_r+0x8c>
 800703c:	2b0b      	cmp	r3, #11
 800703e:	d903      	bls.n	8007048 <_malloc_r+0x68>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	441c      	add	r4, r3
 8007044:	6025      	str	r5, [r4, #0]
 8007046:	e004      	b.n	8007052 <_malloc_r+0x72>
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	42a2      	cmp	r2, r4
 800704c:	bf0c      	ite	eq
 800704e:	600b      	streq	r3, [r1, #0]
 8007050:	6053      	strne	r3, [r2, #4]
 8007052:	4630      	mov	r0, r6
 8007054:	f000 f85a 	bl	800710c <__malloc_unlock>
 8007058:	f104 000b 	add.w	r0, r4, #11
 800705c:	1d23      	adds	r3, r4, #4
 800705e:	f020 0007 	bic.w	r0, r0, #7
 8007062:	1ac2      	subs	r2, r0, r3
 8007064:	d0cc      	beq.n	8007000 <_malloc_r+0x20>
 8007066:	1a1b      	subs	r3, r3, r0
 8007068:	50a3      	str	r3, [r4, r2]
 800706a:	e7c9      	b.n	8007000 <_malloc_r+0x20>
 800706c:	4622      	mov	r2, r4
 800706e:	6864      	ldr	r4, [r4, #4]
 8007070:	e7cc      	b.n	800700c <_malloc_r+0x2c>
 8007072:	1cc4      	adds	r4, r0, #3
 8007074:	f024 0403 	bic.w	r4, r4, #3
 8007078:	42a0      	cmp	r0, r4
 800707a:	d0e3      	beq.n	8007044 <_malloc_r+0x64>
 800707c:	1a21      	subs	r1, r4, r0
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f82e 	bl	80070e0 <_sbrk_r>
 8007084:	3001      	adds	r0, #1
 8007086:	d1dd      	bne.n	8007044 <_malloc_r+0x64>
 8007088:	e7cf      	b.n	800702a <_malloc_r+0x4a>
 800708a:	bf00      	nop
 800708c:	200000a4 	.word	0x200000a4
 8007090:	200000a8 	.word	0x200000a8

08007094 <_realloc_r>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	4607      	mov	r7, r0
 8007098:	4614      	mov	r4, r2
 800709a:	460e      	mov	r6, r1
 800709c:	b921      	cbnz	r1, 80070a8 <_realloc_r+0x14>
 800709e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070a2:	4611      	mov	r1, r2
 80070a4:	f7ff bf9c 	b.w	8006fe0 <_malloc_r>
 80070a8:	b922      	cbnz	r2, 80070b4 <_realloc_r+0x20>
 80070aa:	f7ff ff49 	bl	8006f40 <_free_r>
 80070ae:	4625      	mov	r5, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b4:	f000 f830 	bl	8007118 <_malloc_usable_size_r>
 80070b8:	42a0      	cmp	r0, r4
 80070ba:	d20f      	bcs.n	80070dc <_realloc_r+0x48>
 80070bc:	4621      	mov	r1, r4
 80070be:	4638      	mov	r0, r7
 80070c0:	f7ff ff8e 	bl	8006fe0 <_malloc_r>
 80070c4:	4605      	mov	r5, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d0f2      	beq.n	80070b0 <_realloc_r+0x1c>
 80070ca:	4631      	mov	r1, r6
 80070cc:	4622      	mov	r2, r4
 80070ce:	f7ff ff0f 	bl	8006ef0 <memcpy>
 80070d2:	4631      	mov	r1, r6
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff ff33 	bl	8006f40 <_free_r>
 80070da:	e7e9      	b.n	80070b0 <_realloc_r+0x1c>
 80070dc:	4635      	mov	r5, r6
 80070de:	e7e7      	b.n	80070b0 <_realloc_r+0x1c>

080070e0 <_sbrk_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	; (80070fc <_sbrk_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7fa f9ae 	bl	800144c <_sbrk>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_sbrk_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_sbrk_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20000384 	.word	0x20000384

08007100 <__malloc_lock>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__malloc_lock+0x8>)
 8007102:	f000 b811 	b.w	8007128 <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	2000038c 	.word	0x2000038c

0800710c <__malloc_unlock>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__malloc_unlock+0x8>)
 800710e:	f000 b80c 	b.w	800712a <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	2000038c 	.word	0x2000038c

08007118 <_malloc_usable_size_r>:
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f18      	subs	r0, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfbc      	itt	lt
 8007122:	580b      	ldrlt	r3, [r1, r0]
 8007124:	18c0      	addlt	r0, r0, r3
 8007126:	4770      	bx	lr

08007128 <__retarget_lock_acquire_recursive>:
 8007128:	4770      	bx	lr

0800712a <__retarget_lock_release_recursive>:
 800712a:	4770      	bx	lr

0800712c <_init>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr

08007138 <_fini>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr
