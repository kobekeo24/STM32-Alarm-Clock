
STM32-Alarm-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000570c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b4  080058b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058bc  080058bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  2000000c  080058d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  080058d0  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7ce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e17  00000000  00000000  0002f80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ec1  00000000  00000000  00032aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dac1  00000000  00000000  00053969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5d87  00000000  00000000  0006142a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001271b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b04  00000000  00000000  00127204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800587c 	.word	0x0800587c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800587c 	.word	0x0800587c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <OLED_BEGIN>:
#include <stdlib.h>

static uint8_t g_frame[8][128];

void OLED_BEGIN(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	uint8_t I2CBuff[2];

	//display off
	I2CBuff[0] = 0x00;
 80004c6:	2300      	movs	r3, #0
 80004c8:	713b      	strb	r3, [r7, #4]
	I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 80004ca:	23ae      	movs	r3, #174	; 0xae
 80004cc:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f886 	bl	80005e4 <OLED_Write_Command>
	//memory mode: horizontal addressing
	I2CBuff[1] = 0x20;	//memory mode
 80004d8:	2320      	movs	r3, #32
 80004da:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2102      	movs	r1, #2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f87f 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x00;	//vertical addressing start
 80004e6:	2300      	movs	r3, #0
 80004e8:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2102      	movs	r1, #2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f878 	bl	80005e4 <OLED_Write_Command>

	I2CBuff[1] = 0x21;	//memory mode
 80004f4:	2321      	movs	r3, #33	; 0x21
 80004f6:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2102      	movs	r1, #2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f871 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x00;	//vertical addressing start
 8000502:	2300      	movs	r3, #0
 8000504:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2102      	movs	r1, #2
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f86a 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x7F;	//vertical addressing end
 8000510:	237f      	movs	r3, #127	; 0x7f
 8000512:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2102      	movs	r1, #2
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f863 	bl	80005e4 <OLED_Write_Command>

	I2CBuff[1] = 0x22;	//memory mode
 800051e:	2322      	movs	r3, #34	; 0x22
 8000520:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2102      	movs	r1, #2
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f85c 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x00;	//vertical addressing start
 800052c:	2300      	movs	r3, #0
 800052e:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2102      	movs	r1, #2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f855 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x07;	//vertical addressing end
 800053a:	2307      	movs	r3, #7
 800053c:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2102      	movs	r1, #2
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f84e 	bl	80005e4 <OLED_Write_Command>

	//scan starting line
	I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2102      	movs	r1, #2
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f847 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 8000556:	2300      	movs	r3, #0
 8000558:	717b      	strb	r3, [r7, #5]
	//charge pump on (2 commands)
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2102      	movs	r1, #2
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f840 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x8D;
 8000564:	238d      	movs	r3, #141	; 0x8d
 8000566:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2102      	movs	r1, #2
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f839 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x14;
 8000572:	2314      	movs	r3, #20
 8000574:	717b      	strb	r3, [r7, #5]

	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2102      	movs	r1, #2
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f832 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 8000580:	23a4      	movs	r3, #164	; 0xa4
 8000582:	717b      	strb	r3, [r7, #5]
	//display on
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2102      	movs	r1, #2
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f82b 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 800058e:	23af      	movs	r3, #175	; 0xaf
 8000590:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f824 	bl	80005e4 <OLED_Write_Command>

	for(int r = 0; r < 8; r++)
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	e016      	b.n	80005d0 <OLED_BEGIN+0x110>
	{
		for(int c = 0; c < 128; c++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	e00d      	b.n	80005c4 <OLED_BEGIN+0x104>
		{
			//pixel(c,r,0);	//problem!

			OLED_Draw(0x00);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 f831 	bl	8000610 <OLED_Draw>
			g_frame[r][c] = 0x00;
 80005ae:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <OLED_BEGIN+0x120>)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	01db      	lsls	r3, r3, #7
 80005b4:	441a      	add	r2, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4413      	add	r3, r2
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
		for(int c = 0; c < 128; c++)
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	2b7f      	cmp	r3, #127	; 0x7f
 80005c8:	ddee      	ble.n	80005a8 <OLED_BEGIN+0xe8>
	for(int r = 0; r < 8; r++)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	dde5      	ble.n	80005a2 <OLED_BEGIN+0xe2>
		}
	}
}
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000028 	.word	0x20000028

080005e4 <OLED_Write_Command>:

void OLED_Write_Command(uint8_t* command, uint8_t buffer_length)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c1,OLED_ADDRESS_32H,command,buffer_length,10);
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	220a      	movs	r2, #10
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	2178      	movs	r1, #120	; 0x78
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <OLED_Write_Command+0x28>)
 80005fe:	f001 fd65 	bl	80020cc <HAL_I2C_Master_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000494 	.word	0x20000494

08000610 <OLED_Draw>:

void OLED_Draw(uint8_t display_bit)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af02      	add	r7, sp, #8
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	static uint8_t buffer[2];
	buffer[0] = 0x40;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <OLED_Draw+0x30>)
 800061c:	2240      	movs	r2, #64	; 0x40
 800061e:	701a      	strb	r2, [r3, #0]
	buffer[1] = display_bit;
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <OLED_Draw+0x30>)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	7053      	strb	r3, [r2, #1]

	HAL_I2C_Master_Transmit(&hi2c1,OLED_ADDRESS_32H,buffer,2,10);
 8000626:	230a      	movs	r3, #10
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2302      	movs	r3, #2
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <OLED_Draw+0x30>)
 800062e:	2178      	movs	r1, #120	; 0x78
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <OLED_Draw+0x34>)
 8000632:	f001 fd4b 	bl	80020cc <HAL_I2C_Master_Transmit>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000428 	.word	0x20000428
 8000644:	20000494 	.word	0x20000494

08000648 <OLED_Draw_Colon>:

void OLED_Draw_Colon(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
	uint8_t I2CBuff[2];

	I2CBuff[0] = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	713b      	strb	r3, [r7, #4]
	I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 8000652:	23ae      	movs	r3, #174	; 0xae
 8000654:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffc2 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x21;	//memory mode
 8000660:	2321      	movs	r3, #33	; 0x21
 8000662:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffbb 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x40;	//vertical addressing start
 800066e:	2340      	movs	r3, #64	; 0x40
 8000670:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffb4 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x46;	//vertical addressing end
 800067c:	2346      	movs	r3, #70	; 0x46
 800067e:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2102      	movs	r1, #2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ffad 	bl	80005e4 <OLED_Write_Command>

	I2CBuff[1] = 0x22;	//memory mode
 800068a:	2322      	movs	r3, #34	; 0x22
 800068c:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffa6 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x00;	//vertical addressing start
 8000698:	2300      	movs	r3, #0
 800069a:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff9f 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0x07;	//vertical addressing end
 80006a6:	2307      	movs	r3, #7
 80006a8:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff98 	bl	80005e4 <OLED_Write_Command>

	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff93 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 80006be:	23a4      	movs	r3, #164	; 0xa4
 80006c0:	717b      	strb	r3, [r7, #5]
	//display on
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff8c 	bl	80005e4 <OLED_Write_Command>
	I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 80006cc:	23af      	movs	r3, #175	; 0xaf
 80006ce:	717b      	strb	r3, [r7, #5]
	OLED_Write_Command(I2CBuff, sizeof(I2CBuff));
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2102      	movs	r1, #2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff85 	bl	80005e4 <OLED_Write_Command>

	for(int r = 0; r < 8; r++)
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e018      	b.n	8000712 <OLED_Draw_Colon+0xca>
	{
		for(int c = 40; c < 46; c++)
 80006e0:	2328      	movs	r3, #40	; 0x28
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	e00f      	b.n	8000706 <OLED_Draw_Colon+0xbe>
		{
			if(r > 0 && r < 7)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	dd06      	ble.n	80006fa <OLED_Draw_Colon+0xb2>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	dc03      	bgt.n	80006fa <OLED_Draw_Colon+0xb2>
			{
				OLED_Draw(0x00);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff ff8c 	bl	8000610 <OLED_Draw>
 80006f8:	e002      	b.n	8000700 <OLED_Draw_Colon+0xb8>
			}
			else
			{
				OLED_Draw(0xff);
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	f7ff ff88 	bl	8000610 <OLED_Draw>
		for(int c = 40; c < 46; c++)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b2d      	cmp	r3, #45	; 0x2d
 800070a:	ddec      	ble.n	80006e6 <OLED_Draw_Colon+0x9e>
	for(int r = 0; r < 8; r++)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2b07      	cmp	r3, #7
 8000716:	dde3      	ble.n	80006e0 <OLED_Draw_Colon+0x98>
			}
		}
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_GPIO_EXTI_Callback>:
	g_user_buffer_index = 0;
	memset(g_user_buffer,0,sizeof(g_user_buffer));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET)
 800072e:	2102      	movs	r1, #2
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000732:	f001 fb3d 	bl	8001db0 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  b_alarm_triggered = true;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_GPIO_EXTI_Callback+0x40>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000742:	2101      	movs	r1, #1
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <HAL_GPIO_EXTI_Callback+0x44>)
 8000746:	f001 fb33 	bl	8001db0 <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d102      	bne.n	8000756 <HAL_GPIO_EXTI_Callback+0x32>
  {
	  b_button_pressed = true;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_GPIO_EXTI_Callback+0x48>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
  }
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40020800 	.word	0x40020800
 8000764:	2000042a 	.word	0x2000042a
 8000768:	40020000 	.word	0x40020000
 800076c:	200004e8 	.word	0x200004e8

08000770 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

	  g_user_buffer[g_user_buffer_index] = rxData[0];
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_UART_RxCpltCallback+0x34>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_UART_RxCpltCallback+0x38>)
 8000780:	7819      	ldrb	r1, [r3, #0]
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_UART_RxCpltCallback+0x3c>)
 8000784:	5499      	strb	r1, [r3, r2]

	  g_user_buffer_index++;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <HAL_UART_RxCpltCallback+0x34>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_UART_RxCpltCallback+0x34>)
 8000790:	701a      	strb	r2, [r3, #0]

	  b_message_received = true;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_UART_RxCpltCallback+0x40>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]

}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	2000042b 	.word	0x2000042b
 80007a8:	2000042c 	.word	0x2000042c
 80007ac:	200004ec 	.word	0x200004ec
 80007b0:	2000051e 	.word	0x2000051e

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fc48 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f822 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f93e 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d4:	f000 f8fe 	bl	80009d4 <MX_DMA_Init>
  MX_I2C1_Init();
 80007d8:	f000 f87a 	bl	80008d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007dc:	f000 f8a6 	bl	800092c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007e0:	f000 f8ce 	bl	8000980 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Check if I2C device is ready
  if(HAL_I2C_IsDeviceReady(&hi2c1, OLED_ADDRESS_32H, 1, 10) == HAL_OK)
 80007e4:	230a      	movs	r3, #10
 80007e6:	2201      	movs	r2, #1
 80007e8:	2178      	movs	r1, #120	; 0x78
 80007ea:	4808      	ldr	r0, [pc, #32]	; (800080c <main+0x58>)
 80007ec:	f001 fd6c 	bl	80022c8 <HAL_I2C_IsDeviceReady>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d105      	bne.n	8000802 <main+0x4e>
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <main+0x5c>)
 80007fe:	f001 faef 	bl	8001de0 <HAL_GPIO_WritePin>
  }

  OLED_BEGIN();
 8000802:	f7ff fe5d 	bl	80004c0 <OLED_BEGIN>
  OLED_Draw_Colon();
 8000806:	f7ff ff1f 	bl	8000648 <OLED_Draw_Colon>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080a:	e7fe      	b.n	800080a <main+0x56>
 800080c:	20000494 	.word	0x20000494
 8000810:	40020c00 	.word	0x40020c00

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 f822 	bl	800586c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <SystemClock_Config+0xb4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <SystemClock_Config+0xb4>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <SystemClock_Config+0xb4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <SystemClock_Config+0xb8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <SystemClock_Config+0xb8>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <SystemClock_Config+0xb8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2310      	movs	r3, #16
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800087c:	2300      	movs	r3, #0
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fd27 	bl	80042d8 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000890:	f000 f980 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 ff8a 	bl	80047c8 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008ba:	f000 f96b 	bl	8000b94 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C1_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_I2C1_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2C1_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_I2C1_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_I2C1_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2C1_Init+0x50>)
 800090e:	f001 fa99 	bl	8001e44 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 f93c 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000494 	.word	0x20000494
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART1_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000964:	f004 f900 	bl	8004b68 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f911 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000624 	.word	0x20000624
 800097c:	40011000 	.word	0x40011000

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f004 f8d6 	bl	8004b68 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f8e7 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000520 	.word	0x20000520
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_DMA_Init+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <MX_DMA_Init+0x78>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_DMA_Init+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_DMA_Init+0x78>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_DMA_Init+0x78>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_DMA_Init+0x78>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	200b      	movs	r0, #11
 8000a18:	f000 fc6d 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a1c:	200b      	movs	r0, #11
 8000a1e:	f000 fc86 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2010      	movs	r0, #16
 8000a28:	f000 fc65 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a2c:	2010      	movs	r0, #16
 8000a2e:	f000 fc7e 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	203a      	movs	r0, #58	; 0x3a
 8000a38:	f000 fc5d 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a3c:	203a      	movs	r0, #58	; 0x3a
 8000a3e:	f000 fc76 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a45      	ldr	r2, [pc, #276]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b43      	ldr	r3, [pc, #268]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a37      	ldr	r2, [pc, #220]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2120      	movs	r1, #32
 8000ada:	482b      	ldr	r0, [pc, #172]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000adc:	f001 f980 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ae6:	4829      	ldr	r0, [pc, #164]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000ae8:	f001 f97a 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aec:	2302      	movs	r3, #2
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_GPIO_Init+0x140>)
 8000b02:	f000 ffb9 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481b      	ldr	r0, [pc, #108]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000b1c:	f000 ffac 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b20:	2320      	movs	r3, #32
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000b38:	f000 ff9e 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000b56:	f000 ff8f 	bl	8001a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2006      	movs	r0, #6
 8000b60:	f000 fbc9 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b64:	2006      	movs	r0, #6
 8000b66:	f000 fbe2 	bl	800132e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f000 fbc1 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b74:	2007      	movs	r0, #7
 8000b76:	f000 fbda 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40020800 	.word	0x40020800

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a38      	ldr	r2, [pc, #224]	; (8000cf0 <HAL_I2C_MspInit+0x100>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d16a      	bne.n	8000ce8 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <HAL_I2C_MspInit+0x104>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <HAL_I2C_MspInit+0x104>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <HAL_I2C_MspInit+0x104>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2e:	23c0      	movs	r3, #192	; 0xc0
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c32:	2312      	movs	r3, #18
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	482b      	ldr	r0, [pc, #172]	; (8000cf8 <HAL_I2C_MspInit+0x108>)
 8000c4a:	f000 ff15 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <HAL_I2C_MspInit+0x104>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a27      	ldr	r2, [pc, #156]	; (8000cf4 <HAL_I2C_MspInit+0x104>)
 8000c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <HAL_I2C_MspInit+0x104>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000c6a:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c6c:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_I2C_MspInit+0x110>)
 8000c6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c76:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000cac:	4813      	ldr	r0, [pc, #76]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000cae:	f000 fb59 	bl	8001364 <HAL_DMA_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000cb8:	f7ff ff6c 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_I2C_MspInit+0x10c>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	201f      	movs	r0, #31
 8000cce:	f000 fb12 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cd2:	201f      	movs	r0, #31
 8000cd4:	f000 fb2b 	bl	800132e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2020      	movs	r0, #32
 8000cde:	f000 fb0a 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ce2:	2020      	movs	r0, #32
 8000ce4:	f000 fb23 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	20000668 	.word	0x20000668
 8000d00:	40026010 	.word	0x40026010

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a69      	ldr	r2, [pc, #420]	; (8000ec8 <HAL_UART_MspInit+0x1c4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d164      	bne.n	8000df0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a67      	ldr	r2, [pc, #412]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b65      	ldr	r3, [pc, #404]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a60      	ldr	r2, [pc, #384]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b5e      	ldr	r3, [pc, #376]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d70:	2307      	movs	r3, #7
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4855      	ldr	r0, [pc, #340]	; (8000ed0 <HAL_UART_MspInit+0x1cc>)
 8000d7c:	f000 fe7c 	bl	8001a78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d80:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000d82:	4a55      	ldr	r2, [pc, #340]	; (8000ed8 <HAL_UART_MspInit+0x1d4>)
 8000d84:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d86:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8e:	4b51      	ldr	r3, [pc, #324]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d94:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da8:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000dae:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000db6:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dbc:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dc2:	4844      	ldr	r0, [pc, #272]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000dc4:	f000 face 	bl	8001364 <HAL_DMA_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000dce:	f7ff fee1 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000dd8:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <HAL_UART_MspInit+0x1d0>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2025      	movs	r0, #37	; 0x25
 8000de4:	f000 fa87 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000de8:	2025      	movs	r0, #37	; 0x25
 8000dea:	f000 faa0 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dee:	e067      	b.n	8000ec0 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a39      	ldr	r2, [pc, #228]	; (8000edc <HAL_UART_MspInit+0x1d8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d162      	bne.n	8000ec0 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a32      	ldr	r2, [pc, #200]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HAL_UART_MspInit+0x1c8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e32:	230c      	movs	r3, #12
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e42:	2307      	movs	r3, #7
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <HAL_UART_MspInit+0x1cc>)
 8000e4e:	f000 fe13 	bl	8001a78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e54:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <HAL_UART_MspInit+0x1e0>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e86:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000e96:	f000 fa65 	bl	8001364 <HAL_DMA_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8000ea0:	f7ff fe78 	bl	8000b94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_UART_MspInit+0x1dc>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2026      	movs	r0, #38	; 0x26
 8000eb6:	f000 fa1e 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eba:	2026      	movs	r0, #38	; 0x26
 8000ebc:	f000 fa37 	bl	800132e <HAL_NVIC_EnableIRQ>
}
 8000ec0:	bf00      	nop
 8000ec2:	3730      	adds	r7, #48	; 0x30
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40011000 	.word	0x40011000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	200005c4 	.word	0x200005c4
 8000ed8:	40026440 	.word	0x40026440
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	20000564 	.word	0x20000564
 8000ee4:	40026088 	.word	0x40026088

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f8e4 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f000 ff67 	bl	8001e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f000 ff60 	bl	8001e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <DMA1_Stream0_IRQHandler+0x10>)
 8000f5e:	f000 fb41 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000668 	.word	0x20000668

08000f6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Stream5_IRQHandler+0x10>)
 8000f72:	f000 fb37 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000564 	.word	0x20000564

08000f80 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <I2C1_EV_IRQHandler+0x10>)
 8000f86:	f001 facd 	bl	8002524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000494 	.word	0x20000494

08000f94 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <I2C1_ER_IRQHandler+0x10>)
 8000f9a:	f001 fc34 	bl	8002806 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000494 	.word	0x20000494

08000fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART1_IRQHandler+0x10>)
 8000fae:	f003 fe29 	bl	8004c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000624 	.word	0x20000624

08000fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <USART2_IRQHandler+0x10>)
 8000fc2:	f003 fe1f 	bl	8004c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000520 	.word	0x20000520

08000fd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA2_Stream2_IRQHandler+0x10>)
 8000fd6:	f000 fb05 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200005c4 	.word	0x200005c4

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	; (8001054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001032:	f7ff ffd7 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f004 fbf5 	bl	8005824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fbbb 	bl	80007b4 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800104c:	080058c4 	.word	0x080058c4
  ldr r2, =_sbss
 8001050:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001054:	200006cc 	.word	0x200006cc

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_Init+0x40>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_Init+0x40>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_Init+0x40>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f92b 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fd86 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f943 	bl	800134a <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f90b 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	200006c8 	.word	0x200006c8

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200006c8 	.word	0x200006c8

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff3e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff31 	bl	80011a4 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff feda 	bl	8001128 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e099      	b.n	80014b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a0:	e00f      	b.n	80013c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a2:	f7ff fec1 	bl	8001128 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d908      	bls.n	80013c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2220      	movs	r2, #32
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2203      	movs	r2, #3
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e078      	b.n	80014b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e8      	bne.n	80013a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <HAL_DMA_Init+0x158>)
 80013dc:	4013      	ands	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4313      	orrs	r3, r2
 8001412:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	2b04      	cmp	r3, #4
 800141a:	d107      	bne.n	800142c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4313      	orrs	r3, r2
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4313      	orrs	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f023 0307 	bic.w	r3, r3, #7
 8001442:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	4313      	orrs	r3, r2
 800144c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	2b04      	cmp	r3, #4
 8001454:	d117      	bne.n	8001486 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00e      	beq.n	8001486 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa89 	bl	8001980 <DMA_CheckFifoParam>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001482:	2301      	movs	r3, #1
 8001484:	e016      	b.n	80014b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fa40 	bl	8001914 <DMA_CalcBaseAndBitshift>
 8001494:	4603      	mov	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	223f      	movs	r2, #63	; 0x3f
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	f010803f 	.word	0xf010803f

080014c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ce:	f7ff fe2b 	bl	8001128 <HAL_GetTick>
 80014d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d008      	beq.n	80014f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e052      	b.n	8001598 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0216 	bic.w	r2, r2, #22
 8001500:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001510:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <HAL_DMA_Abort+0x62>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0208 	bic.w	r2, r2, #8
 8001530:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001542:	e013      	b.n	800156c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001544:	f7ff fdf0 	bl	8001128 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b05      	cmp	r3, #5
 8001550:	d90c      	bls.n	800156c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e015      	b.n	8001598 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1e4      	bne.n	8001544 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d004      	beq.n	80015be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00c      	b.n	80015d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2205      	movs	r2, #5
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_DMA_IRQHandler+0x258>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a92      	ldr	r2, [pc, #584]	; (8001840 <HAL_DMA_IRQHandler+0x25c>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2208      	movs	r2, #8
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01a      	beq.n	8001650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	2208      	movs	r2, #8
 800163e:	409a      	lsls	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	2201      	movs	r2, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d012      	beq.n	8001686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	2201      	movs	r2, #1
 8001674:	409a      	lsls	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f043 0202 	orr.w	r2, r3, #2
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	2204      	movs	r2, #4
 800168c:	409a      	lsls	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2204      	movs	r2, #4
 80016aa:	409a      	lsls	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f043 0204 	orr.w	r2, r3, #4
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2210      	movs	r2, #16
 80016c2:	409a      	lsls	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d043      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03c      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2210      	movs	r2, #16
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d018      	beq.n	8001726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d108      	bne.n	8001714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
 8001712:	e01f      	b.n	8001754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
 8001724:	e016      	b.n	8001754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0208 	bic.w	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2220      	movs	r2, #32
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 808e 	beq.w	8001882 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8086 	beq.w	8001882 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2220      	movs	r2, #32
 800177c:	409a      	lsls	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b05      	cmp	r3, #5
 800178c:	d136      	bne.n	80017fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0216 	bic.w	r2, r2, #22
 800179c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <HAL_DMA_IRQHandler+0x1da>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0208 	bic.w	r2, r2, #8
 80017cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	223f      	movs	r2, #63	; 0x3f
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d07d      	beq.n	80018ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
        }
        return;
 80017fa:	e078      	b.n	80018ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01c      	beq.n	8001844 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	2b00      	cmp	r3, #0
 800181e:	d030      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
 8001828:	e02b      	b.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d027      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e022      	b.n	8001882 <HAL_DMA_IRQHandler+0x29e>
 800183c:	20000000 	.word	0x20000000
 8001840:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0210 	bic.w	r2, r2, #16
 8001860:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	2b00      	cmp	r3, #0
 8001888:	d032      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d022      	beq.n	80018dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d307      	bcc.n	80018ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f2      	bne.n	80018ae <HAL_DMA_IRQHandler+0x2ca>
 80018c8:	e000      	b.n	80018cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018ee:	bf00      	nop
    }
  }
}
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop

080018f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3b10      	subs	r3, #16
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <DMA_CalcBaseAndBitshift+0x64>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <DMA_CalcBaseAndBitshift+0x68>)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d909      	bls.n	8001956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	1d1a      	adds	r2, r3, #4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
 8001954:	e007      	b.n	8001966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	aaaaaaab 	.word	0xaaaaaaab
 800197c:	080058ac 	.word	0x080058ac

08001980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11f      	bne.n	80019da <DMA_CheckFifoParam+0x5a>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d856      	bhi.n	8001a4e <DMA_CheckFifoParam+0xce>
 80019a0:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <DMA_CheckFifoParam+0x28>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019cb 	.word	0x080019cb
 80019b0:	080019b9 	.word	0x080019b9
 80019b4:	08001a4f 	.word	0x08001a4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d046      	beq.n	8001a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c8:	e043      	b.n	8001a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d2:	d140      	bne.n	8001a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d8:	e03d      	b.n	8001a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e2:	d121      	bne.n	8001a28 <DMA_CheckFifoParam+0xa8>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d837      	bhi.n	8001a5a <DMA_CheckFifoParam+0xda>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <DMA_CheckFifoParam+0x70>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001a07 	.word	0x08001a07
 80019f8:	08001a01 	.word	0x08001a01
 80019fc:	08001a19 	.word	0x08001a19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      break;
 8001a04:	e030      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d025      	beq.n	8001a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a16:	e022      	b.n	8001a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a20:	d11f      	bne.n	8001a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a26:	e01c      	b.n	8001a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d903      	bls.n	8001a36 <DMA_CheckFifoParam+0xb6>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d003      	beq.n	8001a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a34:	e018      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3a:	e015      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00e      	beq.n	8001a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4c:	e00b      	b.n	8001a66 <DMA_CheckFifoParam+0xe6>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e00a      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a52:	bf00      	nop
 8001a54:	e008      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
 8001a58:	e006      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e004      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e002      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
    }
  } 
  
  return status; 
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e16b      	b.n	8001d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 815a 	bne.w	8001d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80b4 	beq.w	8001d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_GPIO_Init+0x314>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <HAL_GPIO_Init+0x318>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_GPIO_Init+0x320>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_GPIO_Init+0x330>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x20a>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00e      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00c      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00a      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce2:	4a32      	ldr	r2, [pc, #200]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d60:	4a12      	ldr	r2, [pc, #72]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f ae90 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dfc:	e003      	b.n	8001e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fc76 	bl	8000724 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e12b      	b.n	80020ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fec0 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	; 0x24
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea8:	f002 fe36 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a81      	ldr	r2, [pc, #516]	; (80020b8 <HAL_I2C_Init+0x274>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d807      	bhi.n	8001ec8 <HAL_I2C_Init+0x84>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4a80      	ldr	r2, [pc, #512]	; (80020bc <HAL_I2C_Init+0x278>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	bf94      	ite	ls
 8001ec0:	2301      	movls	r3, #1
 8001ec2:	2300      	movhi	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e006      	b.n	8001ed6 <HAL_I2C_Init+0x92>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a7d      	ldr	r2, [pc, #500]	; (80020c0 <HAL_I2C_Init+0x27c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	bf94      	ite	ls
 8001ed0:	2301      	movls	r3, #1
 8001ed2:	2300      	movhi	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0e7      	b.n	80020ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a78      	ldr	r2, [pc, #480]	; (80020c4 <HAL_I2C_Init+0x280>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0c9b      	lsrs	r3, r3, #18
 8001ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	; (80020b8 <HAL_I2C_Init+0x274>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d802      	bhi.n	8001f18 <HAL_I2C_Init+0xd4>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3301      	adds	r3, #1
 8001f16:	e009      	b.n	8001f2c <HAL_I2C_Init+0xe8>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	4a69      	ldr	r2, [pc, #420]	; (80020c8 <HAL_I2C_Init+0x284>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	495c      	ldr	r1, [pc, #368]	; (80020b8 <HAL_I2C_Init+0x274>)
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	d819      	bhi.n	8001f80 <HAL_I2C_Init+0x13c>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e59      	subs	r1, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5a:	1c59      	adds	r1, r3, #1
 8001f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f60:	400b      	ands	r3, r1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_I2C_Init+0x138>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1e59      	subs	r1, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7a:	e051      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	e04f      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d111      	bne.n	8001fac <HAL_I2C_Init+0x168>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e58      	subs	r0, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	440b      	add	r3, r1
 8001f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	e012      	b.n	8001fd2 <HAL_I2C_Init+0x18e>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	0099      	lsls	r1, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Init+0x196>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e022      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10e      	bne.n	8002000 <HAL_I2C_Init+0x1bc>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1e58      	subs	r0, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	440b      	add	r3, r1
 8001ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffe:	e00f      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	0099      	lsls	r1, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	6809      	ldr	r1, [r1, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800204e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6911      	ldr	r1, [r2, #16]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68d2      	ldr	r2, [r2, #12]
 800205a:	4311      	orrs	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	430b      	orrs	r3, r1
 8002062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	000186a0 	.word	0x000186a0
 80020bc:	001e847f 	.word	0x001e847f
 80020c0:	003d08ff 	.word	0x003d08ff
 80020c4:	431bde83 	.word	0x431bde83
 80020c8:	10624dd3 	.word	0x10624dd3

080020cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	460b      	mov	r3, r1
 80020da:	817b      	strh	r3, [r7, #10]
 80020dc:	4613      	mov	r3, r2
 80020de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff f822 	bl	8001128 <HAL_GetTick>
 80020e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	f040 80e0 	bne.w	80022b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2319      	movs	r3, #25
 80020fa:	2201      	movs	r2, #1
 80020fc:	4970      	ldr	r1, [pc, #448]	; (80022c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f001 ff16 	bl	8003f30 <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
 800210c:	e0d3      	b.n	80022b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_I2C_Master_Transmit+0x50>
 8002118:	2302      	movs	r3, #2
 800211a:	e0cc      	b.n	80022b6 <HAL_I2C_Master_Transmit+0x1ea>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d007      	beq.n	8002142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2221      	movs	r2, #33	; 0x21
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2210      	movs	r2, #16
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	893a      	ldrh	r2, [r7, #8]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a50      	ldr	r2, [pc, #320]	; (80022c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002184:	8979      	ldrh	r1, [r7, #10]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f001 fda6 	bl	8003cdc <I2C_MasterRequestWrite>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e08d      	b.n	80022b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021b0:	e066      	b.n	8002280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f001 ff90 	bl	80040dc <I2C_WaitOnTXEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06b      	b.n	80022b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b04      	cmp	r3, #4
 800221a:	d11b      	bne.n	8002254 <HAL_I2C_Master_Transmit+0x188>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	2b00      	cmp	r3, #0
 8002222:	d017      	beq.n	8002254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	6a39      	ldr	r1, [r7, #32]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f001 ff80 	bl	800415e <I2C_WaitOnBTFFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2b04      	cmp	r3, #4
 800226a:	d107      	bne.n	800227c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e01a      	b.n	80022b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d194      	bne.n	80021b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e000      	b.n	80022b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	00100002 	.word	0x00100002
 80022c4:	ffff0000 	.word	0xffff0000

080022c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7fe ff26 	bl	8001128 <HAL_GetTick>
 80022dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	f040 8111 	bne.w	8002512 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2319      	movs	r3, #25
 80022f6:	2201      	movs	r2, #1
 80022f8:	4988      	ldr	r1, [pc, #544]	; (800251c <HAL_I2C_IsDeviceReady+0x254>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f001 fe18 	bl	8003f30 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	e104      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2C_IsDeviceReady+0x50>
 8002314:	2302      	movs	r3, #2
 8002316:	e0fd      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d007      	beq.n	800233e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0201 	orr.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2224      	movs	r2, #36	; 0x24
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a70      	ldr	r2, [pc, #448]	; (8002520 <HAL_I2C_IsDeviceReady+0x258>)
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002370:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2200      	movs	r2, #0
 800237a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f001 fdd6 	bl	8003f30 <I2C_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002398:	d103      	bne.n	80023a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0b6      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023a6:	897b      	ldrh	r3, [r7, #10]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe feb7 	bl	8001128 <HAL_GetTick>
 80023ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023ea:	e025      	b.n	8002438 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ec:	f7fe fe9c 	bl	8001128 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d302      	bcc.n	8002402 <HAL_I2C_IsDeviceReady+0x13a>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	22a0      	movs	r2, #160	; 0xa0
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2ba0      	cmp	r3, #160	; 0xa0
 8002442:	d005      	beq.n	8002450 <HAL_I2C_IsDeviceReady+0x188>
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_I2C_IsDeviceReady+0x188>
 800244a:	7dbb      	ldrb	r3, [r7, #22]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0cd      	beq.n	80023ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d129      	bne.n	80024ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002474:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2319      	movs	r3, #25
 8002492:	2201      	movs	r2, #1
 8002494:	4921      	ldr	r1, [pc, #132]	; (800251c <HAL_I2C_IsDeviceReady+0x254>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f001 fd4a 	bl	8003f30 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e036      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e02c      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2319      	movs	r3, #25
 80024da:	2201      	movs	r2, #1
 80024dc:	490f      	ldr	r1, [pc, #60]	; (800251c <HAL_I2C_IsDeviceReady+0x254>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f001 fd26 	bl	8003f30 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e012      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f4ff af32 	bcc.w	8002362 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	00100002 	.word	0x00100002
 8002520:	ffff0000 	.word	0xffff0000

08002524 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002544:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b10      	cmp	r3, #16
 8002552:	d003      	beq.n	800255c <HAL_I2C_EV_IRQHandler+0x38>
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	f040 80c1 	bne.w	80026de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10d      	bne.n	8002592 <HAL_I2C_EV_IRQHandler+0x6e>
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800257c:	d003      	beq.n	8002586 <HAL_I2C_EV_IRQHandler+0x62>
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002584:	d101      	bne.n	800258a <HAL_I2C_EV_IRQHandler+0x66>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x68>
 800258a:	2300      	movs	r3, #0
 800258c:	2b01      	cmp	r3, #1
 800258e:	f000 8132 	beq.w	80027f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <HAL_I2C_EV_IRQHandler+0x92>
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 fe7a 	bl	80042a2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fd79 	bl	80030a6 <I2C_Master_SB>
 80025b4:	e092      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	0a5b      	lsrs	r3, r3, #9
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fdef 	bl	80031b2 <I2C_Master_ADD10>
 80025d4:	e082      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	0a5b      	lsrs	r3, r3, #9
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fe09 	bl	8003206 <I2C_Master_ADDR>
 80025f4:	e072      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03b      	beq.n	800267a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002610:	f000 80f3 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	09db      	lsrs	r3, r3, #7
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <HAL_I2C_EV_IRQHandler+0x11c>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	0a9b      	lsrs	r3, r3, #10
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_I2C_EV_IRQHandler+0x11c>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f9f3 	bl	8002a24 <I2C_MasterTransmit_TXE>
 800263e:	e04d      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80d6 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	0a5b      	lsrs	r3, r3, #9
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80cf 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800265c:	7bbb      	ldrb	r3, [r7, #14]
 800265e:	2b21      	cmp	r3, #33	; 0x21
 8002660:	d103      	bne.n	800266a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa7a 	bl	8002b5c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002668:	e0c7      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	f040 80c4 	bne.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fae8 	bl	8002c48 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002678:	e0bf      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002688:	f000 80b7 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <HAL_I2C_EV_IRQHandler+0x194>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	0a9b      	lsrs	r3, r3, #10
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_I2C_EV_IRQHandler+0x194>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fb5d 	bl	8002d70 <I2C_MasterReceive_RXNE>
 80026b6:	e011      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 809a 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	0a5b      	lsrs	r3, r3, #9
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8093 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fbfc 	bl	8002ed2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026da:	e08e      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80026dc:	e08d      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e007      	b.n	8002700 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0x20e>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 ffba 	bl	80036a4 <I2C_Slave_ADDR>
 8002730:	e066      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0x22e>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	0a5b      	lsrs	r3, r3, #9
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fff4 	bl	8003738 <I2C_Slave_STOPF>
 8002750:	e056      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002752:	7bbb      	ldrb	r3, [r7, #14]
 8002754:	2b21      	cmp	r3, #33	; 0x21
 8002756:	d002      	beq.n	800275e <HAL_I2C_EV_IRQHandler+0x23a>
 8002758:	7bbb      	ldrb	r3, [r7, #14]
 800275a:	2b29      	cmp	r3, #41	; 0x29
 800275c:	d125      	bne.n	80027aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	09db      	lsrs	r3, r3, #7
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00f      	beq.n	800278a <HAL_I2C_EV_IRQHandler+0x266>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	0a9b      	lsrs	r3, r3, #10
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_I2C_EV_IRQHandler+0x266>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fed0 	bl	8003528 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002788:	e039      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d033      	beq.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	0a5b      	lsrs	r3, r3, #9
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d02d      	beq.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fefd 	bl	80035a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027a8:	e029      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00f      	beq.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	0a9b      	lsrs	r3, r3, #10
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 ff08 	bl	80035e4 <I2C_SlaveReceive_RXNE>
 80027d4:	e014      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	0a5b      	lsrs	r3, r3, #9
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 ff36 	bl	8003660 <I2C_SlaveReceive_BTF>
 80027f4:	e004      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80027f6:	bf00      	nop
 80027f8:	e002      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b08a      	sub	sp, #40	; 0x28
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002828:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <HAL_I2C_ER_IRQHandler+0x4e>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002852:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00e      	beq.n	800287e <HAL_I2C_ER_IRQHandler+0x78>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800287c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	0a9b      	lsrs	r3, r3, #10
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03f      	beq.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d039      	beq.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002896:	7efb      	ldrb	r3, [r7, #27]
 8002898:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028b0:	7ebb      	ldrb	r3, [r7, #26]
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d112      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10f      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b21      	cmp	r3, #33	; 0x21
 80028c0:	d008      	beq.n	80028d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b29      	cmp	r3, #41	; 0x29
 80028c6:	d005      	beq.n	80028d4 <HAL_I2C_ER_IRQHandler+0xce>
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b28      	cmp	r3, #40	; 0x28
 80028cc:	d106      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b21      	cmp	r3, #33	; 0x21
 80028d2:	d103      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f001 f85f 	bl	8003998 <I2C_Slave_AF>
 80028da:	e016      	b.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028ee:	7efb      	ldrb	r3, [r7, #27]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d002      	beq.n	80028fa <HAL_I2C_ER_IRQHandler+0xf4>
 80028f4:	7efb      	ldrb	r3, [r7, #27]
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d107      	bne.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	0adb      	lsrs	r3, r3, #11
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00e      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0x12e>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002932:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f001 f896 	bl	8003a78 <I2C_ITError>
  }
}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
 80029b0:	4613      	mov	r3, r2
 80029b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d150      	bne.n	8002aec <I2C_MasterTransmit_TXE+0xc8>
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b21      	cmp	r3, #33	; 0x21
 8002a4e:	d14d      	bne.n	8002aec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d01d      	beq.n	8002a92 <I2C_MasterTransmit_TXE+0x6e>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d01a      	beq.n	8002a92 <I2C_MasterTransmit_TXE+0x6e>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a62:	d016      	beq.n	8002a92 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a72:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2211      	movs	r2, #17
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff62 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a90:	e060      	b.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d107      	bne.n	8002adc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff7d 	bl	80029d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ada:	e03b      	b.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff35 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002aea:	e033      	b.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b21      	cmp	r3, #33	; 0x21
 8002af0:	d005      	beq.n	8002afe <I2C_MasterTransmit_TXE+0xda>
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d12d      	bne.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b22      	cmp	r3, #34	; 0x22
 8002afc:	d12a      	bne.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d108      	bne.n	8002b1a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b16:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b18:	e01c      	b.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d103      	bne.n	8002b2e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f88e 	bl	8002c48 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b2c:	e012      	b.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b52:	e7ff      	b.n	8002b54 <I2C_MasterTransmit_TXE+0x130>
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b21      	cmp	r3, #33	; 0x21
 8002b74:	d164      	bne.n	8002c40 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ba4:	e04c      	b.n	8002c40 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d01d      	beq.n	8002be8 <I2C_MasterTransmit_BTF+0x8c>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d01a      	beq.n	8002be8 <I2C_MasterTransmit_BTF+0x8c>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb8:	d016      	beq.n	8002be8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bc8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2211      	movs	r2, #17
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff feb7 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
}
 8002be6:	e02b      	b.n	8002c40 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bf6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c06:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d107      	bne.n	8002c32 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fed2 	bl	80029d4 <HAL_I2C_MemTxCpltCallback>
}
 8002c30:	e006      	b.n	8002c40 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fe8a 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11d      	bne.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10b      	bne.n	8002c80 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c7e:	e073      	b.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	121b      	asrs	r3, r3, #8
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c9a:	e065      	b.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10b      	bne.n	8002cbc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cba:	e055      	b.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d151      	bne.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b22      	cmp	r3, #34	; 0x22
 8002cc8:	d10d      	bne.n	8002ce6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ce4:	e040      	b.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b21      	cmp	r3, #33	; 0x21
 8002cf4:	d112      	bne.n	8002d1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d1a:	e025      	b.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d120      	bne.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b21      	cmp	r3, #33	; 0x21
 8002d2a:	d11d      	bne.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe36 	bl	80029d4 <HAL_I2C_MemTxCpltCallback>
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b22      	cmp	r3, #34	; 0x22
 8002d82:	f040 80a2 	bne.w	8002eca <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d921      	bls.n	8002dd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	f040 8082 	bne.w	8002eca <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002dd6:	e078      	b.n	8002eca <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d074      	beq.n	8002eca <I2C_MasterReceive_RXNE+0x15a>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d002      	beq.n	8002dec <I2C_MasterReceive_RXNE+0x7c>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d16e      	bne.n	8002eca <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 f9f7 	bl	80041e0 <I2C_WaitOnSTOPRequestThroughIT>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d142      	bne.n	8002e7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d10a      	bne.n	8002e68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fdc1 	bl	80029e8 <HAL_I2C_MemRxCpltCallback>
}
 8002e66:	e030      	b.n	8002eca <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2212      	movs	r2, #18
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff fd76 	bl	8002968 <HAL_I2C_MasterRxCpltCallback>
}
 8002e7c:	e025      	b.n	8002eca <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fd99 	bl	80029fc <HAL_I2C_ErrorCallback>
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d11b      	bne.n	8002f22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f20:	e0bd      	b.n	800309e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d129      	bne.n	8002f80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00a      	beq.n	8002f58 <I2C_MasterReceive_BTF+0x86>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d007      	beq.n	8002f58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f7e:	e08e      	b.n	800309e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d176      	bne.n	8003078 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d002      	beq.n	8002f96 <I2C_MasterReceive_BTF+0xc4>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d108      	bne.n	8002fa8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e019      	b.n	8002fdc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d002      	beq.n	8002fb4 <I2C_MasterReceive_BTF+0xe2>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d108      	bne.n	8002fc6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e00a      	b.n	8002fdc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d007      	beq.n	8002fdc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003036:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d10a      	bne.n	8003062 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fcc4 	bl	80029e8 <HAL_I2C_MemRxCpltCallback>
}
 8003060:	e01d      	b.n	800309e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2212      	movs	r2, #18
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff fc79 	bl	8002968 <HAL_I2C_MasterRxCpltCallback>
}
 8003076:	e012      	b.n	800309e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d117      	bne.n	80030ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80030d4:	e067      	b.n	80031a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	611a      	str	r2, [r3, #16]
}
 80030e8:	e05d      	b.n	80031a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f2:	d133      	bne.n	800315c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b21      	cmp	r3, #33	; 0x21
 80030fe:	d109      	bne.n	8003114 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003110:	611a      	str	r2, [r3, #16]
 8003112:	e008      	b.n	8003126 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	b2da      	uxtb	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <I2C_Master_SB+0x92>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	2b00      	cmp	r3, #0
 800313e:	d032      	beq.n	80031a6 <I2C_Master_SB+0x100>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d02d      	beq.n	80031a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003158:	605a      	str	r2, [r3, #4]
}
 800315a:	e024      	b.n	80031a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10e      	bne.n	8003182 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	b29b      	uxth	r3, r3
 800316a:	11db      	asrs	r3, r3, #7
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f003 0306 	and.w	r3, r3, #6
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f063 030f 	orn	r3, r3, #15
 8003178:	b2da      	uxtb	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]
}
 8003180:	e011      	b.n	80031a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10d      	bne.n	80031a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	b29b      	uxth	r3, r3
 8003190:	11db      	asrs	r3, r3, #7
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f003 0306 	and.w	r3, r3, #6
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f063 030e 	orn	r3, r3, #14
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <I2C_Master_ADD10+0x26>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d108      	bne.n	80031ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <I2C_Master_ADD10+0x48>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f8:	605a      	str	r2, [r3, #4]
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003206:	b480      	push	{r7}
 8003208:	b091      	sub	sp, #68	; 0x44
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003214:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b22      	cmp	r3, #34	; 0x22
 800322e:	f040 8169 	bne.w	8003504 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10f      	bne.n	800325a <I2C_Master_ADDR+0x54>
 800323a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d10b      	bne.n	800325a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	e160      	b.n	800351c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11d      	bne.n	800329e <I2C_Master_ADDR+0x98>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800326a:	d118      	bne.n	800329e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003290:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	651a      	str	r2, [r3, #80]	; 0x50
 800329c:	e13e      	b.n	800351c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d113      	bne.n	80032d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e115      	b.n	80034fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	f040 808a 	bne.w	80033f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e2:	d137      	bne.n	8003354 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003302:	d113      	bne.n	800332c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003312:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	e0e7      	b.n	80034fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e0d3      	b.n	80034fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b08      	cmp	r3, #8
 8003358:	d02e      	beq.n	80033b8 <I2C_Master_ADDR+0x1b2>
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	2b20      	cmp	r3, #32
 800335e:	d02b      	beq.n	80033b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003362:	2b12      	cmp	r3, #18
 8003364:	d102      	bne.n	800336c <I2C_Master_ADDR+0x166>
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	2b01      	cmp	r3, #1
 800336a:	d125      	bne.n	80033b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00e      	beq.n	8003390 <I2C_Master_ADDR+0x18a>
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2b02      	cmp	r3, #2
 8003376:	d00b      	beq.n	8003390 <I2C_Master_ADDR+0x18a>
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	2b10      	cmp	r3, #16
 800337c:	d008      	beq.n	8003390 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e007      	b.n	80033a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	e0a1      	b.n	80034fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e085      	b.n	80034fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d14d      	bne.n	8003496 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d016      	beq.n	800342e <I2C_Master_ADDR+0x228>
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	2b02      	cmp	r3, #2
 8003404:	d013      	beq.n	800342e <I2C_Master_ADDR+0x228>
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	2b10      	cmp	r3, #16
 800340a:	d010      	beq.n	800342e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e007      	b.n	800343e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800343c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344c:	d117      	bne.n	800347e <I2C_Master_ADDR+0x278>
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003454:	d00b      	beq.n	800346e <I2C_Master_ADDR+0x268>
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	2b01      	cmp	r3, #1
 800345a:	d008      	beq.n	800346e <I2C_Master_ADDR+0x268>
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	2b08      	cmp	r3, #8
 8003460:	d005      	beq.n	800346e <I2C_Master_ADDR+0x268>
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b10      	cmp	r3, #16
 8003466:	d002      	beq.n	800346e <I2C_Master_ADDR+0x268>
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2b20      	cmp	r3, #32
 800346c:	d107      	bne.n	800347e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800347c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	e032      	b.n	80034fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d117      	bne.n	80034e6 <I2C_Master_ADDR+0x2e0>
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034bc:	d00b      	beq.n	80034d6 <I2C_Master_ADDR+0x2d0>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d008      	beq.n	80034d6 <I2C_Master_ADDR+0x2d0>
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d005      	beq.n	80034d6 <I2C_Master_ADDR+0x2d0>
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d002      	beq.n	80034d6 <I2C_Master_ADDR+0x2d0>
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d107      	bne.n	80034e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003502:	e00b      	b.n	800351c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
}
 800351a:	e7ff      	b.n	800351c <I2C_Master_ADDR+0x316>
 800351c:	bf00      	nop
 800351e:	3744      	adds	r7, #68	; 0x44
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02b      	beq.n	800359a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d114      	bne.n	800359a <I2C_SlaveTransmit_TXE+0x72>
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b29      	cmp	r3, #41	; 0x29
 8003574:	d111      	bne.n	800359a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2221      	movs	r2, #33	; 0x21
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2228      	movs	r2, #40	; 0x28
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff f9f1 	bl	800297c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d011      	beq.n	80035d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d02c      	beq.n	8003658 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d114      	bne.n	8003658 <I2C_SlaveReceive_RXNE+0x74>
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b2a      	cmp	r3, #42	; 0x2a
 8003632:	d111      	bne.n	8003658 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003642:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2222      	movs	r2, #34	; 0x22
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2228      	movs	r2, #40	; 0x28
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff f99c 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036be:	2b28      	cmp	r3, #40	; 0x28
 80036c0:	d127      	bne.n	8003712 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	09db      	lsrs	r3, r3, #7
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	81bb      	strh	r3, [r7, #12]
 80036f4:	e002      	b.n	80036fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003704:	89ba      	ldrh	r2, [r7, #12]
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff f94a 	bl	80029a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003710:	e00e      	b.n	8003730 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003756:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	d172      	bne.n	800387c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b22      	cmp	r3, #34	; 0x22
 800379a:	d002      	beq.n	80037a2 <I2C_Slave_STOPF+0x6a>
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b2a      	cmp	r3, #42	; 0x2a
 80037a0:	d135      	bne.n	800380e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe f88c 	bl	80018f8 <HAL_DMA_GetState>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d049      	beq.n	800387a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4a69      	ldr	r2, [pc, #420]	; (8003990 <I2C_Slave_STOPF+0x258>)
 80037ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd fed4 	bl	80015a0 <HAL_DMA_Abort_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03d      	beq.n	800387a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800380c:	e035      	b.n	800387a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003840:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe f856 	bl	80018f8 <HAL_DMA_GetState>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d014      	beq.n	800387c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	4a4e      	ldr	r2, [pc, #312]	; (8003990 <I2C_Slave_STOPF+0x258>)
 8003858:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fe9e 	bl	80015a0 <HAL_DMA_Abort_IT>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003874:	4610      	mov	r0, r2
 8003876:	4798      	blx	r3
 8003878:	e000      	b.n	800387c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800387a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03e      	beq.n	8003904 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d112      	bne.n	80038ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d112      	bne.n	80038ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0204 	orr.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8b3 	bl	8003a78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003912:	e039      	b.n	8003988 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b2a      	cmp	r3, #42	; 0x2a
 8003918:	d109      	bne.n	800392e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2228      	movs	r2, #40	; 0x28
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff f831 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b28      	cmp	r3, #40	; 0x28
 8003938:	d111      	bne.n	800395e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <I2C_Slave_STOPF+0x25c>)
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff f832 	bl	80029c0 <HAL_I2C_ListenCpltCallback>
}
 800395c:	e014      	b.n	8003988 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	2b22      	cmp	r3, #34	; 0x22
 8003964:	d002      	beq.n	800396c <I2C_Slave_STOPF+0x234>
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b22      	cmp	r3, #34	; 0x22
 800396a:	d10d      	bne.n	8003988 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff f804 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	08003de1 	.word	0x08003de1
 8003994:	ffff0000 	.word	0xffff0000

08003998 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d002      	beq.n	80039ba <I2C_Slave_AF+0x22>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d129      	bne.n	8003a0e <I2C_Slave_AF+0x76>
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b28      	cmp	r3, #40	; 0x28
 80039be:	d126      	bne.n	8003a0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <I2C_Slave_AF+0xdc>)
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fe ffda 	bl	80029c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a0c:	e02e      	b.n	8003a6c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b21      	cmp	r3, #33	; 0x21
 8003a12:	d126      	bne.n	8003a62 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <I2C_Slave_AF+0xdc>)
 8003a18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2221      	movs	r2, #33	; 0x21
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe ff8e 	bl	800297c <HAL_I2C_SlaveTxCpltCallback>
}
 8003a60:	e004      	b.n	8003a6c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6a:	615a      	str	r2, [r3, #20]
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	ffff0000 	.word	0xffff0000

08003a78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a90:	7bbb      	ldrb	r3, [r7, #14]
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d002      	beq.n	8003a9c <I2C_ITError+0x24>
 8003a96:	7bbb      	ldrb	r3, [r7, #14]
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d10a      	bne.n	8003ab2 <I2C_ITError+0x3a>
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b22      	cmp	r3, #34	; 0x22
 8003aa0:	d107      	bne.n	8003ab2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ab8:	2b28      	cmp	r3, #40	; 0x28
 8003aba:	d107      	bne.n	8003acc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2228      	movs	r2, #40	; 0x28
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003aca:	e015      	b.n	8003af8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d00a      	beq.n	8003af2 <I2C_ITError+0x7a>
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b60      	cmp	r3, #96	; 0x60
 8003ae0:	d007      	beq.n	8003af2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	d162      	bne.n	8003bce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d020      	beq.n	8003b68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <I2C_ITError+0x25c>)
 8003b2c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd fd34 	bl	80015a0 <HAL_DMA_Abort_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8089 	beq.w	8003c52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b62:	4610      	mov	r0, r2
 8003b64:	4798      	blx	r3
 8003b66:	e074      	b.n	8003c52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	4a59      	ldr	r2, [pc, #356]	; (8003cd4 <I2C_ITError+0x25c>)
 8003b6e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd fd13 	bl	80015a0 <HAL_DMA_Abort_IT>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d068      	beq.n	8003c52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d10b      	bne.n	8003ba6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4798      	blx	r3
 8003bcc:	e041      	b.n	8003c52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b60      	cmp	r3, #96	; 0x60
 8003bd8:	d125      	bne.n	8003c26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d10b      	bne.n	8003c0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fef6 	bl	8002a10 <HAL_I2C_AbortCpltCallback>
 8003c24:	e015      	b.n	8003c52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d10b      	bne.n	8003c4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fe fed5 	bl	80029fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d113      	bne.n	8003ccc <I2C_ITError+0x254>
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b28      	cmp	r3, #40	; 0x28
 8003ca8:	d110      	bne.n	8003ccc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <I2C_ITError+0x260>)
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fe fe7a 	bl	80029c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	08003de1 	.word	0x08003de1
 8003cd8:	ffff0000 	.word	0xffff0000

08003cdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d006      	beq.n	8003d06 <I2C_MasterRequestWrite+0x2a>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d003      	beq.n	8003d06 <I2C_MasterRequestWrite+0x2a>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d04:	d108      	bne.n	8003d18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e00b      	b.n	8003d30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	2b12      	cmp	r3, #18
 8003d1e:	d107      	bne.n	8003d30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f8f7 	bl	8003f30 <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d56:	d103      	bne.n	8003d60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e035      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d6c:	d108      	bne.n	8003d80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e01b      	b.n	8003db8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d80:	897b      	ldrh	r3, [r7, #10]
 8003d82:	11db      	asrs	r3, r3, #7
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f003 0306 	and.w	r3, r3, #6
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f063 030f 	orn	r3, r3, #15
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <I2C_MasterRequestWrite+0xfc>)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f91d 	bl	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e010      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dae:	897b      	ldrh	r3, [r7, #10]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4907      	ldr	r1, [pc, #28]	; (8003ddc <I2C_MasterRequestWrite+0x100>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f90d 	bl	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	00010008 	.word	0x00010008
 8003ddc:	00010002 	.word	0x00010002

08003de0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dfa:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <I2C_DMAAbort+0x148>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	08db      	lsrs	r3, r3, #3
 8003e00:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <I2C_DMAAbort+0x14c>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0a1a      	lsrs	r2, r3, #8
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00da      	lsls	r2, r3, #3
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003e26:	e00a      	b.n	8003e3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d0ea      	beq.n	8003e14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	2200      	movs	r2, #0
 8003e82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2200      	movs	r2, #0
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b60      	cmp	r3, #96	; 0x60
 8003eae:	d10e      	bne.n	8003ece <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7fe fda2 	bl	8002a10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ecc:	e027      	b.n	8003f1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ed4:	2b28      	cmp	r3, #40	; 0x28
 8003ed6:	d117      	bne.n	8003f08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2228      	movs	r2, #40	; 0x28
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f06:	e007      	b.n	8003f18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f18:	6978      	ldr	r0, [r7, #20]
 8003f1a:	f7fe fd6f 	bl	80029fc <HAL_I2C_ErrorCallback>
}
 8003f1e:	bf00      	nop
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	14f8b589 	.word	0x14f8b589

08003f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f40:	e025      	b.n	8003f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d021      	beq.n	8003f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4a:	f7fd f8ed 	bl	8001128 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d302      	bcc.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d116      	bne.n	8003f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0220 	orr.w	r2, r3, #32
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e023      	b.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10d      	bne.n	8003fb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	e00c      	b.n	8003fce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d0b6      	beq.n	8003f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fec:	e051      	b.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffc:	d123      	bne.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004016:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e046      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d021      	beq.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fd f86b 	bl	8001128 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d116      	bne.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e020      	b.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10c      	bne.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	43da      	mvns	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	e00b      	b.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	43da      	mvns	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d18d      	bne.n	8003fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e8:	e02d      	b.n	8004146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f8aa 	bl	8004244 <I2C_IsAcknowledgeFailed>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e02d      	b.n	8004156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d021      	beq.n	8004146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fd f811 	bl	8001128 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d116      	bne.n	8004146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f043 0220 	orr.w	r2, r3, #32
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e007      	b.n	8004156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d1ca      	bne.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800416a:	e02d      	b.n	80041c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f869 	bl	8004244 <I2C_IsAcknowledgeFailed>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e02d      	b.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d021      	beq.n	80041c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004184:	f7fc ffd0 	bl	8001128 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d116      	bne.n	80041c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e007      	b.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d1ca      	bne.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	08db      	lsrs	r3, r3, #3
 80041f2:	4a13      	ldr	r2, [pc, #76]	; (8004240 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	0a1a      	lsrs	r2, r3, #8
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b01      	subs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e008      	b.n	8004230 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422c:	d0e9      	beq.n	8004202 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000000 	.word	0x20000000
 8004240:	14f8b589 	.word	0x14f8b589

08004244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d11b      	bne.n	8004294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042b2:	d103      	bne.n	80042bc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042ba:	e007      	b.n	80042cc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80042c4:	d102      	bne.n	80042cc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2208      	movs	r2, #8
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e264      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d075      	beq.n	80043e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	4ba3      	ldr	r3, [pc, #652]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d00c      	beq.n	800431c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004302:	4ba0      	ldr	r3, [pc, #640]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800430a:	2b08      	cmp	r3, #8
 800430c:	d112      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430e:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	4b99      	ldr	r3, [pc, #612]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d05b      	beq.n	80043e0 <HAL_RCC_OscConfig+0x108>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d157      	bne.n	80043e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e23f      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x74>
 800433e:	4b91      	ldr	r3, [pc, #580]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a90      	ldr	r2, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x98>
 8004356:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a8a      	ldr	r2, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a87      	ldr	r2, [pc, #540]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 8004370:	4b84      	ldr	r3, [pc, #528]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a83      	ldr	r2, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a80      	ldr	r2, [pc, #512]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fc feca 	bl	8001128 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004398:	f7fc fec6 	bl	8001128 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e204      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xc0>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fc feb6 	bl	8001128 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fc feb2 	bl	8001128 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1f0      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0xe8>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fa:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1c4      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4952      	ldr	r1, [pc, #328]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	e03a      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b4f      	ldr	r3, [pc, #316]	; (8004588 <HAL_RCC_OscConfig+0x2b0>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fc fe6b 	bl	8001128 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004456:	f7fc fe67 	bl	8001128 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1a5      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004468:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4940      	ldr	r1, [pc, #256]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448a:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <HAL_RCC_OscConfig+0x2b0>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fc fe4a 	bl	8001128 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004498:	f7fc fe46 	bl	8001128 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e184      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	4b36      	ldr	r3, [pc, #216]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d030      	beq.n	8004524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x2b4>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fc fe2a 	bl	8001128 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fc fe26 	bl	8001128 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e164      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x200>
 80044f6:	e015      	b.n	8004524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_OscConfig+0x2b4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fe:	f7fc fe13 	bl	8001128 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004506:	f7fc fe0f 	bl	8001128 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e14d      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a0 	beq.w	8004672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d121      	bne.n	80045b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_RCC_OscConfig+0x2b8>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7fc fdd5 	bl	8001128 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e011      	b.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	42470000 	.word	0x42470000
 800458c:	42470e80 	.word	0x42470e80
 8004590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004594:	f7fc fdc8 	bl	8001128 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e106      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a6:	4b85      	ldr	r3, [pc, #532]	; (80047bc <HAL_RCC_OscConfig+0x4e4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2f0>
 80045ba:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a80      	ldr	r2, [pc, #512]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e01c      	b.n	8004602 <HAL_RCC_OscConfig+0x32a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d10c      	bne.n	80045ea <HAL_RCC_OscConfig+0x312>
 80045d0:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a77      	ldr	r2, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e00b      	b.n	8004602 <HAL_RCC_OscConfig+0x32a>
 80045ea:	4b75      	ldr	r3, [pc, #468]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a74      	ldr	r2, [pc, #464]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	4b72      	ldr	r3, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a71      	ldr	r2, [pc, #452]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fc fd8d 	bl	8001128 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fc fd89 	bl	8001128 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e0c5      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ee      	beq.n	8004612 <HAL_RCC_OscConfig+0x33a>
 8004634:	e014      	b.n	8004660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fc fd77 	bl	8001128 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463c:	e00a      	b.n	8004654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fc fd73 	bl	8001128 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0af      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ee      	bne.n	800463e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b56      	ldr	r3, [pc, #344]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 809b 	beq.w	80047b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d05c      	beq.n	8004742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d141      	bne.n	8004714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004690:	4b4c      	ldr	r3, [pc, #304]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fc fd47 	bl	8001128 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469e:	f7fc fd43 	bl	8001128 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e081      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	019b      	lsls	r3, r3, #6
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	3b01      	subs	r3, #1
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	4937      	ldr	r1, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fc fd1c 	bl	8001128 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fc fd18 	bl	8001128 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e056      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x41c>
 8004712:	e04e      	b.n	80047b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fc fd05 	bl	8001128 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004722:	f7fc fd01 	bl	8001128 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e03f      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004734:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x44a>
 8004740:	e037      	b.n	80047b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e032      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d028      	beq.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d121      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d11a      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800477e:	4013      	ands	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004784:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004786:	4293      	cmp	r3, r2
 8004788:	d111      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800479a:	429a      	cmp	r2, r3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40007000 	.word	0x40007000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470060 	.word	0x42470060

080047c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0cc      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047dc:	4b68      	ldr	r3, [pc, #416]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d90c      	bls.n	8004804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0b8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a52      	ldr	r2, [pc, #328]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800483e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d044      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d119      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d003      	beq.n	8004886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004882:	2b03      	cmp	r3, #3
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004886:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e06f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004896:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e067      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 0203 	bic.w	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4934      	ldr	r1, [pc, #208]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b8:	f7fc fc36 	bl	8001128 <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c0:	f7fc fc32 	bl	8001128 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e04f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 020c 	and.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1eb      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d20c      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e032      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800494e:	f000 f821 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004952:	4602      	mov	r2, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	490a      	ldr	r1, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	5ccb      	ldrb	r3, [r1, r3]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_ClockConfig+0x1c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc fb96 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023c00 	.word	0x40023c00
 8004984:	40023800 	.word	0x40023800
 8004988:	08005894 	.word	0x08005894
 800498c:	20000000 	.word	0x20000000
 8004990:	20000004 	.word	0x20000004

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800499a:	2100      	movs	r1, #0
 800499c:	6079      	str	r1, [r7, #4]
 800499e:	2100      	movs	r1, #0
 80049a0:	60f9      	str	r1, [r7, #12]
 80049a2:	2100      	movs	r1, #0
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049a6:	2100      	movs	r1, #0
 80049a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049aa:	4952      	ldr	r1, [pc, #328]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ac:	6889      	ldr	r1, [r1, #8]
 80049ae:	f001 010c 	and.w	r1, r1, #12
 80049b2:	2908      	cmp	r1, #8
 80049b4:	d00d      	beq.n	80049d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80049b6:	2908      	cmp	r1, #8
 80049b8:	f200 8094 	bhi.w	8004ae4 <HAL_RCC_GetSysClockFreq+0x150>
 80049bc:	2900      	cmp	r1, #0
 80049be:	d002      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x32>
 80049c0:	2904      	cmp	r1, #4
 80049c2:	d003      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x38>
 80049c4:	e08e      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049c6:	4b4c      	ldr	r3, [pc, #304]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x164>)
 80049c8:	60bb      	str	r3, [r7, #8]
       break;
 80049ca:	e08e      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCC_GetSysClockFreq+0x168>)
 80049ce:	60bb      	str	r3, [r7, #8]
      break;
 80049d0:	e08b      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d2:	4948      	ldr	r1, [pc, #288]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049d4:	6849      	ldr	r1, [r1, #4]
 80049d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80049da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049dc:	4945      	ldr	r1, [pc, #276]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049de:	6849      	ldr	r1, [r1, #4]
 80049e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d024      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e8:	4942      	ldr	r1, [pc, #264]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ea:	6849      	ldr	r1, [r1, #4]
 80049ec:	0989      	lsrs	r1, r1, #6
 80049ee:	4608      	mov	r0, r1
 80049f0:	f04f 0100 	mov.w	r1, #0
 80049f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80049f8:	f04f 0500 	mov.w	r5, #0
 80049fc:	ea00 0204 	and.w	r2, r0, r4
 8004a00:	ea01 0305 	and.w	r3, r1, r5
 8004a04:	493d      	ldr	r1, [pc, #244]	; (8004afc <HAL_RCC_GetSysClockFreq+0x168>)
 8004a06:	fb01 f003 	mul.w	r0, r1, r3
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	fb01 f102 	mul.w	r1, r1, r2
 8004a10:	1844      	adds	r4, r0, r1
 8004a12:	493a      	ldr	r1, [pc, #232]	; (8004afc <HAL_RCC_GetSysClockFreq+0x168>)
 8004a14:	fba2 0101 	umull	r0, r1, r2, r1
 8004a18:	1863      	adds	r3, r4, r1
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	f7fb fbd0 	bl	80001c8 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	e04a      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	ea02 0400 	and.w	r4, r2, r0
 8004a4a:	ea03 0501 	and.w	r5, r3, r1
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	014b      	lsls	r3, r1, #5
 8004a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a60:	0142      	lsls	r2, r0, #5
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	1b00      	subs	r0, r0, r4
 8004a68:	eb61 0105 	sbc.w	r1, r1, r5
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	018b      	lsls	r3, r1, #6
 8004a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a7a:	0182      	lsls	r2, r0, #6
 8004a7c:	1a12      	subs	r2, r2, r0
 8004a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	00d9      	lsls	r1, r3, #3
 8004a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a90:	00d0      	lsls	r0, r2, #3
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	1912      	adds	r2, r2, r4
 8004a98:	eb45 0303 	adc.w	r3, r5, r3
 8004a9c:	f04f 0000 	mov.w	r0, #0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	0299      	lsls	r1, r3, #10
 8004aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004aaa:	0290      	lsls	r0, r2, #10
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	f7fb fb84 	bl	80001c8 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	60bb      	str	r3, [r7, #8]
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ae6:	60bb      	str	r3, [r7, #8]
      break;
 8004ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aea:	68bb      	ldr	r3, [r7, #8]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bdb0      	pop	{r4, r5, r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	017d7840 	.word	0x017d7840

08004b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000000 	.word	0x20000000

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a9b      	lsrs	r3, r3, #10
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	080058a4 	.word	0x080058a4

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b44:	f7ff ffdc 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0b5b      	lsrs	r3, r3, #13
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	080058a4 	.word	0x080058a4

08004b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e03f      	b.n	8004bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc f8b8 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2224      	movs	r2, #36	; 0x24
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fc71 	bl	8005494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b0ba      	sub	sp, #232	; 0xe8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_UART_IRQHandler+0x66>
 8004c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fb5b 	bl	800531e <UART_Receive_IT>
      return;
 8004c68:	e256      	b.n	8005118 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80de 	beq.w	8004e30 <HAL_UART_IRQHandler+0x22c>
 8004c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80d1 	beq.w	8004e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xae>
 8004c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f043 0201 	orr.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <HAL_UART_IRQHandler+0xd2>
 8004cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0202 	orr.w	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <HAL_UART_IRQHandler+0xf6>
 8004ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0204 	orr.w	r2, r3, #4
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d011      	beq.n	8004d2a <HAL_UART_IRQHandler+0x126>
 8004d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f043 0208 	orr.w	r2, r3, #8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 81ed 	beq.w	800510e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x14e>
 8004d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fae6 	bl	800531e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d103      	bne.n	8004d7e <HAL_UART_IRQHandler+0x17a>
 8004d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d04f      	beq.n	8004e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9ee 	bl	8005160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d141      	bne.n	8004e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3314      	adds	r3, #20
 8004d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1d9      	bne.n	8004d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d013      	beq.n	8004e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	4a7d      	ldr	r2, [pc, #500]	; (8004fe0 <HAL_UART_IRQHandler+0x3dc>)
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fc fbd4 	bl	80015a0 <HAL_DMA_Abort_IT>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d016      	beq.n	8004e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	e00e      	b.n	8004e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f990 	bl	8005134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	e00a      	b.n	8004e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f98c 	bl	8005134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	e006      	b.n	8004e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f988 	bl	8005134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e2a:	e170      	b.n	800510e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	bf00      	nop
    return;
 8004e2e:	e16e      	b.n	800510e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	f040 814a 	bne.w	80050ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8143 	beq.w	80050ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 813c 	beq.w	80050ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	f040 80b4 	bne.w	8004fe4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8140 	beq.w	8005112 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	f080 8139 	bcs.w	8005112 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb2:	f000 8088 	beq.w	8004fc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004eee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1d9      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3314      	adds	r3, #20
 8004f08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e1      	bne.n	8004f02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e3      	bne.n	8004f3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f96:	f023 0310 	bic.w	r3, r3, #16
 8004f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004faa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e3      	bne.n	8004f84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc fa7d 	bl	80014c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f8b6 	bl	8005148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fdc:	e099      	b.n	8005112 <HAL_UART_IRQHandler+0x50e>
 8004fde:	bf00      	nop
 8004fe0:	08005227 	.word	0x08005227
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 808b 	beq.w	8005116 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8086 	beq.w	8005116 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800502e:	647a      	str	r2, [r7, #68]	; 0x44
 8005030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e3      	bne.n	800500a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	623b      	str	r3, [r7, #32]
   return(result);
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005066:	633a      	str	r2, [r7, #48]	; 0x30
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800506c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e3      	bne.n	8005042 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60fb      	str	r3, [r7, #12]
   return(result);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050ac:	61fa      	str	r2, [r7, #28]
 80050ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e3      	bne.n	8005088 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f83e 	bl	8005148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050cc:	e023      	b.n	8005116 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_UART_IRQHandler+0x4ea>
 80050da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8b1 	bl	800524e <UART_Transmit_IT>
    return;
 80050ec:	e014      	b.n	8005118 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00e      	beq.n	8005118 <HAL_UART_IRQHandler+0x514>
 80050fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f8f1 	bl	80052ee <UART_EndTransmit_IT>
    return;
 800510c:	e004      	b.n	8005118 <HAL_UART_IRQHandler+0x514>
    return;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <HAL_UART_IRQHandler+0x514>
      return;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <HAL_UART_IRQHandler+0x514>
      return;
 8005116:	bf00      	nop
  }
}
 8005118:	37e8      	adds	r7, #232	; 0xe8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop

08005120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b095      	sub	sp, #84	; 0x54
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005188:	643a      	str	r2, [r7, #64]	; 0x40
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800518e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d119      	bne.n	800520c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	647b      	str	r3, [r7, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f8:	61ba      	str	r2, [r7, #24]
 80051fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	613b      	str	r3, [r7, #16]
   return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800521a:	bf00      	nop
 800521c:	3754      	adds	r7, #84	; 0x54
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff ff77 	bl	8005134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b21      	cmp	r3, #33	; 0x21
 8005260:	d13e      	bne.n	80052e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d114      	bne.n	8005296 <UART_Transmit_IT+0x48>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d110      	bne.n	8005296 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]
 8005294:	e008      	b.n	80052a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6211      	str	r1, [r2, #32]
 80052a0:	781a      	ldrb	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4619      	mov	r1, r3
 80052b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10f      	bne.n	80052dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ff06 	bl	8005120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b08c      	sub	sp, #48	; 0x30
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b22      	cmp	r3, #34	; 0x22
 8005330:	f040 80ab 	bne.w	800548a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	d117      	bne.n	800536e <UART_Receive_IT+0x50>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d113      	bne.n	800536e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535c:	b29a      	uxth	r2, r3
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
 800536c:	e026      	b.n	80053bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	d007      	beq.n	8005392 <UART_Receive_IT+0x74>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <UART_Receive_IT+0x82>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e008      	b.n	80053b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4619      	mov	r1, r3
 80053ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d15a      	bne.n	8005486 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0220 	bic.w	r2, r2, #32
 80053de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	2b01      	cmp	r3, #1
 800540e:	d135      	bne.n	800547c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	613b      	str	r3, [r7, #16]
   return(result);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f023 0310 	bic.w	r3, r3, #16
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	623a      	str	r2, [r7, #32]
 8005438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	69f9      	ldr	r1, [r7, #28]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	61bb      	str	r3, [r7, #24]
   return(result);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b10      	cmp	r3, #16
 8005456:	d10a      	bne.n	800546e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fe67 	bl	8005148 <HAL_UARTEx_RxEventCallback>
 800547a:	e002      	b.n	8005482 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fb f977 	bl	8000770 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e002      	b.n	800548c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
  }
}
 800548c:	4618      	mov	r0, r3
 800548e:	3730      	adds	r7, #48	; 0x30
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	b09f      	sub	sp, #124	; 0x7c
 800549a:	af00      	add	r7, sp, #0
 800549c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054aa:	68d9      	ldr	r1, [r3, #12]
 80054ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	ea40 0301 	orr.w	r3, r0, r1
 80054b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	431a      	orrs	r2, r3
 80054c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80054ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054d8:	f021 010c 	bic.w	r1, r1, #12
 80054dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e2:	430b      	orrs	r3, r1
 80054e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	6999      	ldr	r1, [r3, #24]
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	ea40 0301 	orr.w	r3, r0, r1
 80054fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4bc5      	ldr	r3, [pc, #788]	; (8005818 <UART_SetConfig+0x384>)
 8005504:	429a      	cmp	r2, r3
 8005506:	d004      	beq.n	8005512 <UART_SetConfig+0x7e>
 8005508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4bc3      	ldr	r3, [pc, #780]	; (800581c <UART_SetConfig+0x388>)
 800550e:	429a      	cmp	r2, r3
 8005510:	d103      	bne.n	800551a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005512:	f7ff fb15 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8005516:	6778      	str	r0, [r7, #116]	; 0x74
 8005518:	e002      	b.n	8005520 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800551a:	f7ff fafd 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 800551e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	f040 80b6 	bne.w	8005698 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800552c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800552e:	461c      	mov	r4, r3
 8005530:	f04f 0500 	mov.w	r5, #0
 8005534:	4622      	mov	r2, r4
 8005536:	462b      	mov	r3, r5
 8005538:	1891      	adds	r1, r2, r2
 800553a:	6439      	str	r1, [r7, #64]	; 0x40
 800553c:	415b      	adcs	r3, r3
 800553e:	647b      	str	r3, [r7, #68]	; 0x44
 8005540:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005544:	1912      	adds	r2, r2, r4
 8005546:	eb45 0303 	adc.w	r3, r5, r3
 800554a:	f04f 0000 	mov.w	r0, #0
 800554e:	f04f 0100 	mov.w	r1, #0
 8005552:	00d9      	lsls	r1, r3, #3
 8005554:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005558:	00d0      	lsls	r0, r2, #3
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	1911      	adds	r1, r2, r4
 8005560:	6639      	str	r1, [r7, #96]	; 0x60
 8005562:	416b      	adcs	r3, r5
 8005564:	667b      	str	r3, [r7, #100]	; 0x64
 8005566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	461a      	mov	r2, r3
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	1891      	adds	r1, r2, r2
 8005572:	63b9      	str	r1, [r7, #56]	; 0x38
 8005574:	415b      	adcs	r3, r3
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800557c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005580:	f7fa fe22 	bl	80001c8 <__aeabi_uldivmod>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4ba5      	ldr	r3, [pc, #660]	; (8005820 <UART_SetConfig+0x38c>)
 800558a:	fba3 2302 	umull	r2, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	011e      	lsls	r6, r3, #4
 8005592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005594:	461c      	mov	r4, r3
 8005596:	f04f 0500 	mov.w	r5, #0
 800559a:	4622      	mov	r2, r4
 800559c:	462b      	mov	r3, r5
 800559e:	1891      	adds	r1, r2, r2
 80055a0:	6339      	str	r1, [r7, #48]	; 0x30
 80055a2:	415b      	adcs	r3, r3
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
 80055a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055aa:	1912      	adds	r2, r2, r4
 80055ac:	eb45 0303 	adc.w	r3, r5, r3
 80055b0:	f04f 0000 	mov.w	r0, #0
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	00d9      	lsls	r1, r3, #3
 80055ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055be:	00d0      	lsls	r0, r2, #3
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	1911      	adds	r1, r2, r4
 80055c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80055c8:	416b      	adcs	r3, r5
 80055ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	461a      	mov	r2, r3
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	1891      	adds	r1, r2, r2
 80055d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80055da:	415b      	adcs	r3, r3
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80055e6:	f7fa fdef 	bl	80001c8 <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4b8c      	ldr	r3, [pc, #560]	; (8005820 <UART_SetConfig+0x38c>)
 80055f0:	fba3 1302 	umull	r1, r3, r3, r2
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	2164      	movs	r1, #100	; 0x64
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	3332      	adds	r3, #50	; 0x32
 8005602:	4a87      	ldr	r2, [pc, #540]	; (8005820 <UART_SetConfig+0x38c>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005610:	441e      	add	r6, r3
 8005612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005614:	4618      	mov	r0, r3
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	1894      	adds	r4, r2, r2
 8005620:	623c      	str	r4, [r7, #32]
 8005622:	415b      	adcs	r3, r3
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800562a:	1812      	adds	r2, r2, r0
 800562c:	eb41 0303 	adc.w	r3, r1, r3
 8005630:	f04f 0400 	mov.w	r4, #0
 8005634:	f04f 0500 	mov.w	r5, #0
 8005638:	00dd      	lsls	r5, r3, #3
 800563a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800563e:	00d4      	lsls	r4, r2, #3
 8005640:	4622      	mov	r2, r4
 8005642:	462b      	mov	r3, r5
 8005644:	1814      	adds	r4, r2, r0
 8005646:	653c      	str	r4, [r7, #80]	; 0x50
 8005648:	414b      	adcs	r3, r1
 800564a:	657b      	str	r3, [r7, #84]	; 0x54
 800564c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	461a      	mov	r2, r3
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	1891      	adds	r1, r2, r2
 8005658:	61b9      	str	r1, [r7, #24]
 800565a:	415b      	adcs	r3, r3
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005662:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005666:	f7fa fdaf 	bl	80001c8 <__aeabi_uldivmod>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4b6c      	ldr	r3, [pc, #432]	; (8005820 <UART_SetConfig+0x38c>)
 8005670:	fba3 1302 	umull	r1, r3, r3, r2
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	2164      	movs	r1, #100	; 0x64
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	3332      	adds	r3, #50	; 0x32
 8005682:	4a67      	ldr	r2, [pc, #412]	; (8005820 <UART_SetConfig+0x38c>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	f003 0207 	and.w	r2, r3, #7
 800568e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4432      	add	r2, r6
 8005694:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005696:	e0b9      	b.n	800580c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800569a:	461c      	mov	r4, r3
 800569c:	f04f 0500 	mov.w	r5, #0
 80056a0:	4622      	mov	r2, r4
 80056a2:	462b      	mov	r3, r5
 80056a4:	1891      	adds	r1, r2, r2
 80056a6:	6139      	str	r1, [r7, #16]
 80056a8:	415b      	adcs	r3, r3
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056b0:	1912      	adds	r2, r2, r4
 80056b2:	eb45 0303 	adc.w	r3, r5, r3
 80056b6:	f04f 0000 	mov.w	r0, #0
 80056ba:	f04f 0100 	mov.w	r1, #0
 80056be:	00d9      	lsls	r1, r3, #3
 80056c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056c4:	00d0      	lsls	r0, r2, #3
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	eb12 0804 	adds.w	r8, r2, r4
 80056ce:	eb43 0905 	adc.w	r9, r3, r5
 80056d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	008b      	lsls	r3, r1, #2
 80056e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056ea:	0082      	lsls	r2, r0, #2
 80056ec:	4640      	mov	r0, r8
 80056ee:	4649      	mov	r1, r9
 80056f0:	f7fa fd6a 	bl	80001c8 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b49      	ldr	r3, [pc, #292]	; (8005820 <UART_SetConfig+0x38c>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011e      	lsls	r6, r3, #4
 8005702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005704:	4618      	mov	r0, r3
 8005706:	f04f 0100 	mov.w	r1, #0
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	1894      	adds	r4, r2, r2
 8005710:	60bc      	str	r4, [r7, #8]
 8005712:	415b      	adcs	r3, r3
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800571a:	1812      	adds	r2, r2, r0
 800571c:	eb41 0303 	adc.w	r3, r1, r3
 8005720:	f04f 0400 	mov.w	r4, #0
 8005724:	f04f 0500 	mov.w	r5, #0
 8005728:	00dd      	lsls	r5, r3, #3
 800572a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800572e:	00d4      	lsls	r4, r2, #3
 8005730:	4622      	mov	r2, r4
 8005732:	462b      	mov	r3, r5
 8005734:	1814      	adds	r4, r2, r0
 8005736:	64bc      	str	r4, [r7, #72]	; 0x48
 8005738:	414b      	adcs	r3, r1
 800573a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800573c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	f04f 0100 	mov.w	r1, #0
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	008b      	lsls	r3, r1, #2
 8005750:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005754:	0082      	lsls	r2, r0, #2
 8005756:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800575a:	f7fa fd35 	bl	80001c8 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4b2f      	ldr	r3, [pc, #188]	; (8005820 <UART_SetConfig+0x38c>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	2164      	movs	r1, #100	; 0x64
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	3332      	adds	r3, #50	; 0x32
 8005776:	4a2a      	ldr	r2, [pc, #168]	; (8005820 <UART_SetConfig+0x38c>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005782:	441e      	add	r6, r3
 8005784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005786:	4618      	mov	r0, r3
 8005788:	f04f 0100 	mov.w	r1, #0
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	1894      	adds	r4, r2, r2
 8005792:	603c      	str	r4, [r7, #0]
 8005794:	415b      	adcs	r3, r3
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579c:	1812      	adds	r2, r2, r0
 800579e:	eb41 0303 	adc.w	r3, r1, r3
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	f04f 0500 	mov.w	r5, #0
 80057aa:	00dd      	lsls	r5, r3, #3
 80057ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057b0:	00d4      	lsls	r4, r2, #3
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	eb12 0a00 	adds.w	sl, r2, r0
 80057ba:	eb43 0b01 	adc.w	fp, r3, r1
 80057be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	008b      	lsls	r3, r1, #2
 80057d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057d6:	0082      	lsls	r2, r0, #2
 80057d8:	4650      	mov	r0, sl
 80057da:	4659      	mov	r1, fp
 80057dc:	f7fa fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <UART_SetConfig+0x38c>)
 80057e6:	fba3 1302 	umull	r1, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2164      	movs	r1, #100	; 0x64
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	3332      	adds	r3, #50	; 0x32
 80057f8:	4a09      	ldr	r2, [pc, #36]	; (8005820 <UART_SetConfig+0x38c>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4432      	add	r2, r6
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	377c      	adds	r7, #124	; 0x7c
 8005810:	46bd      	mov	sp, r7
 8005812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005816:	bf00      	nop
 8005818:	40011000 	.word	0x40011000
 800581c:	40011400 	.word	0x40011400
 8005820:	51eb851f 	.word	0x51eb851f

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	4d0d      	ldr	r5, [pc, #52]	; (800585c <__libc_init_array+0x38>)
 8005828:	4c0d      	ldr	r4, [pc, #52]	; (8005860 <__libc_init_array+0x3c>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	2600      	movs	r6, #0
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	4d0b      	ldr	r5, [pc, #44]	; (8005864 <__libc_init_array+0x40>)
 8005836:	4c0c      	ldr	r4, [pc, #48]	; (8005868 <__libc_init_array+0x44>)
 8005838:	f000 f820 	bl	800587c <_init>
 800583c:	1b64      	subs	r4, r4, r5
 800583e:	10a4      	asrs	r4, r4, #2
 8005840:	2600      	movs	r6, #0
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	f855 3b04 	ldr.w	r3, [r5], #4
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	f855 3b04 	ldr.w	r3, [r5], #4
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	080058bc 	.word	0x080058bc
 8005860:	080058bc 	.word	0x080058bc
 8005864:	080058bc 	.word	0x080058bc
 8005868:	080058c0 	.word	0x080058c0

0800586c <memset>:
 800586c:	4402      	add	r2, r0
 800586e:	4603      	mov	r3, r0
 8005870:	4293      	cmp	r3, r2
 8005872:	d100      	bne.n	8005876 <memset+0xa>
 8005874:	4770      	bx	lr
 8005876:	f803 1b01 	strb.w	r1, [r3], #1
 800587a:	e7f9      	b.n	8005870 <memset+0x4>

0800587c <_init>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	bf00      	nop
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr

08005888 <_fini>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	bf00      	nop
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr
