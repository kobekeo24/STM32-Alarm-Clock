
STM32-Alarm-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f4  080077f4  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077fc  080077fc  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000014c  08007950  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08007950  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee97  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbd  00000000  00000000  0002f013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00031838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d76  00000000  00000000  00032220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b3  00000000  00000000  00052f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5e4d  00000000  00000000  00060549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f44  00000000  00000000  001263ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800760c 	.word	0x0800760c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800760c 	.word	0x0800760c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <RTC_INIT_TIME>:

/* variables -----------------------------------------------------------------*/

/* funtions -----------------------------------------------------------------*/
void RTC_INIT_TIME(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	RTC_map.seconds_reg = TIME_SECONDS_REG;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <RTC_INIT_TIME+0x70>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	RTC_map.minutes_reg = TIME_MINUTES_REG;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	705a      	strb	r2, [r3, #1]
	RTC_map.hours_reg   = TIME_HOURS_REG;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	709a      	strb	r2, [r3, #2]
	RTC_map.day_reg     = TIME_DAY_REG;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	70da      	strb	r2, [r3, #3]
	RTC_map.date_reg    = TIME_DATE_REG;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	711a      	strb	r2, [r3, #4]
	RTC_map.month_reg 	= TIME_MONTH_REG;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005bc:	2205      	movs	r2, #5
 80005be:	715a      	strb	r2, [r3, #5]
	RTC_map.year_reg 	= TIME_YEAR_REG;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005c2:	2206      	movs	r2, #6
 80005c4:	719a      	strb	r2, [r3, #6]
	RTC_map.A1s_reg		= ALARM1_SECONDS_REG;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	71da      	strb	r2, [r3, #7]
	RTC_map.A1m_reg		= ALARM1_MINUTES_REG;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	721a      	strb	r2, [r3, #8]
	RTC_map.A1h_reg		= ALARM1_HOURS_REG;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	725a      	strb	r2, [r3, #9]
	RTC_map.A1dd_reg	= ALARM1_DAY_DATE_REG;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005da:	220a      	movs	r2, #10
 80005dc:	729a      	strb	r2, [r3, #10]
	RTC_map.A2m_reg		= ALARM2_MINUTES_REG;
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005e0:	220b      	movs	r2, #11
 80005e2:	72da      	strb	r2, [r3, #11]
	RTC_map.A2h_reg		= ALARM2_HOURS_REG;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	731a      	strb	r2, [r3, #12]
	RTC_map.A2dd_reg	= ALARM2_DAY_DATE_REG;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005ec:	220d      	movs	r2, #13
 80005ee:	735a      	strb	r2, [r3, #13]
	RTC_map.control_reg	= CONTROL_REG;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005f2:	220e      	movs	r2, #14
 80005f4:	739a      	strb	r2, [r3, #14]
	RTC_map.status_reg	= STATUS_REG;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005f8:	220f      	movs	r2, #15
 80005fa:	73da      	strb	r2, [r3, #15]
	for(uint8_t i = 0; i < STATUS_REG + 1; i++)
	{
		RTC_Read(i, (&RTC_mem.byte) + i);
	}
*/
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200002d0 	.word	0x200002d0

0800060c <RTC_Write>:

void RTC_Write(uint8_t reg, uint8_t data)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
	  static uint8_t payload[2];
	  payload[0] = reg;
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <RTC_Write+0x3c>)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	7013      	strb	r3, [r2, #0]
	  payload[1] = data;
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <RTC_Write+0x3c>)
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	7053      	strb	r3, [r2, #1]
	  HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS,payload,2,100);
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <RTC_Write+0x3c>)
 8000630:	21d0      	movs	r1, #208	; 0xd0
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <RTC_Write+0x40>)
 8000634:	f002 fa3c 	bl	8002ab0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(30);
 8000638:	201e      	movs	r0, #30
 800063a:	f001 f9c9 	bl	80019d0 <HAL_Delay>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000170 	.word	0x20000170
 800064c:	20000200 	.word	0x20000200

08000650 <RTC_Read>:

void RTC_Read(uint8_t* p_reg, uint8_t *p_data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	//Ask slave to read data from register
	HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS+1,p_reg,1,10);
 800065a:	230a      	movs	r3, #10
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	21d1      	movs	r1, #209	; 0xd1
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <RTC_Read+0x38>)
 8000666:	f002 fa23 	bl	8002ab0 <HAL_I2C_Master_Transmit>
	//Store data
	HAL_I2C_Master_Receive(&hi2c1,RTC_ADDRESS,p_data,1,10);
 800066a:	230a      	movs	r3, #10
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	21d0      	movs	r1, #208	; 0xd0
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <RTC_Read+0x38>)
 8000676:	f002 fb19 	bl	8002cac <HAL_I2C_Master_Receive>
	HAL_Delay(30);
 800067a:	201e      	movs	r0, #30
 800067c:	f001 f9a8 	bl	80019d0 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000200 	.word	0x20000200

0800068c <RTC_Enable_Alarm_IT>:

void RTC_Enable_Alarm_IT(uint8_t alarm)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&RTC_map.control_reg, (&RTC_mem.byte) +  RTC_map.control_reg);
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 8000698:	7b9b      	ldrb	r3, [r3, #14]
 800069a:	461a      	mov	r2, r3
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 800069e:	4413      	add	r3, r2
 80006a0:	4619      	mov	r1, r3
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <RTC_Enable_Alarm_IT+0x6c>)
 80006a4:	f7ff ffd4 	bl	8000650 <RTC_Read>
	//Enable Alarm 1 interrupt
	if(alarm == 1)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d108      	bne.n	80006c0 <RTC_Enable_Alarm_IT+0x34>
	{
		RTC_mem.mem.control_A1IE = 0x01;
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006b0:	7b93      	ldrb	r3, [r2, #14]
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm1_set = true;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	749a      	strb	r2, [r3, #18]
 80006be:	e007      	b.n	80006d0 <RTC_Enable_Alarm_IT+0x44>
	}
	//Enable Alarm 2 interrupt
	else
	{
		RTC_mem.mem.control_A2IE = 0x01;
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006c2:	7b93      	ldrb	r3, [r2, #14]
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm2_set = true;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	74da      	strb	r2, [r3, #19]
	}



	RTC_Write(RTC_map.control_reg, (&RTC_mem.byte)[RTC_map.control_reg]);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006d2:	7b9a      	ldrb	r2, [r3, #14]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006d6:	7b9b      	ldrb	r3, [r3, #14]
 80006d8:	4619      	mov	r1, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006dc:	440b      	add	r3, r1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f7ff ff92 	bl	800060c <RTC_Write>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200002d0 	.word	0x200002d0
 80006f4:	200001bc 	.word	0x200001bc
 80006f8:	200002de 	.word	0x200002de

080006fc <RTC_Clear_Alarm_IT>:

void RTC_Clear_Alarm_IT(uint8_t alarm)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&RTC_map.status_reg, (&RTC_mem.byte) + RTC_map.status_reg);
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000708:	7bdb      	ldrb	r3, [r3, #15]
 800070a:	461a      	mov	r2, r3
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800070e:	4413      	add	r3, r2
 8000710:	4619      	mov	r1, r3
 8000712:	4829      	ldr	r0, [pc, #164]	; (80007b8 <RTC_Clear_Alarm_IT+0xbc>)
 8000714:	f7ff ff9c 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.control_reg, (&RTC_mem.byte) +  RTC_map.control_reg);
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800071a:	7b9b      	ldrb	r3, [r3, #14]
 800071c:	461a      	mov	r2, r3
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000720:	4413      	add	r3, r2
 8000722:	4619      	mov	r1, r3
 8000724:	4825      	ldr	r0, [pc, #148]	; (80007bc <RTC_Clear_Alarm_IT+0xc0>)
 8000726:	f7ff ff93 	bl	8000650 <RTC_Read>

	//Clear Alarm 1 interrupt
	if(alarm == 1)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d110      	bne.n	8000752 <RTC_Clear_Alarm_IT+0x56>
	{
		RTC_mem.mem.status_A1F = 0;
 8000730:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000732:	7bd3      	ldrb	r3, [r2, #15]
 8000734:	f36f 0300 	bfc	r3, #0, #1
 8000738:	73d3      	strb	r3, [r2, #15]
		RTC_mem.mem.control_A1IE = 0;
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800073c:	7b93      	ldrb	r3, [r2, #14]
 800073e:	f36f 0300 	bfc	r3, #0, #1
 8000742:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm1_triggered = false;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000746:	2200      	movs	r2, #0
 8000748:	741a      	strb	r2, [r3, #16]

		RTC_map.b_alarm1_set = false;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800074c:	2200      	movs	r2, #0
 800074e:	749a      	strb	r2, [r3, #18]
 8000750:	e00f      	b.n	8000772 <RTC_Clear_Alarm_IT+0x76>
	}
	//Clear Alarm 2 interrupt
	else
	{
		RTC_mem.mem.status_A2F = 0;
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000754:	7bd3      	ldrb	r3, [r2, #15]
 8000756:	f36f 0341 	bfc	r3, #1, #1
 800075a:	73d3      	strb	r3, [r2, #15]
		RTC_mem.mem.control_A2IE = 0;
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800075e:	7b93      	ldrb	r3, [r2, #14]
 8000760:	f36f 0341 	bfc	r3, #1, #1
 8000764:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm2_triggered = false;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000768:	2200      	movs	r2, #0
 800076a:	745a      	strb	r2, [r3, #17]

		RTC_map.b_alarm2_set = false;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800076e:	2200      	movs	r2, #0
 8000770:	74da      	strb	r2, [r3, #19]
	}

	RTC_Write(RTC_map.control_reg, (&RTC_mem.byte)[RTC_map.control_reg]);
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000774:	7b9a      	ldrb	r2, [r3, #14]
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000778:	7b9b      	ldrb	r3, [r3, #14]
 800077a:	4619      	mov	r1, r3
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800077e:	440b      	add	r3, r1
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	4610      	mov	r0, r2
 8000786:	f7ff ff41 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.status_reg, (&RTC_mem.byte)[RTC_map.status_reg]);
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800078c:	7bda      	ldrb	r2, [r3, #15]
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000790:	7bdb      	ldrb	r3, [r3, #15]
 8000792:	4619      	mov	r1, r3
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000796:	440b      	add	r3, r1
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	4610      	mov	r0, r2
 800079e:	f7ff ff35 	bl	800060c <RTC_Write>
	HAL_Delay(30);
 80007a2:	201e      	movs	r0, #30
 80007a4:	f001 f914 	bl	80019d0 <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200002d0 	.word	0x200002d0
 80007b4:	200001bc 	.word	0x200001bc
 80007b8:	200002df 	.word	0x200002df
 80007bc:	200002de 	.word	0x200002de

080007c0 <RTC_Display_Time>:

void RTC_Display_Time(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af02      	add	r7, sp, #8
	static uint8_t seconds, minutes, hours, day;
	RTC_Read(&RTC_map.seconds_reg, (&RTC_mem.byte) + RTC_map.seconds_reg);
 80007c6:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <RTC_Display_Time+0x108>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <RTC_Display_Time+0x10c>)
 80007ce:	4413      	add	r3, r2
 80007d0:	4619      	mov	r1, r3
 80007d2:	483d      	ldr	r0, [pc, #244]	; (80008c8 <RTC_Display_Time+0x108>)
 80007d4:	f7ff ff3c 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.minutes_reg, (&RTC_mem.byte) + RTC_map.minutes_reg);
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <RTC_Display_Time+0x108>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <RTC_Display_Time+0x10c>)
 80007e0:	4413      	add	r3, r2
 80007e2:	4619      	mov	r1, r3
 80007e4:	483a      	ldr	r0, [pc, #232]	; (80008d0 <RTC_Display_Time+0x110>)
 80007e6:	f7ff ff33 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.hours_reg, (&RTC_mem.byte) + RTC_map.hours_reg);
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <RTC_Display_Time+0x108>)
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b36      	ldr	r3, [pc, #216]	; (80008cc <RTC_Display_Time+0x10c>)
 80007f2:	4413      	add	r3, r2
 80007f4:	4619      	mov	r1, r3
 80007f6:	4837      	ldr	r0, [pc, #220]	; (80008d4 <RTC_Display_Time+0x114>)
 80007f8:	f7ff ff2a 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.day_reg, (&RTC_mem.byte) + RTC_map.day_reg);
 80007fc:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <RTC_Display_Time+0x108>)
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	461a      	mov	r2, r3
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <RTC_Display_Time+0x10c>)
 8000804:	4413      	add	r3, r2
 8000806:	4619      	mov	r1, r3
 8000808:	4833      	ldr	r0, [pc, #204]	; (80008d8 <RTC_Display_Time+0x118>)
 800080a:	f7ff ff21 	bl	8000650 <RTC_Read>

	seconds = (&RTC_mem.byte)[RTC_map.seconds_reg];
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <RTC_Display_Time+0x108>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <RTC_Display_Time+0x10c>)
 8000816:	4413      	add	r3, r2
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <RTC_Display_Time+0x11c>)
 800081c:	701a      	strb	r2, [r3, #0]
	minutes = (&RTC_mem.byte)[RTC_map.minutes_reg];
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <RTC_Display_Time+0x108>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	461a      	mov	r2, r3
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <RTC_Display_Time+0x10c>)
 8000826:	4413      	add	r3, r2
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <RTC_Display_Time+0x120>)
 800082c:	701a      	strb	r2, [r3, #0]
	//hours   = RTC_mem.mem.hours_10s << 4 + RTC_mem.mem.hours_1s;
	day     = (&RTC_mem.byte)[RTC_map.day_reg];
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <RTC_Display_Time+0x108>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	461a      	mov	r2, r3
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <RTC_Display_Time+0x10c>)
 8000836:	4413      	add	r3, r2
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <RTC_Display_Time+0x124>)
 800083c:	701a      	strb	r2, [r3, #0]

	if(last_second != seconds || last_minute != minutes || last_hour != hours)
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <RTC_Display_Time+0x128>)
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <RTC_Display_Time+0x11c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d10b      	bne.n	8000862 <RTC_Display_Time+0xa2>
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <RTC_Display_Time+0x12c>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <RTC_Display_Time+0x120>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d105      	bne.n	8000862 <RTC_Display_Time+0xa2>
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <RTC_Display_Time+0x130>)
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <RTC_Display_Time+0x134>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d022      	beq.n	80008a8 <RTC_Display_Time+0xe8>
	{
		sprintf(txData, "%x%x:%x:%x\n",RTC_mem.mem.hours_10s,RTC_mem.mem.hours_1s, minutes, seconds);
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <RTC_Display_Time+0x10c>)
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <RTC_Display_Time+0x10c>)
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <RTC_Display_Time+0x120>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <RTC_Display_Time+0x11c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	9200      	str	r2, [sp, #0]
 8000888:	4603      	mov	r3, r0
 800088a:	460a      	mov	r2, r1
 800088c:	491a      	ldr	r1, [pc, #104]	; (80008f8 <RTC_Display_Time+0x138>)
 800088e:	481b      	ldr	r0, [pc, #108]	; (80008fc <RTC_Display_Time+0x13c>)
 8000890:	f006 fa00 	bl	8006c94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 10);
 8000894:	4819      	ldr	r0, [pc, #100]	; (80008fc <RTC_Display_Time+0x13c>)
 8000896:	f7ff fca5 	bl	80001e4 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	230a      	movs	r3, #10
 80008a0:	4916      	ldr	r1, [pc, #88]	; (80008fc <RTC_Display_Time+0x13c>)
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <RTC_Display_Time+0x140>)
 80008a4:	f005 f8bb 	bl	8005a1e <HAL_UART_Transmit>
	}
	last_second = seconds;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <RTC_Display_Time+0x11c>)
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <RTC_Display_Time+0x128>)
 80008ae:	701a      	strb	r2, [r3, #0]
	last_minute = minutes;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <RTC_Display_Time+0x120>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <RTC_Display_Time+0x12c>)
 80008b6:	701a      	strb	r2, [r3, #0]
	last_hour	= hours;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <RTC_Display_Time+0x134>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <RTC_Display_Time+0x130>)
 80008be:	701a      	strb	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200002d0 	.word	0x200002d0
 80008cc:	200001bc 	.word	0x200001bc
 80008d0:	200002d1 	.word	0x200002d1
 80008d4:	200002d2 	.word	0x200002d2
 80008d8:	200002d3 	.word	0x200002d3
 80008dc:	20000172 	.word	0x20000172
 80008e0:	20000173 	.word	0x20000173
 80008e4:	20000174 	.word	0x20000174
 80008e8:	20000168 	.word	0x20000168
 80008ec:	20000169 	.word	0x20000169
 80008f0:	2000016a 	.word	0x2000016a
 80008f4:	20000175 	.word	0x20000175
 80008f8:	08007624 	.word	0x08007624
 80008fc:	200001cc 	.word	0x200001cc
 8000900:	2000028c 	.word	0x2000028c

08000904 <RTC_Set_Time>:
	(&RTC_mem.byte)[RTC_map.hours_reg] = hours;
	RTC_Write(RTC_map.hours_reg, hours);
}

void RTC_Set_Time(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	460b      	mov	r3, r1
 8000910:	71bb      	strb	r3, [r7, #6]
 8000912:	4613      	mov	r3, r2
 8000914:	717b      	strb	r3, [r7, #5]
	(&RTC_mem.byte)[RTC_map.seconds_reg] = seconds;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <RTC_Set_Time+0x70>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <RTC_Set_Time+0x74>)
 800091e:	4413      	add	r3, r2
 8000920:	797a      	ldrb	r2, [r7, #5]
 8000922:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.minutes_reg] = minutes;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <RTC_Set_Time+0x70>)
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	461a      	mov	r2, r3
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <RTC_Set_Time+0x74>)
 800092c:	4413      	add	r3, r2
 800092e:	79ba      	ldrb	r2, [r7, #6]
 8000930:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.hours_reg]   = hours;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <RTC_Set_Time+0x70>)
 8000934:	789b      	ldrb	r3, [r3, #2]
 8000936:	461a      	mov	r2, r3
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <RTC_Set_Time+0x74>)
 800093a:	4413      	add	r3, r2
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	701a      	strb	r2, [r3, #0]

	RTC_Write(RTC_map.seconds_reg, seconds);
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <RTC_Set_Time+0x70>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	797a      	ldrb	r2, [r7, #5]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fe5f 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.minutes_reg, minutes);
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <RTC_Set_Time+0x70>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe58 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.hours_reg, hours);
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <RTC_Set_Time+0x70>)
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe51 	bl	800060c <RTC_Write>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200002d0 	.word	0x200002d0
 8000978:	200001bc 	.word	0x200001bc

0800097c <RTC_Day_Date>:

void RTC_Day_Date(uint8_t day, uint8_t date)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
	(&RTC_mem.byte)[RTC_map.day_reg] = day;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <RTC_Day_Date+0x50>)
 800098e:	78db      	ldrb	r3, [r3, #3]
 8000990:	461a      	mov	r2, r3
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <RTC_Day_Date+0x54>)
 8000994:	4413      	add	r3, r2
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.date_reg] = date;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <RTC_Day_Date+0x50>)
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	461a      	mov	r2, r3
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <RTC_Day_Date+0x54>)
 80009a2:	4413      	add	r3, r2
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	701a      	strb	r2, [r3, #0]

	RTC_Write(RTC_map.day_reg, day);
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <RTC_Day_Date+0x50>)
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe2b 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.date_reg, date);
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <RTC_Day_Date+0x50>)
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	79ba      	ldrb	r2, [r7, #6]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe24 	bl	800060c <RTC_Write>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200002d0 	.word	0x200002d0
 80009d0:	200001bc 	.word	0x200001bc

080009d4 <RTC_Set_Alarm>:

void RTC_Set_Alarm(uint8_t alarm, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4604      	mov	r4, r0
 80009dc:	4608      	mov	r0, r1
 80009de:	4611      	mov	r1, r2
 80009e0:	461a      	mov	r2, r3
 80009e2:	4623      	mov	r3, r4
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	4603      	mov	r3, r0
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	460b      	mov	r3, r1
 80009ec:	717b      	strb	r3, [r7, #5]
 80009ee:	4613      	mov	r3, r2
 80009f0:	713b      	strb	r3, [r7, #4]
	if(alarm == 0x01)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d152      	bne.n	8000a9e <RTC_Set_Alarm+0xca>
	{
		(&RTC_mem.byte)[RTC_map.A1s_reg] = seconds;
 80009f8:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <RTC_Set_Alarm+0x154>)
 80009fa:	79db      	ldrb	r3, [r3, #7]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a00:	4413      	add	r3, r2
 8000a02:	793a      	ldrb	r2, [r7, #4]
 8000a04:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A1m_reg] = minutes;
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a08:	7a1b      	ldrb	r3, [r3, #8]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a0e:	4413      	add	r3, r2
 8000a10:	797a      	ldrb	r2, [r7, #5]
 8000a12:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A1h_reg]   = hours;
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a16:	7a5b      	ldrb	r3, [r3, #9]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a1c:	4413      	add	r3, r2
 8000a1e:	79ba      	ldrb	r2, [r7, #6]
 8000a20:	701a      	strb	r2, [r3, #0]
		RTC_mem.mem.A1_day_date_sel = 0x01;
 8000a22:	4a42      	ldr	r2, [pc, #264]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a24:	7a93      	ldrb	r3, [r2, #10]
 8000a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2a:	7293      	strb	r3, [r2, #10]
		RTC_mem.mem.A1_day_date =  RTC_mem.mem.day;
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	b2d9      	uxtb	r1, r3
 8000a3c:	4a3b      	ldr	r2, [pc, #236]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a3e:	7a93      	ldrb	r3, [r2, #10]
 8000a40:	f361 0303 	bfi	r3, r1, #0, #4
 8000a44:	7293      	strb	r3, [r2, #10]


		RTC_Write(RTC_map.A1s_reg, seconds);
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a48:	79db      	ldrb	r3, [r3, #7]
 8000a4a:	793a      	ldrb	r2, [r7, #4]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fddc 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A1m_reg, minutes);
 8000a54:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a56:	7a1b      	ldrb	r3, [r3, #8]
 8000a58:	797a      	ldrb	r2, [r7, #5]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fdd5 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A1h_reg, hours);
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a64:	7a5b      	ldrb	r3, [r3, #9]
 8000a66:	79ba      	ldrb	r2, [r7, #6]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdce 	bl	800060c <RTC_Write>
		RTC_Read(&RTC_map.A1dd_reg, (&RTC_mem.byte)[RTC_map.A1dd_reg]);
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a72:	7a9b      	ldrb	r3, [r3, #10]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482c      	ldr	r0, [pc, #176]	; (8000b30 <RTC_Set_Alarm+0x15c>)
 8000a80:	f7ff fde6 	bl	8000650 <RTC_Read>
		RTC_Write(RTC_map.A1dd_reg, (&RTC_mem.byte)[RTC_map.A1dd_reg]);
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a86:	7a9a      	ldrb	r2, [r3, #10]
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000a8a:	7a9b      	ldrb	r3, [r3, #10]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000a90:	440b      	add	r3, r1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4610      	mov	r0, r2
 8000a98:	f7ff fdb8 	bl	800060c <RTC_Write>
 8000a9c:	e038      	b.n	8000b10 <RTC_Set_Alarm+0x13c>
	}

	else if(alarm == 0x02)
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d135      	bne.n	8000b10 <RTC_Set_Alarm+0x13c>
	{
		(&RTC_mem.byte)[RTC_map.A2m_reg] = minutes;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000aa6:	7adb      	ldrb	r3, [r3, #11]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000aac:	4413      	add	r3, r2
 8000aae:	797a      	ldrb	r2, [r7, #5]
 8000ab0:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A2h_reg]   = hours;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000ab4:	7b1b      	ldrb	r3, [r3, #12]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000aba:	4413      	add	r3, r2
 8000abc:	79ba      	ldrb	r2, [r7, #6]
 8000abe:	701a      	strb	r2, [r3, #0]
		RTC_mem.mem.A2_day_date_sel = 0x01;
 8000ac0:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000ac2:	7b53      	ldrb	r3, [r2, #13]
 8000ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac8:	7353      	strb	r3, [r2, #13]

		RTC_Write(RTC_map.A2m_reg, minutes);
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000acc:	7adb      	ldrb	r3, [r3, #11]
 8000ace:	797a      	ldrb	r2, [r7, #5]
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A2h_reg, hours);
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000ada:	7b1b      	ldrb	r3, [r3, #12]
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd93 	bl	800060c <RTC_Write>
		RTC_Read(&RTC_map.A2dd_reg, (&RTC_mem.byte)+ RTC_map.A2dd_reg);
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000ae8:	7b5b      	ldrb	r3, [r3, #13]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000aee:	4413      	add	r3, r2
 8000af0:	4619      	mov	r1, r3
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <RTC_Set_Alarm+0x160>)
 8000af4:	f7ff fdac 	bl	8000650 <RTC_Read>
		RTC_Write(RTC_map.A2dd_reg, (&RTC_mem.byte) + RTC_map.A2dd_reg);
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000afa:	7b5b      	ldrb	r3, [r3, #13]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <RTC_Set_Alarm+0x154>)
 8000afe:	7b52      	ldrb	r2, [r2, #13]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <RTC_Set_Alarm+0x158>)
 8000b04:	440a      	add	r2, r1
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fd7e 	bl	800060c <RTC_Write>
	}
	RTC_Clear_Alarm_IT(alarm);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fdf2 	bl	80006fc <RTC_Clear_Alarm_IT>
	RTC_Enable_Alarm_IT(alarm);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fdb6 	bl	800068c <RTC_Enable_Alarm_IT>
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	200002d0 	.word	0x200002d0
 8000b2c:	200001bc 	.word	0x200001bc
 8000b30:	200002da 	.word	0x200002da
 8000b34:	200002dd 	.word	0x200002dd

08000b38 <RTC_Alarm_triggered>:

bool RTC_Alarm_triggered(uint8_t alarm)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	if(RTC_is_Alarm_triggered())
 8000b42:	f000 f817 	bl	8000b74 <RTC_is_Alarm_triggered>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00b      	beq.n	8000b64 <RTC_Alarm_triggered+0x2c>
	{
		if(alarm == 0x01)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <RTC_Alarm_triggered+0x20>
		{
			return RTC_map.b_alarm1_triggered;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <RTC_Alarm_triggered+0x38>)
 8000b54:	7c1b      	ldrb	r3, [r3, #16]
 8000b56:	e007      	b.n	8000b68 <RTC_Alarm_triggered+0x30>
		}
		else if(alarm == 0x02)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d104      	bne.n	8000b68 <RTC_Alarm_triggered+0x30>
		{
			return RTC_map.b_alarm2_triggered;
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <RTC_Alarm_triggered+0x38>)
 8000b60:	7c5b      	ldrb	r3, [r3, #17]
 8000b62:	e001      	b.n	8000b68 <RTC_Alarm_triggered+0x30>
		}
	}
	else
	{
		return false;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e7ff      	b.n	8000b68 <RTC_Alarm_triggered+0x30>
	}
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200002d0 	.word	0x200002d0

08000b74 <RTC_is_Alarm_triggered>:

bool RTC_is_Alarm_triggered(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	RTC_Read(&RTC_map.status_reg, (&RTC_mem.byte) + RTC_map.status_reg);
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <RTC_is_Alarm_triggered+0x50>)
 8000b7a:	7bdb      	ldrb	r3, [r3, #15]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <RTC_is_Alarm_triggered+0x54>)
 8000b80:	4413      	add	r3, r2
 8000b82:	4619      	mov	r1, r3
 8000b84:	4811      	ldr	r0, [pc, #68]	; (8000bcc <RTC_is_Alarm_triggered+0x58>)
 8000b86:	f7ff fd63 	bl	8000650 <RTC_Read>
	if(b_alarm_triggered)
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <RTC_is_Alarm_triggered+0x5c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d014      	beq.n	8000bbc <RTC_is_Alarm_triggered+0x48>
	{
		if(RTC_mem.mem.status_A1F == 1)
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <RTC_is_Alarm_triggered+0x54>)
 8000b94:	7bdb      	ldrb	r3, [r3, #15]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <RTC_is_Alarm_triggered+0x34>
		{
			RTC_map.b_alarm1_triggered = true;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <RTC_is_Alarm_triggered+0x50>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	741a      	strb	r2, [r3, #16]
 8000ba6:	e009      	b.n	8000bbc <RTC_is_Alarm_triggered+0x48>
		}
		else if(RTC_mem.mem.status_A2F == 1)
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <RTC_is_Alarm_triggered+0x54>)
 8000baa:	7bdb      	ldrb	r3, [r3, #15]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <RTC_is_Alarm_triggered+0x48>
		{
			RTC_map.b_alarm2_triggered = true;
 8000bb6:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <RTC_is_Alarm_triggered+0x50>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	745a      	strb	r2, [r3, #17]
		}
	}
	return b_alarm_triggered;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <RTC_is_Alarm_triggered+0x5c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200002d0 	.word	0x200002d0
 8000bc8:	200001bc 	.word	0x200001bc
 8000bcc:	200002df 	.word	0x200002df
 8000bd0:	2000016b 	.word	0x2000016b

08000bd4 <RTC_User_Set_Time>:

void RTC_User_Set_Time(bool b_set_alarm)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	static uint8_t user_seconds;
	static uint8_t user_minutes;
	static uint8_t user_hours;

	g_user_buffer_index = 0;
 8000bde:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <RTC_User_Set_Time+0x1e8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000be4:	2232      	movs	r2, #50	; 0x32
 8000be6:	2100      	movs	r1, #0
 8000be8:	4875      	ldr	r0, [pc, #468]	; (8000dc0 <RTC_User_Set_Time+0x1ec>)
 8000bea:	f006 f84b 	bl	8006c84 <memset>
	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_seconds,strlen(Ask_seconds), 50);
 8000bee:	4875      	ldr	r0, [pc, #468]	; (8000dc4 <RTC_User_Set_Time+0x1f0>)
 8000bf0:	f7ff faf8 	bl	80001e4 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2332      	movs	r3, #50	; 0x32
 8000bfa:	4972      	ldr	r1, [pc, #456]	; (8000dc4 <RTC_User_Set_Time+0x1f0>)
 8000bfc:	4872      	ldr	r0, [pc, #456]	; (8000dc8 <RTC_User_Set_Time+0x1f4>)
 8000bfe:	f004 ff0e 	bl	8005a1e <HAL_UART_Transmit>
	HAL_Delay(200);
 8000c02:	20c8      	movs	r0, #200	; 0xc8
 8000c04:	f000 fee4 	bl	80019d0 <HAL_Delay>
	while(!b_message_received);
 8000c08:	bf00      	nop
 8000c0a:	4b70      	ldr	r3, [pc, #448]	; (8000dcc <RTC_User_Set_Time+0x1f8>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f083 0301 	eor.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1f8      	bne.n	8000c0a <RTC_User_Set_Time+0x36>
	HAL_Delay(50);
 8000c18:	2032      	movs	r0, #50	; 0x32
 8000c1a:	f000 fed9 	bl	80019d0 <HAL_Delay>
	user_seconds = HEX_LUT[ atoi(g_user_buffer) ];
 8000c1e:	4868      	ldr	r0, [pc, #416]	; (8000dc0 <RTC_User_Set_Time+0x1ec>)
 8000c20:	f006 f802 	bl	8006c28 <atoi>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4a6a      	ldr	r2, [pc, #424]	; (8000dd0 <RTC_User_Set_Time+0x1fc>)
 8000c28:	5cd2      	ldrb	r2, [r2, r3]
 8000c2a:	4b6a      	ldr	r3, [pc, #424]	; (8000dd4 <RTC_User_Set_Time+0x200>)
 8000c2c:	701a      	strb	r2, [r3, #0]

	g_user_buffer_index = 0;
 8000c2e:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <RTC_User_Set_Time+0x1e8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000c34:	2232      	movs	r2, #50	; 0x32
 8000c36:	2100      	movs	r1, #0
 8000c38:	4861      	ldr	r0, [pc, #388]	; (8000dc0 <RTC_User_Set_Time+0x1ec>)
 8000c3a:	f006 f823 	bl	8006c84 <memset>
	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_minutes,strlen(Ask_minutes), 50);
 8000c3e:	4866      	ldr	r0, [pc, #408]	; (8000dd8 <RTC_User_Set_Time+0x204>)
 8000c40:	f7ff fad0 	bl	80001e4 <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	2332      	movs	r3, #50	; 0x32
 8000c4a:	4963      	ldr	r1, [pc, #396]	; (8000dd8 <RTC_User_Set_Time+0x204>)
 8000c4c:	485e      	ldr	r0, [pc, #376]	; (8000dc8 <RTC_User_Set_Time+0x1f4>)
 8000c4e:	f004 fee6 	bl	8005a1e <HAL_UART_Transmit>
	b_message_received = false;
 8000c52:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <RTC_User_Set_Time+0x1f8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8000c58:	20c8      	movs	r0, #200	; 0xc8
 8000c5a:	f000 feb9 	bl	80019d0 <HAL_Delay>
	while(!b_message_received);
 8000c5e:	bf00      	nop
 8000c60:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <RTC_User_Set_Time+0x1f8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	f083 0301 	eor.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f8      	bne.n	8000c60 <RTC_User_Set_Time+0x8c>
	HAL_Delay(50);
 8000c6e:	2032      	movs	r0, #50	; 0x32
 8000c70:	f000 feae 	bl	80019d0 <HAL_Delay>
	user_minutes = HEX_LUT[ atoi(g_user_buffer) ];
 8000c74:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <RTC_User_Set_Time+0x1ec>)
 8000c76:	f005 ffd7 	bl	8006c28 <atoi>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a54      	ldr	r2, [pc, #336]	; (8000dd0 <RTC_User_Set_Time+0x1fc>)
 8000c7e:	5cd2      	ldrb	r2, [r2, r3]
 8000c80:	4b56      	ldr	r3, [pc, #344]	; (8000ddc <RTC_User_Set_Time+0x208>)
 8000c82:	701a      	strb	r2, [r3, #0]

	g_user_buffer_index = 0;
 8000c84:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <RTC_User_Set_Time+0x1e8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000c8a:	2232      	movs	r2, #50	; 0x32
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	484c      	ldr	r0, [pc, #304]	; (8000dc0 <RTC_User_Set_Time+0x1ec>)
 8000c90:	f005 fff8 	bl	8006c84 <memset>
	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_hours,strlen(Ask_hours), 50);
 8000c94:	4852      	ldr	r0, [pc, #328]	; (8000de0 <RTC_User_Set_Time+0x20c>)
 8000c96:	f7ff faa5 	bl	80001e4 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	2332      	movs	r3, #50	; 0x32
 8000ca0:	494f      	ldr	r1, [pc, #316]	; (8000de0 <RTC_User_Set_Time+0x20c>)
 8000ca2:	4849      	ldr	r0, [pc, #292]	; (8000dc8 <RTC_User_Set_Time+0x1f4>)
 8000ca4:	f004 febb 	bl	8005a1e <HAL_UART_Transmit>
	b_message_received = false;
 8000ca8:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <RTC_User_Set_Time+0x1f8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8000cae:	20c8      	movs	r0, #200	; 0xc8
 8000cb0:	f000 fe8e 	bl	80019d0 <HAL_Delay>
	while(!b_message_received);
 8000cb4:	bf00      	nop
 8000cb6:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <RTC_User_Set_Time+0x1f8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f083 0301 	eor.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f8      	bne.n	8000cb6 <RTC_User_Set_Time+0xe2>
	HAL_Delay(100);
 8000cc4:	2064      	movs	r0, #100	; 0x64
 8000cc6:	f000 fe83 	bl	80019d0 <HAL_Delay>
	user_hours = HEX_LUT[ atoi(g_user_buffer) ];
 8000cca:	483d      	ldr	r0, [pc, #244]	; (8000dc0 <RTC_User_Set_Time+0x1ec>)
 8000ccc:	f005 ffac 	bl	8006c28 <atoi>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <RTC_User_Set_Time+0x1fc>)
 8000cd4:	5cd2      	ldrb	r2, [r2, r3]
 8000cd6:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <RTC_User_Set_Time+0x210>)
 8000cd8:	701a      	strb	r2, [r3, #0]


	b_message_received = false;
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <RTC_User_Set_Time+0x1f8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	if(b_set_alarm)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d03b      	beq.n	8000d5e <RTC_User_Set_Time+0x18a>
	{
		RTC_mem.mem.A1_hours_1s = user_hours;
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <RTC_User_Set_Time+0x210>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	b2d9      	uxtb	r1, r3
 8000cf0:	4a3d      	ldr	r2, [pc, #244]	; (8000de8 <RTC_User_Set_Time+0x214>)
 8000cf2:	7a53      	ldrb	r3, [r2, #9]
 8000cf4:	f361 0303 	bfi	r3, r1, #0, #4
 8000cf8:	7253      	strb	r3, [r2, #9]
		RTC_mem.mem.A1_hours_10s = user_hours >> 4;
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <RTC_User_Set_Time+0x210>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	b2d9      	uxtb	r1, r3
 8000d08:	4a37      	ldr	r2, [pc, #220]	; (8000de8 <RTC_User_Set_Time+0x214>)
 8000d0a:	7a53      	ldrb	r3, [r2, #9]
 8000d0c:	f361 1304 	bfi	r3, r1, #4, #1
 8000d10:	7253      	strb	r3, [r2, #9]

		RTC_Set_Alarm(0x01, (&RTC_mem.byte)[RTC_map.A1h_reg], user_minutes, user_seconds);
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <RTC_User_Set_Time+0x218>)
 8000d14:	7a5b      	ldrb	r3, [r3, #9]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <RTC_User_Set_Time+0x214>)
 8000d1a:	4413      	add	r3, r2
 8000d1c:	7819      	ldrb	r1, [r3, #0]
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <RTC_User_Set_Time+0x208>)
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <RTC_User_Set_Time+0x200>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff fe54 	bl	80009d4 <RTC_Set_Alarm>

		sprintf(txData,"Alarm Set: %d:%d:d",user_hours,user_minutes,user_seconds);
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <RTC_User_Set_Time+0x210>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <RTC_User_Set_Time+0x208>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <RTC_User_Set_Time+0x200>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	492b      	ldr	r1, [pc, #172]	; (8000df0 <RTC_User_Set_Time+0x21c>)
 8000d42:	482c      	ldr	r0, [pc, #176]	; (8000df4 <RTC_User_Set_Time+0x220>)
 8000d44:	f005 ffa6 	bl	8006c94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000d48:	482a      	ldr	r0, [pc, #168]	; (8000df4 <RTC_User_Set_Time+0x220>)
 8000d4a:	f7ff fa4b 	bl	80001e4 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	2332      	movs	r3, #50	; 0x32
 8000d54:	4927      	ldr	r1, [pc, #156]	; (8000df4 <RTC_User_Set_Time+0x220>)
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <RTC_User_Set_Time+0x1f4>)
 8000d58:	f004 fe61 	bl	8005a1e <HAL_UART_Transmit>
 8000d5c:	e022      	b.n	8000da4 <RTC_User_Set_Time+0x1d0>
	}

	else
	{
		RTC_mem.mem.hours_1s = user_hours;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <RTC_User_Set_Time+0x210>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	b2d9      	uxtb	r1, r3
 8000d68:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <RTC_User_Set_Time+0x214>)
 8000d6a:	7893      	ldrb	r3, [r2, #2]
 8000d6c:	f361 0303 	bfi	r3, r1, #0, #4
 8000d70:	7093      	strb	r3, [r2, #2]
		RTC_mem.mem.hours_10s = user_hours >> 4;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <RTC_User_Set_Time+0x210>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	b2d9      	uxtb	r1, r3
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <RTC_User_Set_Time+0x214>)
 8000d82:	7893      	ldrb	r3, [r2, #2]
 8000d84:	f361 1304 	bfi	r3, r1, #4, #1
 8000d88:	7093      	strb	r3, [r2, #2]
		RTC_Set_Time( (&RTC_mem.byte)[RTC_map.hours_reg], user_minutes, user_seconds);
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <RTC_User_Set_Time+0x218>)
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <RTC_User_Set_Time+0x214>)
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <RTC_User_Set_Time+0x208>)
 8000d98:	7811      	ldrb	r1, [r2, #0]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <RTC_User_Set_Time+0x200>)
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fdb0 	bl	8000904 <RTC_Set_Time>
	}
	g_user_buffer_index = 0;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <RTC_User_Set_Time+0x1e8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000daa:	2232      	movs	r2, #50	; 0x32
 8000dac:	2100      	movs	r1, #0
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <RTC_User_Set_Time+0x1ec>)
 8000db0:	f005 ff68 	bl	8006c84 <memset>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000016c 	.word	0x2000016c
 8000dc0:	20000258 	.word	0x20000258
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	2000028c 	.word	0x2000028c
 8000dcc:	2000028a 	.word	0x2000028a
 8000dd0:	2000009c 	.word	0x2000009c
 8000dd4:	20000176 	.word	0x20000176
 8000dd8:	20000034 	.word	0x20000034
 8000ddc:	20000177 	.word	0x20000177
 8000de0:	20000068 	.word	0x20000068
 8000de4:	20000178 	.word	0x20000178
 8000de8:	200001bc 	.word	0x200001bc
 8000dec:	200002d0 	.word	0x200002d0
 8000df0:	08007630 	.word	0x08007630
 8000df4:	200001cc 	.word	0x200001cc

08000df8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000e02:	2102      	movs	r1, #2
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e06:	f001 fcc5 	bl	8002794 <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  b_alarm_triggered = true;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000e16:	2101      	movs	r1, #1
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x44>)
 8000e1a:	f001 fcbb 	bl	8002794 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d102      	bne.n	8000e2a <HAL_GPIO_EXTI_Callback+0x32>
  {
	  b_button_pressed = true;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40020800 	.word	0x40020800
 8000e38:	2000016b 	.word	0x2000016b
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	20000254 	.word	0x20000254

08000e44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

	  g_user_buffer[g_user_buffer_index] = rxData[0];
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_UART_RxCpltCallback+0x34>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_UART_RxCpltCallback+0x38>)
 8000e54:	7819      	ldrb	r1, [r3, #0]
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_UART_RxCpltCallback+0x3c>)
 8000e58:	5499      	strb	r1, [r3, r2]

	  g_user_buffer_index++;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <HAL_UART_RxCpltCallback+0x34>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_UART_RxCpltCallback+0x34>)
 8000e64:	701a      	strb	r2, [r3, #0]

	  b_message_received = true;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_UART_RxCpltCallback+0x40>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]

}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	2000016c 	.word	0x2000016c
 8000e7c:	20000188 	.word	0x20000188
 8000e80:	20000258 	.word	0x20000258
 8000e84:	2000028a 	.word	0x2000028a

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fd26 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f8ca 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f9e6 	bl	8001274 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 f9a6 	bl	80011f8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000eac:	f000 f922 	bl	80010f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000eb0:	f000 f94e 	bl	8001150 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000eb4:	f000 f976 	bl	80011a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  *txData = "Hello \n";
 8000eb8:	4b52      	ldr	r3, [pc, #328]	; (8001004 <main+0x17c>)
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b52      	ldr	r3, [pc, #328]	; (8001008 <main+0x180>)
 8000ebe:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxData, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4952      	ldr	r1, [pc, #328]	; (800100c <main+0x184>)
 8000ec4:	4852      	ldr	r0, [pc, #328]	; (8001010 <main+0x188>)
 8000ec6:	f004 fe3c 	bl	8005b42 <HAL_UART_Receive_DMA>

  HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000eca:	484f      	ldr	r0, [pc, #316]	; (8001008 <main+0x180>)
 8000ecc:	f7ff f98a 	bl	80001e4 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	2332      	movs	r3, #50	; 0x32
 8000ed6:	494c      	ldr	r1, [pc, #304]	; (8001008 <main+0x180>)
 8000ed8:	484d      	ldr	r0, [pc, #308]	; (8001010 <main+0x188>)
 8000eda:	f004 fda0 	bl	8005a1e <HAL_UART_Transmit>



  //Time settings
  RTC_INIT_TIME();
 8000ede:	f7ff fb5b 	bl	8000598 <RTC_INIT_TIME>

  RTC_Clear_Alarm_IT(alarm[0]);
 8000ee2:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <main+0x18c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fc08 	bl	80006fc <RTC_Clear_Alarm_IT>

  //Set time
  RTC_Set_Time(0x71, 0x59, 0x50);
 8000eec:	2250      	movs	r2, #80	; 0x50
 8000eee:	2159      	movs	r1, #89	; 0x59
 8000ef0:	2071      	movs	r0, #113	; 0x71
 8000ef2:	f7ff fd07 	bl	8000904 <RTC_Set_Time>
  RTC_Day_Date(0x01, 0x20);
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff fd3f 	bl	800097c <RTC_Day_Date>

  //Alarm settings
  RTC_Set_Alarm(alarm[0], 0x65, 0x00, 0x10);
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <main+0x18c>)
 8000f00:	7818      	ldrb	r0, [r3, #0]
 8000f02:	2310      	movs	r3, #16
 8000f04:	2200      	movs	r2, #0
 8000f06:	2165      	movs	r1, #101	; 0x65
 8000f08:	f7ff fd64 	bl	80009d4 <RTC_Set_Alarm>

  memset(g_user_buffer,0,sizeof(g_user_buffer));
 8000f0c:	2232      	movs	r2, #50	; 0x32
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4841      	ldr	r0, [pc, #260]	; (8001018 <main+0x190>)
 8000f12:	f005 feb7 	bl	8006c84 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Read time
	  RTC_Display_Time();
 8000f16:	f7ff fc53 	bl	80007c0 <RTC_Display_Time>

	HAL_Delay(30);
 8000f1a:	201e      	movs	r0, #30
 8000f1c:	f000 fd58 	bl	80019d0 <HAL_Delay>

	if(b_button_pressed)
 8000f20:	4b3e      	ldr	r3, [pc, #248]	; (800101c <main+0x194>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d04d      	beq.n	8000fc4 <main+0x13c>
	{
		HAL_Delay(500);
 8000f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2c:	f000 fd50 	bl	80019d0 <HAL_Delay>
		b_button_pressed = false;
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <main+0x194>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]

		sprintf(txData,"Would you like to set alarm (2 = Yes/1 = No)?");
 8000f36:	493a      	ldr	r1, [pc, #232]	; (8001020 <main+0x198>)
 8000f38:	4833      	ldr	r0, [pc, #204]	; (8001008 <main+0x180>)
 8000f3a:	f005 feab 	bl	8006c94 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000f3e:	4832      	ldr	r0, [pc, #200]	; (8001008 <main+0x180>)
 8000f40:	f7ff f950 	bl	80001e4 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	2332      	movs	r3, #50	; 0x32
 8000f4a:	492f      	ldr	r1, [pc, #188]	; (8001008 <main+0x180>)
 8000f4c:	4830      	ldr	r0, [pc, #192]	; (8001010 <main+0x188>)
 8000f4e:	f004 fd66 	bl	8005a1e <HAL_UART_Transmit>
		while(!b_message_received);
 8000f52:	bf00      	nop
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <main+0x19c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	f083 0301 	eor.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f8      	bne.n	8000f54 <main+0xcc>
		HAL_Delay(50);
 8000f62:	2032      	movs	r0, #50	; 0x32
 8000f64:	f000 fd34 	bl	80019d0 <HAL_Delay>
		//sprintf(rxData,"rxData[1] = %d",g_user_buffer[1]);
		//HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);

		//sprintf(rxData,"rxData[2] = %d",g_user_buffer[2]);
		//HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);
		b_message_received = false;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <main+0x19c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
		if(strcmp(g_user_buffer,"no") != 0)
 8000f6e:	492e      	ldr	r1, [pc, #184]	; (8001028 <main+0x1a0>)
 8000f70:	4829      	ldr	r0, [pc, #164]	; (8001018 <main+0x190>)
 8000f72:	f7ff f92d 	bl	80001d0 <strcmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d011      	beq.n	8000fa0 <main+0x118>
		{
			sprintf(txData,"\nSetting Alarm\n");
 8000f7c:	492b      	ldr	r1, [pc, #172]	; (800102c <main+0x1a4>)
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <main+0x180>)
 8000f80:	f005 fe88 	bl	8006c94 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <main+0x180>)
 8000f86:	f7ff f92d 	bl	80001e4 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	491d      	ldr	r1, [pc, #116]	; (8001008 <main+0x180>)
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <main+0x188>)
 8000f94:	f004 fd43 	bl	8005a1e <HAL_UART_Transmit>
			RTC_User_Set_Time(true);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f7ff fe1b 	bl	8000bd4 <RTC_User_Set_Time>
 8000f9e:	e017      	b.n	8000fd0 <main+0x148>
		}
		else
		{
			sprintf(txData,"\nSetting Time\n");
 8000fa0:	4923      	ldr	r1, [pc, #140]	; (8001030 <main+0x1a8>)
 8000fa2:	4819      	ldr	r0, [pc, #100]	; (8001008 <main+0x180>)
 8000fa4:	f005 fe76 	bl	8006c94 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000fa8:	4817      	ldr	r0, [pc, #92]	; (8001008 <main+0x180>)
 8000faa:	f7ff f91b 	bl	80001e4 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	2332      	movs	r3, #50	; 0x32
 8000fb4:	4914      	ldr	r1, [pc, #80]	; (8001008 <main+0x180>)
 8000fb6:	4816      	ldr	r0, [pc, #88]	; (8001010 <main+0x188>)
 8000fb8:	f004 fd31 	bl	8005a1e <HAL_UART_Transmit>
			RTC_User_Set_Time(false);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fe09 	bl	8000bd4 <RTC_User_Set_Time>
 8000fc2:	e005      	b.n	8000fd0 <main+0x148>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fca:	481a      	ldr	r0, [pc, #104]	; (8001034 <main+0x1ac>)
 8000fcc:	f001 fbfa 	bl	80027c4 <HAL_GPIO_WritePin>
	}


	if(RTC_Alarm_triggered(alarm[0]))
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <main+0x18c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fdaf 	bl	8000b38 <RTC_Alarm_triggered>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d09a      	beq.n	8000f16 <main+0x8e>
	{
		RTC_Display_Time();
 8000fe0:	f7ff fbee 	bl	80007c0 <RTC_Display_Time>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <main+0x1ac>)
 8000fec:	f001 fbea 	bl	80027c4 <HAL_GPIO_WritePin>
		RTC_Clear_Alarm_IT(alarm[0]);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <main+0x18c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fb81 	bl	80006fc <RTC_Clear_Alarm_IT>
		HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffe:	f000 fce7 	bl	80019d0 <HAL_Delay>
	  RTC_Display_Time();
 8001002:	e788      	b.n	8000f16 <main+0x8e>
 8001004:	08007644 	.word	0x08007644
 8001008:	200001cc 	.word	0x200001cc
 800100c:	20000188 	.word	0x20000188
 8001010:	2000028c 	.word	0x2000028c
 8001014:	200000d8 	.word	0x200000d8
 8001018:	20000258 	.word	0x20000258
 800101c:	20000254 	.word	0x20000254
 8001020:	0800764c 	.word	0x0800764c
 8001024:	2000028a 	.word	0x2000028a
 8001028:	0800767c 	.word	0x0800767c
 800102c:	08007680 	.word	0x08007680
 8001030:	08007690 	.word	0x08007690
 8001034:	40020c00 	.word	0x40020c00

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2230      	movs	r2, #48	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fe1c 	bl	8006c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <SystemClock_Config+0xb4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <SystemClock_Config+0xb4>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <SystemClock_Config+0xb4>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <SystemClock_Config+0xb8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <SystemClock_Config+0xb8>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <SystemClock_Config+0xb8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2310      	movs	r3, #16
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 f823 	bl	80050f4 <HAL_RCC_OscConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010b4:	f000 f980 	bl	80013b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b8:	230f      	movs	r3, #15
 80010ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fa86 	bl	80055e4 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010de:	f000 f96b 	bl	80013b8 <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	; 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_I2C1_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_I2C1_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_I2C1_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C1_Init+0x50>)
 8001132:	f001 fb79 	bl	8002828 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f93c 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000200 	.word	0x20000200
 8001148:	40005400 	.word	0x40005400
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_USART1_UART_Init+0x50>)
 8001158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_USART1_UART_Init+0x4c>)
 800115c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_USART1_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_USART1_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001188:	f004 fbfc 	bl	8005984 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001192:	f000 f911 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200003a4 	.word	0x200003a4
 80011a0:	40011000 	.word	0x40011000

080011a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <MX_USART2_UART_Init+0x50>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011dc:	f004 fbd2 	bl	8005984 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e6:	f000 f8e7 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000028c 	.word	0x2000028c
 80011f4:	40004400 	.word	0x40004400

080011f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_DMA_Init+0x78>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <MX_DMA_Init+0x78>)
 8001208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_DMA_Init+0x78>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_DMA_Init+0x78>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <MX_DMA_Init+0x78>)
 8001224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_DMA_Init+0x78>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200b      	movs	r0, #11
 800123c:	f000 fcc7 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001240:	200b      	movs	r0, #11
 8001242:	f000 fce0 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2010      	movs	r0, #16
 800124c:	f000 fcbf 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001250:	2010      	movs	r0, #16
 8001252:	f000 fcd8 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	203a      	movs	r0, #58	; 0x3a
 800125c:	f000 fcb7 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001260:	203a      	movs	r0, #58	; 0x3a
 8001262:	f000 fcd0 	bl	8001c06 <HAL_NVIC_EnableIRQ>

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <MX_GPIO_Init+0x134>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a45      	ldr	r2, [pc, #276]	; (80013a8 <MX_GPIO_Init+0x134>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <MX_GPIO_Init+0x134>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a3e      	ldr	r2, [pc, #248]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <MX_GPIO_Init+0x134>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2120      	movs	r1, #32
 80012fe:	482b      	ldr	r0, [pc, #172]	; (80013ac <MX_GPIO_Init+0x138>)
 8001300:	f001 fa60 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800130a:	4829      	ldr	r0, [pc, #164]	; (80013b0 <MX_GPIO_Init+0x13c>)
 800130c:	f001 fa5a 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001310:	2302      	movs	r3, #2
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001314:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4823      	ldr	r0, [pc, #140]	; (80013b4 <MX_GPIO_Init+0x140>)
 8001326:	f001 f899 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_GPIO_Init+0x138>)
 8001340:	f001 f88c 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001344:	2320      	movs	r3, #32
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <MX_GPIO_Init+0x138>)
 800135c:	f001 f87e 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001360:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_GPIO_Init+0x13c>)
 800137a:	f001 f86f 	bl	800245c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2006      	movs	r0, #6
 8001384:	f000 fc23 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001388:	2006      	movs	r0, #6
 800138a:	f000 fc3c 	bl	8001c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2007      	movs	r0, #7
 8001394:	f000 fc1b 	bl	8001bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001398:	2007      	movs	r0, #7
 800139a:	f000 fc34 	bl	8001c06 <HAL_NVIC_EnableIRQ>

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40020800 	.word	0x40020800

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_MspInit+0x4c>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_MspInit+0x4c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a38      	ldr	r2, [pc, #224]	; (8001514 <HAL_I2C_MspInit+0x100>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d16a      	bne.n	800150c <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_I2C_MspInit+0x104>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a36      	ldr	r2, [pc, #216]	; (8001518 <HAL_I2C_MspInit+0x104>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_I2C_MspInit+0x104>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001452:	23c0      	movs	r3, #192	; 0xc0
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001456:	2312      	movs	r3, #18
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001462:	2304      	movs	r3, #4
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	482b      	ldr	r0, [pc, #172]	; (800151c <HAL_I2C_MspInit+0x108>)
 800146e:	f000 fff5 	bl	800245c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_I2C_MspInit+0x104>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a27      	ldr	r2, [pc, #156]	; (8001518 <HAL_I2C_MspInit+0x104>)
 800147c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_I2C_MspInit+0x104>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 8001490:	4a24      	ldr	r2, [pc, #144]	; (8001524 <HAL_I2C_MspInit+0x110>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 8001496:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800149a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014d2:	f000 fbb3 	bl	8001c3c <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80014dc:	f7ff ff6c 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_I2C_MspInit+0x10c>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	201f      	movs	r0, #31
 80014f2:	f000 fb6c 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014f6:	201f      	movs	r0, #31
 80014f8:	f000 fb85 	bl	8001c06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2020      	movs	r0, #32
 8001502:	f000 fb64 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001506:	2020      	movs	r0, #32
 8001508:	f000 fb7d 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40005400 	.word	0x40005400
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400
 8001520:	200003e8 	.word	0x200003e8
 8001524:	40026010 	.word	0x40026010

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a69      	ldr	r2, [pc, #420]	; (80016ec <HAL_UART_MspInit+0x1c4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d164      	bne.n	8001614 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a67      	ldr	r2, [pc, #412]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001582:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001594:	2307      	movs	r3, #7
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4855      	ldr	r0, [pc, #340]	; (80016f4 <HAL_UART_MspInit+0x1cc>)
 80015a0:	f000 ff5c 	bl	800245c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015a4:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015a6:	4a55      	ldr	r2, [pc, #340]	; (80016fc <HAL_UART_MspInit+0x1d4>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015cc:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015e6:	4844      	ldr	r0, [pc, #272]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015e8:	f000 fb28 	bl	8001c3c <HAL_DMA_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80015f2:	f7ff fee1 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38
 80015fc:	4a3e      	ldr	r2, [pc, #248]	; (80016f8 <HAL_UART_MspInit+0x1d0>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2025      	movs	r0, #37	; 0x25
 8001608:	f000 fae1 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800160c:	2025      	movs	r0, #37	; 0x25
 800160e:	f000 fafa 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	e067      	b.n	80016e4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a39      	ldr	r2, [pc, #228]	; (8001700 <HAL_UART_MspInit+0x1d8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d162      	bne.n	80016e4 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a32      	ldr	r2, [pc, #200]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_UART_MspInit+0x1c8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001656:	230c      	movs	r3, #12
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001666:	2307      	movs	r3, #7
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4820      	ldr	r0, [pc, #128]	; (80016f4 <HAL_UART_MspInit+0x1cc>)
 8001672:	f000 fef3 	bl	800245c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 8001678:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_UART_MspInit+0x1e0>)
 800167a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 800167e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001682:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 80016a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016b8:	4812      	ldr	r0, [pc, #72]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 80016ba:	f000 fabf 	bl	8001c3c <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80016c4:	f7ff fe78 	bl	80013b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
 80016ce:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_UART_MspInit+0x1dc>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2026      	movs	r0, #38	; 0x26
 80016da:	f000 fa78 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016de:	2026      	movs	r0, #38	; 0x26
 80016e0:	f000 fa91 	bl	8001c06 <HAL_NVIC_EnableIRQ>
}
 80016e4:	bf00      	nop
 80016e6:	3730      	adds	r7, #48	; 0x30
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	20000344 	.word	0x20000344
 80016fc:	40026440 	.word	0x40026440
 8001700:	40004400 	.word	0x40004400
 8001704:	200002e4 	.word	0x200002e4
 8001708:	40026088 	.word	0x40026088

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f91a 	bl	8001990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001764:	2001      	movs	r0, #1
 8001766:	f001 f847 	bl	80027f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}

0800176e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001772:	2002      	movs	r0, #2
 8001774:	f001 f840 	bl	80027f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Stream0_IRQHandler+0x10>)
 8001782:	f000 fbf3 	bl	8001f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200003e8 	.word	0x200003e8

08001790 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA1_Stream5_IRQHandler+0x10>)
 8001796:	f000 fbe9 	bl	8001f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002e4 	.word	0x200002e4

080017a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <I2C1_EV_IRQHandler+0x10>)
 80017aa:	f001 fca5 	bl	80030f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000200 	.word	0x20000200

080017b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <I2C1_ER_IRQHandler+0x10>)
 80017be:	f001 fe0c 	bl	80033da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000200 	.word	0x20000200

080017cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USART1_IRQHandler+0x10>)
 80017d2:	f004 f9e7 	bl	8005ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003a4 	.word	0x200003a4

080017e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART2_IRQHandler+0x10>)
 80017e6:	f004 f9dd 	bl	8005ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000028c 	.word	0x2000028c

080017f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <DMA2_Stream2_IRQHandler+0x10>)
 80017fa:	f000 fbb7 	bl	8001f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000344 	.word	0x20000344

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f005 f9fa 	bl	8006c30 <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20020000 	.word	0x20020000
 8001868:	00000400 	.word	0x00000400
 800186c:	2000017c 	.word	0x2000017c
 8001870:	20000460 	.word	0x20000460

08001874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b4:	4c0b      	ldr	r4, [pc, #44]	; (80018e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018c2:	f7ff ffd7 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f005 f9b9 	bl	8006c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ca:	f7ff fadd 	bl	8000e88 <main>
  bx  lr    
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80018dc:	08007804 	.word	0x08007804
  ldr r2, =_sbss
 80018e0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80018e4:	2000045c 	.word	0x2000045c

080018e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_Init+0x40>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_Init+0x40>)
 8001902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_Init+0x40>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f94f 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f808 	bl	8001930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fd50 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x54>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x58>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f967 	bl	8001c22 <HAL_SYSTICK_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00e      	b.n	800197c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d80a      	bhi.n	800197a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 f92f 	bl	8001bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_InitTick+0x5c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200000dc 	.word	0x200000dc
 8001988:	200000e4 	.word	0x200000e4
 800198c:	200000e0 	.word	0x200000e0

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200000e4 	.word	0x200000e4
 80019b4:	20000448 	.word	0x20000448

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000448 	.word	0x20000448

080019d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff ffee 	bl	80019b8 <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d005      	beq.n	80019f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_Delay+0x44>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f6:	bf00      	nop
 80019f8:	f7ff ffde 	bl	80019b8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8f7      	bhi.n	80019f8 <HAL_Delay+0x28>
  {
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200000e4 	.word	0x200000e4

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	; (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b84:	d301      	bcc.n	8001b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00f      	b.n	8001baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <SysTick_Config+0x40>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b92:	210f      	movs	r1, #15
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f7ff ff8e 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SysTick_Config+0x40>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <SysTick_Config+0x40>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff29 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff3e 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff8e 	bl	8001b0c <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5d 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff31 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffa2 	bl	8001b74 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff feb6 	bl	80019b8 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e099      	b.n	8001d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	e00f      	b.n	8001c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff fe9d 	bl	80019b8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d908      	bls.n	8001c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e078      	b.n	8001d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e8      	bne.n	8001c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_DMA_Init+0x158>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f023 0307 	bic.w	r3, r3, #7
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d117      	bne.n	8001d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00e      	beq.n	8001d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fb0f 	bl	8002364 <DMA_CheckFifoParam>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fac6 	bl	80022f8 <DMA_CalcBaseAndBitshift>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	223f      	movs	r2, #63	; 0x3f
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	f010803f 	.word	0xf010803f

08001d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_DMA_Start_IT+0x26>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e040      	b.n	8001e40 <HAL_DMA_Start_IT+0xa8>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d12f      	bne.n	8001e32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fa58 	bl	800229c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	223f      	movs	r2, #63	; 0x3f
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0216 	orr.w	r2, r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0208 	orr.w	r2, r2, #8
 8001e1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e005      	b.n	8001e3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e56:	f7ff fdaf 	bl	80019b8 <HAL_GetTick>
 8001e5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d008      	beq.n	8001e7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e052      	b.n	8001f20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0216 	bic.w	r2, r2, #22
 8001e88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d103      	bne.n	8001eaa <HAL_DMA_Abort+0x62>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0208 	bic.w	r2, r2, #8
 8001eb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eca:	e013      	b.n	8001ef4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ecc:	f7ff fd74 	bl	80019b8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b05      	cmp	r3, #5
 8001ed8:	d90c      	bls.n	8001ef4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e015      	b.n	8001f20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1e4      	bne.n	8001ecc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	223f      	movs	r2, #63	; 0x3f
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d004      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00c      	b.n	8001f60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2205      	movs	r2, #5
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f78:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <HAL_DMA_IRQHandler+0x258>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a92      	ldr	r2, [pc, #584]	; (80021c8 <HAL_DMA_IRQHandler+0x25c>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0a9b      	lsrs	r3, r3, #10
 8001f84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2208      	movs	r2, #8
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01a      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	2201      	movs	r2, #1
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0202 	orr.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	2204      	movs	r2, #4
 8002014:	409a      	lsls	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d012      	beq.n	8002044 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00b      	beq.n	8002044 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2204      	movs	r2, #4
 8002032:	409a      	lsls	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2210      	movs	r2, #16
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d043      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03c      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2210      	movs	r2, #16
 8002068:	409a      	lsls	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d018      	beq.n	80020ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d024      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
 800209a:	e01f      	b.n	80020dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
 80020ac:	e016      	b.n	80020dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0208 	bic.w	r2, r2, #8
 80020ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2220      	movs	r2, #32
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 808e 	beq.w	800220a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8086 	beq.w	800220a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	2220      	movs	r2, #32
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b05      	cmp	r3, #5
 8002114:	d136      	bne.n	8002184 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0216 	bic.w	r2, r2, #22
 8002124:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002134:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <HAL_DMA_IRQHandler+0x1da>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0208 	bic.w	r2, r2, #8
 8002154:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	223f      	movs	r2, #63	; 0x3f
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002176:	2b00      	cmp	r3, #0
 8002178:	d07d      	beq.n	8002276 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
        }
        return;
 8002182:	e078      	b.n	8002276 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01c      	beq.n	80021cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d108      	bne.n	80021b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d030      	beq.n	800220a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e02b      	b.n	800220a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d027      	beq.n	800220a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
 80021c2:	e022      	b.n	800220a <HAL_DMA_IRQHandler+0x29e>
 80021c4:	200000dc 	.word	0x200000dc
 80021c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0210 	bic.w	r2, r2, #16
 80021e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	2b00      	cmp	r3, #0
 8002210:	d032      	beq.n	8002278 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d022      	beq.n	8002264 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2205      	movs	r2, #5
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3301      	adds	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	429a      	cmp	r2, r3
 8002240:	d307      	bcc.n	8002252 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f2      	bne.n	8002236 <HAL_DMA_IRQHandler+0x2ca>
 8002250:	e000      	b.n	8002254 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002252:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e000      	b.n	8002278 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002276:	bf00      	nop
    }
  }
}
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop

08002280 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228e:	b2db      	uxtb	r3, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d108      	bne.n	80022dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022da:	e007      	b.n	80022ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3b10      	subs	r3, #16
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <DMA_CalcBaseAndBitshift+0x64>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <DMA_CalcBaseAndBitshift+0x68>)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d909      	bls.n	800233a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	659a      	str	r2, [r3, #88]	; 0x58
 8002338:	e007      	b.n	800234a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	aaaaaaab 	.word	0xaaaaaaab
 8002360:	080076b8 	.word	0x080076b8

08002364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d11f      	bne.n	80023be <DMA_CheckFifoParam+0x5a>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d856      	bhi.n	8002432 <DMA_CheckFifoParam+0xce>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <DMA_CheckFifoParam+0x28>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023af 	.word	0x080023af
 8002394:	0800239d 	.word	0x0800239d
 8002398:	08002433 	.word	0x08002433
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d046      	beq.n	8002436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ac:	e043      	b.n	8002436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b6:	d140      	bne.n	800243a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023bc:	e03d      	b.n	800243a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c6:	d121      	bne.n	800240c <DMA_CheckFifoParam+0xa8>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d837      	bhi.n	800243e <DMA_CheckFifoParam+0xda>
 80023ce:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <DMA_CheckFifoParam+0x70>)
 80023d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d4:	080023e5 	.word	0x080023e5
 80023d8:	080023eb 	.word	0x080023eb
 80023dc:	080023e5 	.word	0x080023e5
 80023e0:	080023fd 	.word	0x080023fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e030      	b.n	800244c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d025      	beq.n	8002442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fa:	e022      	b.n	8002442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002404:	d11f      	bne.n	8002446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800240a:	e01c      	b.n	8002446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d903      	bls.n	800241a <DMA_CheckFifoParam+0xb6>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d003      	beq.n	8002420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002418:	e018      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      break;
 800241e:	e015      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00e      	beq.n	800244a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	e00b      	b.n	800244a <DMA_CheckFifoParam+0xe6>
      break;
 8002432:	bf00      	nop
 8002434:	e00a      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e008      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e006      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e004      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e002      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;   
 8002446:	bf00      	nop
 8002448:	e000      	b.n	800244c <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
    }
  } 
  
  return status; 
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e16b      	b.n	8002750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	f040 815a 	bne.w	800274a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d130      	bne.n	8002510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b03      	cmp	r3, #3
 800251a:	d017      	beq.n	800254c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80b4 	beq.w	800274a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a5f      	ldr	r2, [pc, #380]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_GPIO_Init+0x310>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	220f      	movs	r2, #15
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_GPIO_Init+0x314>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <HAL_GPIO_Init+0x226>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x318>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x222>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a50      	ldr	r2, [pc, #320]	; (8002778 <HAL_GPIO_Init+0x31c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x21e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4f      	ldr	r2, [pc, #316]	; (800277c <HAL_GPIO_Init+0x320>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x21a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4e      	ldr	r2, [pc, #312]	; (8002780 <HAL_GPIO_Init+0x324>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x216>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4d      	ldr	r2, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x328>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x212>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4c      	ldr	r2, [pc, #304]	; (8002788 <HAL_GPIO_Init+0x32c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x20e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4b      	ldr	r2, [pc, #300]	; (800278c <HAL_GPIO_Init+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x20a>
 8002662:	2307      	movs	r3, #7
 8002664:	e00e      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002666:	2308      	movs	r3, #8
 8002668:	e00c      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266a:	2306      	movs	r3, #6
 800266c:	e00a      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266e:	2305      	movs	r3, #5
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002672:	2304      	movs	r3, #4
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	; (800276c <HAL_GPIO_Init+0x310>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_GPIO_Init+0x334>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f ae90 	bls.w	8002478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40021400 	.word	0x40021400
 8002788:	40021800 	.word	0x40021800
 800278c:	40021c00 	.word	0x40021c00
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe faee 	bl	8000df8 <HAL_GPIO_EXTI_Callback>
  }
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40013c00 	.word	0x40013c00

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e12b      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fde0 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800288c:	f003 f852 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a81      	ldr	r2, [pc, #516]	; (8002a9c <HAL_I2C_Init+0x274>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d807      	bhi.n	80028ac <HAL_I2C_Init+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a80      	ldr	r2, [pc, #512]	; (8002aa0 <HAL_I2C_Init+0x278>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a7d      	ldr	r2, [pc, #500]	; (8002aa4 <HAL_I2C_Init+0x27c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a78      	ldr	r2, [pc, #480]	; (8002aa8 <HAL_I2C_Init+0x280>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	; (8002a9c <HAL_I2C_Init+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d802      	bhi.n	80028fc <HAL_I2C_Init+0xd4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e009      	b.n	8002910 <HAL_I2C_Init+0xe8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_I2C_Init+0x284>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	495c      	ldr	r1, [pc, #368]	; (8002a9c <HAL_I2C_Init+0x274>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d819      	bhi.n	8002964 <HAL_I2C_Init+0x13c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e59      	subs	r1, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002944:	400b      	ands	r3, r1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_I2C_Init+0x138>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e59      	subs	r1, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fbb1 f3f3 	udiv	r3, r1, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	e051      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002960:	2304      	movs	r3, #4
 8002962:	e04f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_I2C_Init+0x168>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_I2C_Init+0x18e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x196>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <HAL_I2C_Init+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e58      	subs	r0, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e2:	e00f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6911      	ldr	r1, [r2, #16]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	000186a0 	.word	0x000186a0
 8002aa0:	001e847f 	.word	0x001e847f
 8002aa4:	003d08ff 	.word	0x003d08ff
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7fe ff78 	bl	80019b8 <HAL_GetTick>
 8002ac8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	f040 80e0 	bne.w	8002c98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2319      	movs	r3, #25
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4970      	ldr	r1, [pc, #448]	; (8002ca4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f002 f8dc 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0d3      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_I2C_Master_Transmit+0x50>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0cc      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d007      	beq.n	8002b26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2221      	movs	r2, #33	; 0x21
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2210      	movs	r2, #16
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	893a      	ldrh	r2, [r7, #8]
 8002b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b68:	8979      	ldrh	r1, [r7, #10]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f001 fe9e 	bl	80048b0 <I2C_MasterRequestWrite>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e08d      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b94:	e066      	b.n	8002c64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f002 f956 	bl	8004e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d11b      	bne.n	8002c38 <HAL_I2C_Master_Transmit+0x188>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	6a39      	ldr	r1, [r7, #32]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f002 f946 	bl	8004ece <I2C_WaitOnBTFFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d107      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e01a      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d194      	bne.n	8002b96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e000      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7fe fe7a 	bl	80019b8 <HAL_GetTick>
 8002cc4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 820b 	bne.w	80030ea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	497c      	ldr	r1, [pc, #496]	; (8002ed0 <HAL_I2C_Master_Receive+0x224>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 ffde 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e1fe      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Receive+0x50>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e1f7      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2222      	movs	r2, #34	; 0x22
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a5c      	ldr	r2, [pc, #368]	; (8002ed4 <HAL_I2C_Master_Receive+0x228>)
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f001 fe22 	bl	80049b4 <I2C_MasterRequestRead>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1b8      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d113      	bne.n	8002daa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e18c      	b.n	80030c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d11b      	bne.n	8002dea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e16c      	b.n	80030c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d11b      	bne.n	8002e2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	e14c      	b.n	80030c4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e50:	e138      	b.n	80030c4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	f200 80f1 	bhi.w	800303e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d123      	bne.n	8002eac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f002 f8a3 	bl	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e139      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eaa:	e10b      	b.n	80030c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d14e      	bne.n	8002f52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <HAL_I2C_Master_Receive+0x22c>)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f001 feee 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e10e      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
 8002ece:	bf00      	nop
 8002ed0:	00100002 	.word	0x00100002
 8002ed4:	ffff0000 	.word	0xffff0000
 8002ed8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f50:	e0b8      	b.n	80030c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	4966      	ldr	r1, [pc, #408]	; (80030f4 <HAL_I2C_Master_Receive+0x448>)
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f001 fe9f 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0bf      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	494f      	ldr	r1, [pc, #316]	; (80030f4 <HAL_I2C_Master_Receive+0x448>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f001 fe71 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e091      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800303c:	e042      	b.n	80030c4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f001 ffb6 	bl	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e04c      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d118      	bne.n	80030c4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f47f aec2 	bne.w	8002e52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3728      	adds	r7, #40	; 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	00010004 	.word	0x00010004

080030f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003118:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b10      	cmp	r3, #16
 8003126:	d003      	beq.n	8003130 <HAL_I2C_EV_IRQHandler+0x38>
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	f040 80c1 	bne.w	80032b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_I2C_EV_IRQHandler+0x6e>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003150:	d003      	beq.n	800315a <HAL_I2C_EV_IRQHandler+0x62>
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003158:	d101      	bne.n	800315e <HAL_I2C_EV_IRQHandler+0x66>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_I2C_EV_IRQHandler+0x68>
 800315e:	2300      	movs	r3, #0
 8003160:	2b01      	cmp	r3, #1
 8003162:	f000 8132 	beq.w	80033ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00c      	beq.n	800318a <HAL_I2C_EV_IRQHandler+0x92>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	0a5b      	lsrs	r3, r3, #9
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f001 ff9e 	bl	80050be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fd79 	bl	8003c7a <I2C_Master_SB>
 8003188:	e092      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0xb2>
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	0a5b      	lsrs	r3, r3, #9
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fdef 	bl	8003d86 <I2C_Master_ADD10>
 80031a8:	e082      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0xd2>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	0a5b      	lsrs	r3, r3, #9
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fe09 	bl	8003dda <I2C_Master_ADDR>
 80031c8:	e072      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d03b      	beq.n	800324e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e4:	f000 80f3 	beq.w	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	09db      	lsrs	r3, r3, #7
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00f      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x11c>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x11c>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f9f3 	bl	80035f8 <I2C_MasterTransmit_TXE>
 8003212:	e04d      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80d6 	beq.w	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	0a5b      	lsrs	r3, r3, #9
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80cf 	beq.w	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003230:	7bbb      	ldrb	r3, [r7, #14]
 8003232:	2b21      	cmp	r3, #33	; 0x21
 8003234:	d103      	bne.n	800323e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa7a 	bl	8003730 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323c:	e0c7      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	f040 80c4 	bne.w	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fae8 	bl	800381c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800324c:	e0bf      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325c:	f000 80b7 	beq.w	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00f      	beq.n	800328c <HAL_I2C_EV_IRQHandler+0x194>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	0a9b      	lsrs	r3, r3, #10
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d009      	beq.n	800328c <HAL_I2C_EV_IRQHandler+0x194>
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fb5d 	bl	8003944 <I2C_MasterReceive_RXNE>
 800328a:	e011      	b.n	80032b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 809a 	beq.w	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	0a5b      	lsrs	r3, r3, #9
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8093 	beq.w	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fbfc 	bl	8003aa6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ae:	e08e      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80032b0:	e08d      	b.n	80033ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d004      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e007      	b.n	80032d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	085b      	lsrs	r3, r3, #1
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d012      	beq.n	8003306 <HAL_I2C_EV_IRQHandler+0x20e>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	0a5b      	lsrs	r3, r3, #9
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 ffba 	bl	8004278 <I2C_Slave_ADDR>
 8003304:	e066      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_I2C_EV_IRQHandler+0x22e>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	0a5b      	lsrs	r3, r3, #9
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fff4 	bl	800430c <I2C_Slave_STOPF>
 8003324:	e056      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	2b21      	cmp	r3, #33	; 0x21
 800332a:	d002      	beq.n	8003332 <HAL_I2C_EV_IRQHandler+0x23a>
 800332c:	7bbb      	ldrb	r3, [r7, #14]
 800332e:	2b29      	cmp	r3, #41	; 0x29
 8003330:	d125      	bne.n	800337e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	09db      	lsrs	r3, r3, #7
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00f      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x266>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	0a9b      	lsrs	r3, r3, #10
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x266>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fed0 	bl	80040fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335c:	e039      	b.n	80033d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d033      	beq.n	80033d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	0a5b      	lsrs	r3, r3, #9
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02d      	beq.n	80033d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fefd 	bl	8004176 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800337c:	e029      	b.n	80033d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00f      	beq.n	80033aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	0a9b      	lsrs	r3, r3, #10
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 ff08 	bl	80041b8 <I2C_SlaveReceive_RXNE>
 80033a8:	e014      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00e      	beq.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	0a5b      	lsrs	r3, r3, #9
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 ff36 	bl	8004234 <I2C_SlaveReceive_BTF>
 80033c8:	e004      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033ca:	bf00      	nop
 80033cc:	e002      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b08a      	sub	sp, #40	; 0x28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <HAL_I2C_ER_IRQHandler+0x4e>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003426:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	0a5b      	lsrs	r3, r3, #9
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00e      	beq.n	8003452 <HAL_I2C_ER_IRQHandler+0x78>
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	f043 0302 	orr.w	r3, r3, #2
 8003446:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003450:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	0a9b      	lsrs	r3, r3, #10
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03f      	beq.n	80034de <HAL_I2C_ER_IRQHandler+0x104>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d039      	beq.n	80034de <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800346a:	7efb      	ldrb	r3, [r7, #27]
 800346c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003484:	7ebb      	ldrb	r3, [r7, #26]
 8003486:	2b20      	cmp	r3, #32
 8003488:	d112      	bne.n	80034b0 <HAL_I2C_ER_IRQHandler+0xd6>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b21      	cmp	r3, #33	; 0x21
 8003494:	d008      	beq.n	80034a8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b29      	cmp	r3, #41	; 0x29
 800349a:	d005      	beq.n	80034a8 <HAL_I2C_ER_IRQHandler+0xce>
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b28      	cmp	r3, #40	; 0x28
 80034a0:	d106      	bne.n	80034b0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b21      	cmp	r3, #33	; 0x21
 80034a6:	d103      	bne.n	80034b0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f001 f85f 	bl	800456c <I2C_Slave_AF>
 80034ae:	e016      	b.n	80034de <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034c2:	7efb      	ldrb	r3, [r7, #27]
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d002      	beq.n	80034ce <HAL_I2C_ER_IRQHandler+0xf4>
 80034c8:	7efb      	ldrb	r3, [r7, #27]
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d107      	bne.n	80034de <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	0adb      	lsrs	r3, r3, #11
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00e      	beq.n	8003508 <HAL_I2C_ER_IRQHandler+0x12e>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	f043 0308 	orr.w	r3, r3, #8
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003506:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f001 f896 	bl	800464c <I2C_ITError>
  }
}
 8003520:	bf00      	nop
 8003522:	3728      	adds	r7, #40	; 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
 8003584:	4613      	mov	r3, r2
 8003586:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800360e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	2b00      	cmp	r3, #0
 800361c:	d150      	bne.n	80036c0 <I2C_MasterTransmit_TXE+0xc8>
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b21      	cmp	r3, #33	; 0x21
 8003622:	d14d      	bne.n	80036c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b08      	cmp	r3, #8
 8003628:	d01d      	beq.n	8003666 <I2C_MasterTransmit_TXE+0x6e>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b20      	cmp	r3, #32
 800362e:	d01a      	beq.n	8003666 <I2C_MasterTransmit_TXE+0x6e>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003636:	d016      	beq.n	8003666 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003646:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2211      	movs	r2, #17
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ff62 	bl	8003528 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003664:	e060      	b.n	8003728 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003674:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d107      	bne.n	80036b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ff7d 	bl	80035a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036ae:	e03b      	b.n	8003728 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff35 	bl	8003528 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036be:	e033      	b.n	8003728 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b21      	cmp	r3, #33	; 0x21
 80036c4:	d005      	beq.n	80036d2 <I2C_MasterTransmit_TXE+0xda>
 80036c6:	7bbb      	ldrb	r3, [r7, #14]
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d12d      	bne.n	8003728 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b22      	cmp	r3, #34	; 0x22
 80036d0:	d12a      	bne.n	8003728 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d108      	bne.n	80036ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036ec:	e01c      	b.n	8003728 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d103      	bne.n	8003702 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f88e 	bl	800381c <I2C_MemoryTransmit_TXE_BTF>
}
 8003700:	e012      	b.n	8003728 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003726:	e7ff      	b.n	8003728 <I2C_MasterTransmit_TXE+0x130>
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b21      	cmp	r3, #33	; 0x21
 8003748:	d164      	bne.n	8003814 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d012      	beq.n	800377a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003778:	e04c      	b.n	8003814 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d01d      	beq.n	80037bc <I2C_MasterTransmit_BTF+0x8c>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b20      	cmp	r3, #32
 8003784:	d01a      	beq.n	80037bc <I2C_MasterTransmit_BTF+0x8c>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800378c:	d016      	beq.n	80037bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800379c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2211      	movs	r2, #17
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff feb7 	bl	8003528 <HAL_I2C_MasterTxCpltCallback>
}
 80037ba:	e02b      	b.n	8003814 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d107      	bne.n	8003806 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fed2 	bl	80035a8 <HAL_I2C_MemTxCpltCallback>
}
 8003804:	e006      	b.n	8003814 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fe8a 	bl	8003528 <HAL_I2C_MasterTxCpltCallback>
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11d      	bne.n	8003870 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10b      	bne.n	8003854 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	b2da      	uxtb	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003852:	e073      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	b29b      	uxth	r3, r3
 800385a:	121b      	asrs	r3, r3, #8
 800385c:	b2da      	uxtb	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800386e:	e065      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10b      	bne.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	b2da      	uxtb	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800388e:	e055      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	2b02      	cmp	r3, #2
 8003896:	d151      	bne.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b22      	cmp	r3, #34	; 0x22
 800389c:	d10d      	bne.n	80038ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038b8:	e040      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b21      	cmp	r3, #33	; 0x21
 80038c8:	d112      	bne.n	80038f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038ee:	e025      	b.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d120      	bne.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b21      	cmp	r3, #33	; 0x21
 80038fe:	d11d      	bne.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800390e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fe36 	bl	80035a8 <HAL_I2C_MemTxCpltCallback>
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b22      	cmp	r3, #34	; 0x22
 8003956:	f040 80a2 	bne.w	8003a9e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d921      	bls.n	80039ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b03      	cmp	r3, #3
 8003996:	f040 8082 	bne.w	8003a9e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80039aa:	e078      	b.n	8003a9e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d074      	beq.n	8003a9e <I2C_MasterReceive_RXNE+0x15a>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d002      	beq.n	80039c0 <I2C_MasterReceive_RXNE+0x7c>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d16e      	bne.n	8003a9e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f001 fac5 	bl	8004f50 <I2C_WaitOnSTOPRequestThroughIT>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d142      	bne.n	8003a52 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d10a      	bne.n	8003a3c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fdc1 	bl	80035bc <HAL_I2C_MemRxCpltCallback>
}
 8003a3a:	e030      	b.n	8003a9e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2212      	movs	r2, #18
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fd76 	bl	800353c <HAL_I2C_MasterRxCpltCallback>
}
 8003a50:	e025      	b.n	8003a9e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a60:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd99 	bl	80035d0 <HAL_I2C_ErrorCallback>
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d11b      	bne.n	8003af6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003acc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003af4:	e0bd      	b.n	8003c72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d129      	bne.n	8003b54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d00a      	beq.n	8003b2c <I2C_MasterReceive_BTF+0x86>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d007      	beq.n	8003b2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b52:	e08e      	b.n	8003c72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d176      	bne.n	8003c4c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d002      	beq.n	8003b6a <I2C_MasterReceive_BTF+0xc4>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d108      	bne.n	8003b7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e019      	b.n	8003bb0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d002      	beq.n	8003b88 <I2C_MasterReceive_BTF+0xe2>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d108      	bne.n	8003b9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e00a      	b.n	8003bb0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d007      	beq.n	8003bb0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d10a      	bne.n	8003c36 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff fcc4 	bl	80035bc <HAL_I2C_MemRxCpltCallback>
}
 8003c34:	e01d      	b.n	8003c72 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2212      	movs	r2, #18
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fc79 	bl	800353c <HAL_I2C_MasterRxCpltCallback>
}
 8003c4a:	e012      	b.n	8003c72 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d117      	bne.n	8003cbe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ca8:	e067      	b.n	8003d7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]
}
 8003cbc:	e05d      	b.n	8003d7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc6:	d133      	bne.n	8003d30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b21      	cmp	r3, #33	; 0x21
 8003cd2:	d109      	bne.n	8003ce8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ce4:	611a      	str	r2, [r3, #16]
 8003ce6:	e008      	b.n	8003cfa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <I2C_Master_SB+0x92>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d032      	beq.n	8003d7a <I2C_Master_SB+0x100>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02d      	beq.n	8003d7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2c:	605a      	str	r2, [r3, #4]
}
 8003d2e:	e024      	b.n	8003d7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10e      	bne.n	8003d56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	11db      	asrs	r3, r3, #7
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0306 	and.w	r3, r3, #6
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f063 030f 	orn	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]
}
 8003d54:	e011      	b.n	8003d7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d10d      	bne.n	8003d7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	11db      	asrs	r3, r3, #7
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0306 	and.w	r3, r3, #6
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f063 030e 	orn	r3, r3, #14
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	611a      	str	r2, [r3, #16]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d004      	beq.n	8003dac <I2C_Master_ADD10+0x26>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d108      	bne.n	8003dbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00c      	beq.n	8003dce <I2C_Master_ADD10+0x48>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dcc:	605a      	str	r2, [r3, #4]
  }
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b091      	sub	sp, #68	; 0x44
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b22      	cmp	r3, #34	; 0x22
 8003e02:	f040 8169 	bne.w	80040d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <I2C_Master_ADDR+0x54>
 8003e0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e12:	2b40      	cmp	r3, #64	; 0x40
 8003e14:	d10b      	bne.n	8003e2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	2300      	movs	r3, #0
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	e160      	b.n	80040f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11d      	bne.n	8003e72 <I2C_Master_ADDR+0x98>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e3e:	d118      	bne.n	8003e72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e40:	2300      	movs	r3, #0
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	651a      	str	r2, [r3, #80]	; 0x50
 8003e70:	e13e      	b.n	80040f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e115      	b.n	80040d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	f040 808a 	bne.w	8003fc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb6:	d137      	bne.n	8003f28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed6:	d113      	bne.n	8003f00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	e0e7      	b.n	80040d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f00:	2300      	movs	r3, #0
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e0d3      	b.n	80040d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d02e      	beq.n	8003f8c <I2C_Master_ADDR+0x1b2>
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d02b      	beq.n	8003f8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	2b12      	cmp	r3, #18
 8003f38:	d102      	bne.n	8003f40 <I2C_Master_ADDR+0x166>
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d125      	bne.n	8003f8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d00e      	beq.n	8003f64 <I2C_Master_ADDR+0x18a>
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d00b      	beq.n	8003f64 <I2C_Master_ADDR+0x18a>
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d008      	beq.n	8003f64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	e0a1      	b.n	80040d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	e085      	b.n	80040d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d14d      	bne.n	800406a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d016      	beq.n	8004002 <I2C_Master_ADDR+0x228>
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d013      	beq.n	8004002 <I2C_Master_ADDR+0x228>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d010      	beq.n	8004002 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e007      	b.n	8004012 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004010:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004020:	d117      	bne.n	8004052 <I2C_Master_ADDR+0x278>
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004028:	d00b      	beq.n	8004042 <I2C_Master_ADDR+0x268>
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	2b01      	cmp	r3, #1
 800402e:	d008      	beq.n	8004042 <I2C_Master_ADDR+0x268>
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	2b08      	cmp	r3, #8
 8004034:	d005      	beq.n	8004042 <I2C_Master_ADDR+0x268>
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2b10      	cmp	r3, #16
 800403a:	d002      	beq.n	8004042 <I2C_Master_ADDR+0x268>
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	2b20      	cmp	r3, #32
 8004040:	d107      	bne.n	8004052 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004050:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	e032      	b.n	80040d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004078:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d117      	bne.n	80040ba <I2C_Master_ADDR+0x2e0>
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004090:	d00b      	beq.n	80040aa <I2C_Master_ADDR+0x2d0>
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2b01      	cmp	r3, #1
 8004096:	d008      	beq.n	80040aa <I2C_Master_ADDR+0x2d0>
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	2b08      	cmp	r3, #8
 800409c:	d005      	beq.n	80040aa <I2C_Master_ADDR+0x2d0>
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d002      	beq.n	80040aa <I2C_Master_ADDR+0x2d0>
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d107      	bne.n	80040ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040d6:	e00b      	b.n	80040f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	e7ff      	b.n	80040f0 <I2C_Master_ADDR+0x316>
 80040f0:	bf00      	nop
 80040f2:	3744      	adds	r7, #68	; 0x44
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02b      	beq.n	800416e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d114      	bne.n	800416e <I2C_SlaveTransmit_TXE+0x72>
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b29      	cmp	r3, #41	; 0x29
 8004148:	d111      	bne.n	800416e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004158:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2221      	movs	r2, #33	; 0x21
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2228      	movs	r2, #40	; 0x28
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff f9f1 	bl	8003550 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d011      	beq.n	80041ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02c      	beq.n	800422c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d114      	bne.n	800422c <I2C_SlaveReceive_RXNE+0x74>
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b2a      	cmp	r3, #42	; 0x2a
 8004206:	d111      	bne.n	800422c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004216:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2222      	movs	r2, #34	; 0x22
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2228      	movs	r2, #40	; 0x28
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff f99c 	bl	8003564 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d012      	beq.n	800426c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004292:	2b28      	cmp	r3, #40	; 0x28
 8004294:	d127      	bne.n	80042e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	09db      	lsrs	r3, r3, #7
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	81bb      	strh	r3, [r7, #12]
 80042c8:	e002      	b.n	80042d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042d8:	89ba      	ldrh	r2, [r7, #12]
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff f94a 	bl	8003578 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042e4:	e00e      	b.n	8004304 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800432a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004358:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004368:	d172      	bne.n	8004450 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2b22      	cmp	r3, #34	; 0x22
 800436e:	d002      	beq.n	8004376 <I2C_Slave_STOPF+0x6a>
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b2a      	cmp	r3, #42	; 0x2a
 8004374:	d135      	bne.n	80043e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fd ff66 	bl	8002280 <HAL_DMA_GetState>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d049      	beq.n	800444e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4a69      	ldr	r2, [pc, #420]	; (8004564 <I2C_Slave_STOPF+0x258>)
 80043c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd fdae 	bl	8001f28 <HAL_DMA_Abort_IT>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d03d      	beq.n	800444e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043dc:	4610      	mov	r0, r2
 80043de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043e0:	e035      	b.n	800444e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004414:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd ff30 	bl	8002280 <HAL_DMA_GetState>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d014      	beq.n	8004450 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	4a4e      	ldr	r2, [pc, #312]	; (8004564 <I2C_Slave_STOPF+0x258>)
 800442c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd fd78 	bl	8001f28 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004448:	4610      	mov	r0, r2
 800444a:	4798      	blx	r3
 800444c:	e000      	b.n	8004450 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800444e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03e      	beq.n	80044d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d112      	bne.n	800448e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d112      	bne.n	80044c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f043 0204 	orr.w	r2, r3, #4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8b3 	bl	800464c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044e6:	e039      	b.n	800455c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b2a      	cmp	r3, #42	; 0x2a
 80044ec:	d109      	bne.n	8004502 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2228      	movs	r2, #40	; 0x28
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff f831 	bl	8003564 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b28      	cmp	r3, #40	; 0x28
 800450c:	d111      	bne.n	8004532 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a15      	ldr	r2, [pc, #84]	; (8004568 <I2C_Slave_STOPF+0x25c>)
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff f832 	bl	8003594 <HAL_I2C_ListenCpltCallback>
}
 8004530:	e014      	b.n	800455c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	2b22      	cmp	r3, #34	; 0x22
 8004538:	d002      	beq.n	8004540 <I2C_Slave_STOPF+0x234>
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b22      	cmp	r3, #34	; 0x22
 800453e:	d10d      	bne.n	800455c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff f804 	bl	8003564 <HAL_I2C_SlaveRxCpltCallback>
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	08004b51 	.word	0x08004b51
 8004568:	ffff0000 	.word	0xffff0000

0800456c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d002      	beq.n	800458e <I2C_Slave_AF+0x22>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b20      	cmp	r3, #32
 800458c:	d129      	bne.n	80045e2 <I2C_Slave_AF+0x76>
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b28      	cmp	r3, #40	; 0x28
 8004592:	d126      	bne.n	80045e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <I2C_Slave_AF+0xdc>)
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fe ffda 	bl	8003594 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80045e0:	e02e      	b.n	8004640 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b21      	cmp	r3, #33	; 0x21
 80045e6:	d126      	bne.n	8004636 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <I2C_Slave_AF+0xdc>)
 80045ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2221      	movs	r2, #33	; 0x21
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004612:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800461c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe ff8e 	bl	8003550 <HAL_I2C_SlaveTxCpltCallback>
}
 8004634:	e004      	b.n	8004640 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800463e:	615a      	str	r2, [r3, #20]
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	ffff0000 	.word	0xffff0000

0800464c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004662:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004664:	7bbb      	ldrb	r3, [r7, #14]
 8004666:	2b10      	cmp	r3, #16
 8004668:	d002      	beq.n	8004670 <I2C_ITError+0x24>
 800466a:	7bbb      	ldrb	r3, [r7, #14]
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d10a      	bne.n	8004686 <I2C_ITError+0x3a>
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b22      	cmp	r3, #34	; 0x22
 8004674:	d107      	bne.n	8004686 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004684:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800468c:	2b28      	cmp	r3, #40	; 0x28
 800468e:	d107      	bne.n	80046a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2228      	movs	r2, #40	; 0x28
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800469e:	e015      	b.n	80046cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ae:	d00a      	beq.n	80046c6 <I2C_ITError+0x7a>
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b60      	cmp	r3, #96	; 0x60
 80046b4:	d007      	beq.n	80046c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d162      	bne.n	80047a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d020      	beq.n	800473c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	4a6a      	ldr	r2, [pc, #424]	; (80048a8 <I2C_ITError+0x25c>)
 8004700:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd fc0e 	bl	8001f28 <HAL_DMA_Abort_IT>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8089 	beq.w	8004826 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004736:	4610      	mov	r0, r2
 8004738:	4798      	blx	r3
 800473a:	e074      	b.n	8004826 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	4a59      	ldr	r2, [pc, #356]	; (80048a8 <I2C_ITError+0x25c>)
 8004742:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	4618      	mov	r0, r3
 800474a:	f7fd fbed 	bl	8001f28 <HAL_DMA_Abort_IT>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d068      	beq.n	8004826 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d10b      	bne.n	800477a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800479c:	4610      	mov	r0, r2
 800479e:	4798      	blx	r3
 80047a0:	e041      	b.n	8004826 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b60      	cmp	r3, #96	; 0x60
 80047ac:	d125      	bne.n	80047fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d10b      	bne.n	80047e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe fef6 	bl	80035e4 <HAL_I2C_AbortCpltCallback>
 80047f8:	e015      	b.n	8004826 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d10b      	bne.n	8004820 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fe fed5 	bl	80035d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10e      	bne.n	8004854 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004862:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d113      	bne.n	80048a0 <I2C_ITError+0x254>
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b28      	cmp	r3, #40	; 0x28
 800487c:	d110      	bne.n	80048a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <I2C_ITError+0x260>)
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fe fe7a 	bl	8003594 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	08004b51 	.word	0x08004b51
 80048ac:	ffff0000 	.word	0xffff0000

080048b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	460b      	mov	r3, r1
 80048be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d006      	beq.n	80048da <I2C_MasterRequestWrite+0x2a>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d003      	beq.n	80048da <I2C_MasterRequestWrite+0x2a>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048d8:	d108      	bne.n	80048ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e00b      	b.n	8004904 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	2b12      	cmp	r3, #18
 80048f2:	d107      	bne.n	8004904 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f9c5 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d103      	bne.n	8004934 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e035      	b.n	80049a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004940:	d108      	bne.n	8004954 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004950:	611a      	str	r2, [r3, #16]
 8004952:	e01b      	b.n	800498c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004954:	897b      	ldrh	r3, [r7, #10]
 8004956:	11db      	asrs	r3, r3, #7
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f003 0306 	and.w	r3, r3, #6
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f063 030f 	orn	r3, r3, #15
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	490e      	ldr	r1, [pc, #56]	; (80049ac <I2C_MasterRequestWrite+0xfc>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f9eb 	bl	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e010      	b.n	80049a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004982:	897b      	ldrh	r3, [r7, #10]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4907      	ldr	r1, [pc, #28]	; (80049b0 <I2C_MasterRequestWrite+0x100>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f9db 	bl	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	00010008 	.word	0x00010008
 80049b0:	00010002 	.word	0x00010002

080049b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	460b      	mov	r3, r1
 80049c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d006      	beq.n	80049ee <I2C_MasterRequestRead+0x3a>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d003      	beq.n	80049ee <I2C_MasterRequestRead+0x3a>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049ec:	d108      	bne.n	8004a00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e00b      	b.n	8004a18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	2b11      	cmp	r3, #17
 8004a06:	d107      	bne.n	8004a18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f93b 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d103      	bne.n	8004a48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e079      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a54:	d108      	bne.n	8004a68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]
 8004a66:	e05f      	b.n	8004b28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a68:	897b      	ldrh	r3, [r7, #10]
 8004a6a:	11db      	asrs	r3, r3, #7
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0306 	and.w	r3, r3, #6
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f063 030f 	orn	r3, r3, #15
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4930      	ldr	r1, [pc, #192]	; (8004b48 <I2C_MasterRequestRead+0x194>)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f961 	bl	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e054      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4929      	ldr	r1, [pc, #164]	; (8004b4c <I2C_MasterRequestRead+0x198>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f951 	bl	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e044      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ada:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f8d9 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d103      	bne.n	8004b0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e017      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b10:	897b      	ldrh	r3, [r7, #10]
 8004b12:	11db      	asrs	r3, r3, #7
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f003 0306 	and.w	r3, r3, #6
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f063 030e 	orn	r3, r3, #14
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4907      	ldr	r1, [pc, #28]	; (8004b4c <I2C_MasterRequestRead+0x198>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f90d 	bl	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	00010008 	.word	0x00010008
 8004b4c:	00010002 	.word	0x00010002

08004b50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b6a:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <I2C_DMAAbort+0x148>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	08db      	lsrs	r3, r3, #3
 8004b70:	4a4a      	ldr	r2, [pc, #296]	; (8004c9c <I2C_DMAAbort+0x14c>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0a1a      	lsrs	r2, r3, #8
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00da      	lsls	r2, r3, #3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f043 0220 	orr.w	r2, r3, #32
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b96:	e00a      	b.n	8004bae <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d0ea      	beq.n	8004b84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bba:	2200      	movs	r2, #0
 8004bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	2200      	movs	r2, #0
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bdc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	2200      	movs	r2, #0
 8004c02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0201 	bic.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b60      	cmp	r3, #96	; 0x60
 8004c1e:	d10e      	bne.n	8004c3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c36:	6978      	ldr	r0, [r7, #20]
 8004c38:	f7fe fcd4 	bl	80035e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c3c:	e027      	b.n	8004c8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c44:	2b28      	cmp	r3, #40	; 0x28
 8004c46:	d117      	bne.n	8004c78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2228      	movs	r2, #40	; 0x28
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c76:	e007      	b.n	8004c88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c88:	6978      	ldr	r0, [r7, #20]
 8004c8a:	f7fe fca1 	bl	80035d0 <HAL_I2C_ErrorCallback>
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200000dc 	.word	0x200000dc
 8004c9c:	14f8b589 	.word	0x14f8b589

08004ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb0:	e025      	b.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d021      	beq.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fc fe7d 	bl	80019b8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d116      	bne.n	8004cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e023      	b.n	8004d46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	0c1b      	lsrs	r3, r3, #16
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10d      	bne.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	43da      	mvns	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bf0c      	ite	eq
 8004d1a:	2301      	moveq	r3, #1
 8004d1c:	2300      	movne	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	e00c      	b.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d0b6      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d5c:	e051      	b.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6c:	d123      	bne.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e046      	b.n	8004e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d021      	beq.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fc fdfb 	bl	80019b8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d116      	bne.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e020      	b.n	8004e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10c      	bne.n	8004e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	43da      	mvns	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4013      	ands	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bf14      	ite	ne
 8004e1e:	2301      	movne	r3, #1
 8004e20:	2300      	moveq	r3, #0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	e00b      	b.n	8004e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	43da      	mvns	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d18d      	bne.n	8004d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e58:	e02d      	b.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f900 	bl	8005060 <I2C_IsAcknowledgeFailed>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e02d      	b.n	8004ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d021      	beq.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e72:	f7fc fda1 	bl	80019b8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d116      	bne.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e007      	b.n	8004ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b80      	cmp	r3, #128	; 0x80
 8004ec2:	d1ca      	bne.n	8004e5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eda:	e02d      	b.n	8004f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f8bf 	bl	8005060 <I2C_IsAcknowledgeFailed>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e02d      	b.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d021      	beq.n	8004f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef4:	f7fc fd60 	bl	80019b8 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d116      	bne.n	8004f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e007      	b.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d1ca      	bne.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f5c:	4b13      	ldr	r3, [pc, #76]	; (8004fac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	0a1a      	lsrs	r2, r3, #8
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d107      	bne.n	8004f8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e008      	b.n	8004fa0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9c:	d0e9      	beq.n	8004f72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	200000dc 	.word	0x200000dc
 8004fb0:	14f8b589 	.word	0x14f8b589

08004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc0:	e042      	b.n	8005048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d119      	bne.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0210 	mvn.w	r2, #16
 8004fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e029      	b.n	8005058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fc fcd8 	bl	80019b8 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d116      	bne.n	8005048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e007      	b.n	8005058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d1b5      	bne.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005076:	d11b      	bne.n	80050b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	f043 0204 	orr.w	r2, r3, #4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80050ce:	d103      	bne.n	80050d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050d6:	e007      	b.n	80050e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050e0:	d102      	bne.n	80050e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2208      	movs	r2, #8
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e264      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d075      	beq.n	80051fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005112:	4ba3      	ldr	r3, [pc, #652]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d00c      	beq.n	8005138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800511e:	4ba0      	ldr	r3, [pc, #640]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005126:	2b08      	cmp	r3, #8
 8005128:	d112      	bne.n	8005150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512a:	4b9d      	ldr	r3, [pc, #628]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005136:	d10b      	bne.n	8005150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	4b99      	ldr	r3, [pc, #612]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d05b      	beq.n	80051fc <HAL_RCC_OscConfig+0x108>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d157      	bne.n	80051fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e23f      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d106      	bne.n	8005168 <HAL_RCC_OscConfig+0x74>
 800515a:	4b91      	ldr	r3, [pc, #580]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a90      	ldr	r2, [pc, #576]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e01d      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x98>
 8005172:	4b8b      	ldr	r3, [pc, #556]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a8a      	ldr	r2, [pc, #552]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4b88      	ldr	r3, [pc, #544]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a87      	ldr	r2, [pc, #540]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0xb0>
 800518c:	4b84      	ldr	r3, [pc, #528]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a83      	ldr	r2, [pc, #524]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b81      	ldr	r3, [pc, #516]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a80      	ldr	r2, [pc, #512]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d013      	beq.n	80051d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fc fc04 	bl	80019b8 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b4:	f7fc fc00 	bl	80019b8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	; 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e204      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0xc0>
 80051d2:	e014      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fc fbf0 	bl	80019b8 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fc fbec 	bl	80019b8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e1f0      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ee:	4b6c      	ldr	r3, [pc, #432]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0xe8>
 80051fa:	e000      	b.n	80051fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d063      	beq.n	80052d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800520a:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005216:	4b62      	ldr	r3, [pc, #392]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800521e:	2b08      	cmp	r3, #8
 8005220:	d11c      	bne.n	800525c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005222:	4b5f      	ldr	r3, [pc, #380]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d116      	bne.n	800525c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	4b5c      	ldr	r3, [pc, #368]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_RCC_OscConfig+0x152>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e1c4      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	4b56      	ldr	r3, [pc, #344]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4952      	ldr	r1, [pc, #328]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525a:	e03a      	b.n	80052d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d020      	beq.n	80052a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005264:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <HAL_RCC_OscConfig+0x2b0>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fc fba5 	bl	80019b8 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005272:	f7fc fba1 	bl	80019b8 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e1a5      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005284:	4b46      	ldr	r3, [pc, #280]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	4b43      	ldr	r3, [pc, #268]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4940      	ldr	r1, [pc, #256]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
 80052a4:	e015      	b.n	80052d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <HAL_RCC_OscConfig+0x2b0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fc fb84 	bl	80019b8 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b4:	f7fc fb80 	bl	80019b8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e184      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c6:	4b36      	ldr	r3, [pc, #216]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d030      	beq.n	8005340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e6:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <HAL_RCC_OscConfig+0x2b4>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ec:	f7fc fb64 	bl	80019b8 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f4:	f7fc fb60 	bl	80019b8 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e164      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x200>
 8005312:	e015      	b.n	8005340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_RCC_OscConfig+0x2b4>)
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531a:	f7fc fb4d 	bl	80019b8 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005322:	f7fc fb49 	bl	80019b8 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e14d      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005334:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f0      	bne.n	8005322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80a0 	beq.w	800548e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10f      	bne.n	800537e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	4a0e      	ldr	r2, [pc, #56]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536c:	6413      	str	r3, [r2, #64]	; 0x40
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_RCC_OscConfig+0x2ac>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537e:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <HAL_RCC_OscConfig+0x2b8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d121      	bne.n	80053ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538a:	4b08      	ldr	r3, [pc, #32]	; (80053ac <HAL_RCC_OscConfig+0x2b8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a07      	ldr	r2, [pc, #28]	; (80053ac <HAL_RCC_OscConfig+0x2b8>)
 8005390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005396:	f7fc fb0f 	bl	80019b8 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539c:	e011      	b.n	80053c2 <HAL_RCC_OscConfig+0x2ce>
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	42470000 	.word	0x42470000
 80053a8:	42470e80 	.word	0x42470e80
 80053ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b0:	f7fc fb02 	bl	80019b8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e106      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c2:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCC_OscConfig+0x4e4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2f0>
 80053d6:	4b81      	ldr	r3, [pc, #516]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	4a80      	ldr	r2, [pc, #512]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80053dc:	f043 0301 	orr.w	r3, r3, #1
 80053e0:	6713      	str	r3, [r2, #112]	; 0x70
 80053e2:	e01c      	b.n	800541e <HAL_RCC_OscConfig+0x32a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b05      	cmp	r3, #5
 80053ea:	d10c      	bne.n	8005406 <HAL_RCC_OscConfig+0x312>
 80053ec:	4b7b      	ldr	r3, [pc, #492]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	4a7a      	ldr	r2, [pc, #488]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80053f2:	f043 0304 	orr.w	r3, r3, #4
 80053f6:	6713      	str	r3, [r2, #112]	; 0x70
 80053f8:	4b78      	ldr	r3, [pc, #480]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a77      	ldr	r2, [pc, #476]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
 8005404:	e00b      	b.n	800541e <HAL_RCC_OscConfig+0x32a>
 8005406:	4b75      	ldr	r3, [pc, #468]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	4a74      	ldr	r2, [pc, #464]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	6713      	str	r3, [r2, #112]	; 0x70
 8005412:	4b72      	ldr	r3, [pc, #456]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	4a71      	ldr	r2, [pc, #452]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005418:	f023 0304 	bic.w	r3, r3, #4
 800541c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d015      	beq.n	8005452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005426:	f7fc fac7 	bl	80019b8 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542c:	e00a      	b.n	8005444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fc fac3 	bl	80019b8 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e0c5      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005444:	4b65      	ldr	r3, [pc, #404]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0ee      	beq.n	800542e <HAL_RCC_OscConfig+0x33a>
 8005450:	e014      	b.n	800547c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005452:	f7fc fab1 	bl	80019b8 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc faad 	bl	80019b8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0af      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005470:	4b5a      	ldr	r3, [pc, #360]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1ee      	bne.n	800545a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800547c:	7dfb      	ldrb	r3, [r7, #23]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d105      	bne.n	800548e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005482:	4b56      	ldr	r3, [pc, #344]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	4a55      	ldr	r2, [pc, #340]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 809b 	beq.w	80055ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005498:	4b50      	ldr	r3, [pc, #320]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 030c 	and.w	r3, r3, #12
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d05c      	beq.n	800555e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d141      	bne.n	8005530 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ac:	4b4c      	ldr	r3, [pc, #304]	; (80055e0 <HAL_RCC_OscConfig+0x4ec>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fc fa81 	bl	80019b8 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fc fa7d 	bl	80019b8 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e081      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054cc:	4b43      	ldr	r3, [pc, #268]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f0      	bne.n	80054ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	019b      	lsls	r3, r3, #6
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	4937      	ldr	r1, [pc, #220]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005502:	4b37      	ldr	r3, [pc, #220]	; (80055e0 <HAL_RCC_OscConfig+0x4ec>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fc fa56 	bl	80019b8 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005510:	f7fc fa52 	bl	80019b8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e056      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005522:	4b2e      	ldr	r3, [pc, #184]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x41c>
 800552e:	e04e      	b.n	80055ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005530:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCC_OscConfig+0x4ec>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005536:	f7fc fa3f 	bl	80019b8 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800553e:	f7fc fa3b 	bl	80019b8 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e03f      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005550:	4b22      	ldr	r3, [pc, #136]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f0      	bne.n	800553e <HAL_RCC_OscConfig+0x44a>
 800555c:	e037      	b.n	80055ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e032      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800556a:	4b1c      	ldr	r3, [pc, #112]	; (80055dc <HAL_RCC_OscConfig+0x4e8>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d028      	beq.n	80055ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d121      	bne.n	80055ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005590:	429a      	cmp	r2, r3
 8005592:	d11a      	bne.n	80055ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800559a:	4013      	ands	r3, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d111      	bne.n	80055ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	3b01      	subs	r3, #1
 80055b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40007000 	.word	0x40007000
 80055dc:	40023800 	.word	0x40023800
 80055e0:	42470060 	.word	0x42470060

080055e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0cc      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f8:	4b68      	ldr	r3, [pc, #416]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d90c      	bls.n	8005620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005606:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800560e:	4b63      	ldr	r3, [pc, #396]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0b8      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d020      	beq.n	800566e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005638:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a58      	ldr	r2, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005650:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4a52      	ldr	r2, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800565a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	494d      	ldr	r1, [pc, #308]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d044      	beq.n	8005704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d107      	bne.n	8005692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005682:	4b47      	ldr	r3, [pc, #284]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d119      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e07f      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d003      	beq.n	80056a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d107      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a2:	4b3f      	ldr	r3, [pc, #252]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e06f      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b2:	4b3b      	ldr	r3, [pc, #236]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e067      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056c2:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 0203 	bic.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4934      	ldr	r1, [pc, #208]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d4:	f7fc f970 	bl	80019b8 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fc f96c 	bl	80019b8 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e04f      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f2:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 020c 	and.w	r2, r3, #12
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	429a      	cmp	r2, r3
 8005702:	d1eb      	bne.n	80056dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005704:	4b25      	ldr	r3, [pc, #148]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d20c      	bcs.n	800572c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571a:	4b20      	ldr	r3, [pc, #128]	; (800579c <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d001      	beq.n	800572c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e032      	b.n	8005792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4916      	ldr	r1, [pc, #88]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	490e      	ldr	r1, [pc, #56]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800576a:	f000 f821 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 800576e:	4602      	mov	r2, r0
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	490a      	ldr	r1, [pc, #40]	; (80057a4 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	5ccb      	ldrb	r3, [r1, r3]
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fc f8d0 	bl	8001930 <HAL_InitTick>

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40023c00 	.word	0x40023c00
 80057a0:	40023800 	.word	0x40023800
 80057a4:	080076a0 	.word	0x080076a0
 80057a8:	200000dc 	.word	0x200000dc
 80057ac:	200000e0 	.word	0x200000e0

080057b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b0:	b5b0      	push	{r4, r5, r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057b6:	2100      	movs	r1, #0
 80057b8:	6079      	str	r1, [r7, #4]
 80057ba:	2100      	movs	r1, #0
 80057bc:	60f9      	str	r1, [r7, #12]
 80057be:	2100      	movs	r1, #0
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80057c2:	2100      	movs	r1, #0
 80057c4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c6:	4952      	ldr	r1, [pc, #328]	; (8005910 <HAL_RCC_GetSysClockFreq+0x160>)
 80057c8:	6889      	ldr	r1, [r1, #8]
 80057ca:	f001 010c 	and.w	r1, r1, #12
 80057ce:	2908      	cmp	r1, #8
 80057d0:	d00d      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0x3e>
 80057d2:	2908      	cmp	r1, #8
 80057d4:	f200 8094 	bhi.w	8005900 <HAL_RCC_GetSysClockFreq+0x150>
 80057d8:	2900      	cmp	r1, #0
 80057da:	d002      	beq.n	80057e2 <HAL_RCC_GetSysClockFreq+0x32>
 80057dc:	2904      	cmp	r1, #4
 80057de:	d003      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0x38>
 80057e0:	e08e      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057e2:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <HAL_RCC_GetSysClockFreq+0x164>)
 80057e4:	60bb      	str	r3, [r7, #8]
       break;
 80057e6:	e08e      	b.n	8005906 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e8:	4b4b      	ldr	r3, [pc, #300]	; (8005918 <HAL_RCC_GetSysClockFreq+0x168>)
 80057ea:	60bb      	str	r3, [r7, #8]
      break;
 80057ec:	e08b      	b.n	8005906 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057ee:	4948      	ldr	r1, [pc, #288]	; (8005910 <HAL_RCC_GetSysClockFreq+0x160>)
 80057f0:	6849      	ldr	r1, [r1, #4]
 80057f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80057f6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057f8:	4945      	ldr	r1, [pc, #276]	; (8005910 <HAL_RCC_GetSysClockFreq+0x160>)
 80057fa:	6849      	ldr	r1, [r1, #4]
 80057fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005800:	2900      	cmp	r1, #0
 8005802:	d024      	beq.n	800584e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005804:	4942      	ldr	r1, [pc, #264]	; (8005910 <HAL_RCC_GetSysClockFreq+0x160>)
 8005806:	6849      	ldr	r1, [r1, #4]
 8005808:	0989      	lsrs	r1, r1, #6
 800580a:	4608      	mov	r0, r1
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005814:	f04f 0500 	mov.w	r5, #0
 8005818:	ea00 0204 	and.w	r2, r0, r4
 800581c:	ea01 0305 	and.w	r3, r1, r5
 8005820:	493d      	ldr	r1, [pc, #244]	; (8005918 <HAL_RCC_GetSysClockFreq+0x168>)
 8005822:	fb01 f003 	mul.w	r0, r1, r3
 8005826:	2100      	movs	r1, #0
 8005828:	fb01 f102 	mul.w	r1, r1, r2
 800582c:	1844      	adds	r4, r0, r1
 800582e:	493a      	ldr	r1, [pc, #232]	; (8005918 <HAL_RCC_GetSysClockFreq+0x168>)
 8005830:	fba2 0101 	umull	r0, r1, r2, r1
 8005834:	1863      	adds	r3, r4, r1
 8005836:	4619      	mov	r1, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	461a      	mov	r2, r3
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	f7fa fd2e 	bl	80002a0 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4613      	mov	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e04a      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800584e:	4b30      	ldr	r3, [pc, #192]	; (8005910 <HAL_RCC_GetSysClockFreq+0x160>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	099b      	lsrs	r3, r3, #6
 8005854:	461a      	mov	r2, r3
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	ea02 0400 	and.w	r4, r2, r0
 8005866:	ea03 0501 	and.w	r5, r3, r1
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	014b      	lsls	r3, r1, #5
 8005878:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800587c:	0142      	lsls	r2, r0, #5
 800587e:	4610      	mov	r0, r2
 8005880:	4619      	mov	r1, r3
 8005882:	1b00      	subs	r0, r0, r4
 8005884:	eb61 0105 	sbc.w	r1, r1, r5
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	018b      	lsls	r3, r1, #6
 8005892:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005896:	0182      	lsls	r2, r0, #6
 8005898:	1a12      	subs	r2, r2, r0
 800589a:	eb63 0301 	sbc.w	r3, r3, r1
 800589e:	f04f 0000 	mov.w	r0, #0
 80058a2:	f04f 0100 	mov.w	r1, #0
 80058a6:	00d9      	lsls	r1, r3, #3
 80058a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058ac:	00d0      	lsls	r0, r2, #3
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	1912      	adds	r2, r2, r4
 80058b4:	eb45 0303 	adc.w	r3, r5, r3
 80058b8:	f04f 0000 	mov.w	r0, #0
 80058bc:	f04f 0100 	mov.w	r1, #0
 80058c0:	0299      	lsls	r1, r3, #10
 80058c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058c6:	0290      	lsls	r0, r2, #10
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	f7fa fce2 	bl	80002a0 <__aeabi_uldivmod>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4613      	mov	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <HAL_RCC_GetSysClockFreq+0x160>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	0c1b      	lsrs	r3, r3, #16
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	3301      	adds	r3, #1
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	60bb      	str	r3, [r7, #8]
      break;
 80058fe:	e002      	b.n	8005906 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <HAL_RCC_GetSysClockFreq+0x164>)
 8005902:	60bb      	str	r3, [r7, #8]
      break;
 8005904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005906:	68bb      	ldr	r3, [r7, #8]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bdb0      	pop	{r4, r5, r7, pc}
 8005910:	40023800 	.word	0x40023800
 8005914:	00f42400 	.word	0x00f42400
 8005918:	017d7840 	.word	0x017d7840

0800591c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005920:	4b03      	ldr	r3, [pc, #12]	; (8005930 <HAL_RCC_GetHCLKFreq+0x14>)
 8005922:	681b      	ldr	r3, [r3, #0]
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	200000dc 	.word	0x200000dc

08005934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005938:	f7ff fff0 	bl	800591c <HAL_RCC_GetHCLKFreq>
 800593c:	4602      	mov	r2, r0
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	0a9b      	lsrs	r3, r3, #10
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	4903      	ldr	r1, [pc, #12]	; (8005958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800594a:	5ccb      	ldrb	r3, [r1, r3]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40023800 	.word	0x40023800
 8005958:	080076b0 	.word	0x080076b0

0800595c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005960:	f7ff ffdc 	bl	800591c <HAL_RCC_GetHCLKFreq>
 8005964:	4602      	mov	r2, r0
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0b5b      	lsrs	r3, r3, #13
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	4903      	ldr	r1, [pc, #12]	; (8005980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005972:	5ccb      	ldrb	r3, [r1, r3]
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40023800 	.word	0x40023800
 8005980:	080076b0 	.word	0x080076b0

08005984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e03f      	b.n	8005a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb fdbc 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2224      	movs	r2, #36	; 0x24
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 ff65 	bl	8006898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695a      	ldr	r2, [r3, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b08a      	sub	sp, #40	; 0x28
 8005a22:	af02      	add	r7, sp, #8
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d17c      	bne.n	8005b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_UART_Transmit+0x2c>
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e075      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_UART_Transmit+0x3e>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e06e      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2221      	movs	r2, #33	; 0x21
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a72:	f7fb ffa1 	bl	80019b8 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d108      	bne.n	8005aa0 <HAL_UART_Transmit+0x82>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e003      	b.n	8005aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ab0:	e02a      	b.n	8005b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2180      	movs	r1, #128	; 0x80
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fc21 	bl	8006304 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e036      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	e007      	b.n	8005afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1cf      	bne.n	8005ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2140      	movs	r1, #64	; 0x40
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fbf1 	bl	8006304 <UART_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e006      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d11d      	bne.n	8005b98 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Receive_DMA+0x26>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e016      	b.n	8005b9a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Receive_DMA+0x38>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e00f      	b.n	8005b9a <HAL_UART_Receive_DMA+0x58>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fc26 	bl	80063e0 <UART_Start_Receive_DMA>
 8005b94:	4603      	mov	r3, r0
 8005b96:	e000      	b.n	8005b9a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b0ba      	sub	sp, #232	; 0xe8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10f      	bne.n	8005c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_UART_IRQHandler+0x66>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fd8d 	bl	8006722 <UART_Receive_IT>
      return;
 8005c08:	e256      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 80de 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x22c>
 8005c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80d1 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_UART_IRQHandler+0xae>
 8005c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_UART_IRQHandler+0xd2>
 8005c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0202 	orr.w	r2, r3, #2
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <HAL_UART_IRQHandler+0xf6>
 8005c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	f043 0204 	orr.w	r2, r3, #4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d011      	beq.n	8005cca <HAL_UART_IRQHandler+0x126>
 8005ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f043 0208 	orr.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 81ed 	beq.w	80060ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 0320 	and.w	r3, r3, #32
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x14e>
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fd18 	bl	8006722 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	bf0c      	ite	eq
 8005d00:	2301      	moveq	r3, #1
 8005d02:	2300      	movne	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <HAL_UART_IRQHandler+0x17a>
 8005d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d04f      	beq.n	8005dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fc20 	bl	8006564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d141      	bne.n	8005db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3314      	adds	r3, #20
 8005d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1d9      	bne.n	8005d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d013      	beq.n	8005dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	4a7d      	ldr	r2, [pc, #500]	; (8005f80 <HAL_UART_IRQHandler+0x3dc>)
 8005d8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fc f8c8 	bl	8001f28 <HAL_DMA_Abort_IT>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d016      	beq.n	8005dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	e00e      	b.n	8005dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f99a 	bl	80060e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	e00a      	b.n	8005dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f996 	bl	80060e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	e006      	b.n	8005dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f992 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005dca:	e170      	b.n	80060ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	bf00      	nop
    return;
 8005dce:	e16e      	b.n	80060ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	f040 814a 	bne.w	800606e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8143 	beq.w	800606e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 813c 	beq.w	800606e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	f040 80b4 	bne.w	8005f84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8140 	beq.w	80060b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	f080 8139 	bcs.w	80060b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e52:	f000 8088 	beq.w	8005f66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1d9      	bne.n	8005e56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3314      	adds	r3, #20
 8005ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e1      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e3      	bne.n	8005ede <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f36:	f023 0310 	bic.w	r3, r3, #16
 8005f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f48:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e3      	bne.n	8005f24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fb ff71 	bl	8001e48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f8c0 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f7c:	e099      	b.n	80060b2 <HAL_UART_IRQHandler+0x50e>
 8005f7e:	bf00      	nop
 8005f80:	0800662b 	.word	0x0800662b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 808b 	beq.w	80060b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8086 	beq.w	80060b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fce:	647a      	str	r2, [r7, #68]	; 0x44
 8005fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e3      	bne.n	8005faa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3314      	adds	r3, #20
 8006002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006006:	633a      	str	r2, [r7, #48]	; 0x30
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800600c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e3      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60fb      	str	r3, [r7, #12]
   return(result);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0310 	bic.w	r3, r3, #16
 800603e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800604c:	61fa      	str	r2, [r7, #28]
 800604e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69b9      	ldr	r1, [r7, #24]
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	617b      	str	r3, [r7, #20]
   return(result);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e3      	bne.n	8006028 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f848 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800606c:	e023      	b.n	80060b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_UART_IRQHandler+0x4ea>
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fae3 	bl	8006652 <UART_Transmit_IT>
    return;
 800608c:	e014      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00e      	beq.n	80060b8 <HAL_UART_IRQHandler+0x514>
 800609a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fb23 	bl	80066f2 <UART_EndTransmit_IT>
    return;
 80060ac:	e004      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
    return;
 80060ae:	bf00      	nop
 80060b0:	e002      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
      return;
 80060b2:	bf00      	nop
 80060b4:	e000      	b.n	80060b8 <HAL_UART_IRQHandler+0x514>
      return;
 80060b6:	bf00      	nop
  }
}
 80060b8:	37e8      	adds	r7, #232	; 0xe8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b09c      	sub	sp, #112	; 0x70
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d172      	bne.n	8006216 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006132:	2200      	movs	r2, #0
 8006134:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800614c:	66bb      	str	r3, [r7, #104]	; 0x68
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006156:	65ba      	str	r2, [r7, #88]	; 0x58
 8006158:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800615c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e5      	bne.n	8006136 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3314      	adds	r3, #20
 8006170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	667b      	str	r3, [r7, #100]	; 0x64
 8006182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3314      	adds	r3, #20
 8006188:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800618a:	647a      	str	r2, [r7, #68]	; 0x44
 800618c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e5      	bne.n	800616a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3314      	adds	r3, #20
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	623b      	str	r3, [r7, #32]
   return(result);
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b4:	663b      	str	r3, [r7, #96]	; 0x60
 80061b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3314      	adds	r3, #20
 80061bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061be:	633a      	str	r2, [r7, #48]	; 0x30
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e5      	bne.n	800619e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d119      	bne.n	8006216 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006202:	61fa      	str	r2, [r7, #28]
 8006204:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	69b9      	ldr	r1, [r7, #24]
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	617b      	str	r3, [r7, #20]
   return(result);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	2b01      	cmp	r3, #1
 800621c:	d106      	bne.n	800622c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006222:	4619      	mov	r1, r3
 8006224:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006226:	f7ff ff69 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800622a:	e002      	b.n	8006232 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800622c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800622e:	f7fa fe09 	bl	8000e44 <HAL_UART_RxCpltCallback>
}
 8006232:	bf00      	nop
 8006234:	3770      	adds	r7, #112	; 0x70
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	2b01      	cmp	r3, #1
 800624e:	d108      	bne.n	8006262 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	b29b      	uxth	r3, r3
 8006258:	4619      	mov	r1, r3
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff ff4e 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006260:	e002      	b.n	8006268 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ff36 	bl	80060d4 <HAL_UART_RxHalfCpltCallback>
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628c:	2b80      	cmp	r3, #128	; 0x80
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b21      	cmp	r3, #33	; 0x21
 80062a2:	d108      	bne.n	80062b6 <UART_DMAError+0x46>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062b0:	68b8      	ldr	r0, [r7, #8]
 80062b2:	f000 f92f 	bl	8006514 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b22      	cmp	r3, #34	; 0x22
 80062d6:	d108      	bne.n	80062ea <UART_DMAError+0x7a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062e4:	68b8      	ldr	r0, [r7, #8]
 80062e6:	f000 f93d 	bl	8006564 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f043 0210 	orr.w	r2, r3, #16
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f6:	68b8      	ldr	r0, [r7, #8]
 80062f8:	f7ff fef6 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b090      	sub	sp, #64	; 0x40
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006314:	e050      	b.n	80063b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d04c      	beq.n	80063b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800631e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <UART_WaitOnFlagUntilTimeout+0x30>
 8006324:	f7fb fb48 	bl	80019b8 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006330:	429a      	cmp	r2, r3
 8006332:	d241      	bcs.n	80063b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006354:	637a      	str	r2, [r7, #52]	; 0x34
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800635a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3314      	adds	r3, #20
 800636e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	613b      	str	r3, [r7, #16]
   return(result);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f023 0301 	bic.w	r3, r3, #1
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3314      	adds	r3, #20
 8006386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006388:	623a      	str	r2, [r7, #32]
 800638a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	69f9      	ldr	r1, [r7, #28]
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	61bb      	str	r3, [r7, #24]
   return(result);
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e5      	bne.n	8006368 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e00f      	b.n	80063d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4013      	ands	r3, r2
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d09f      	beq.n	8006316 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3740      	adds	r7, #64	; 0x40
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b098      	sub	sp, #96	; 0x60
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2222      	movs	r2, #34	; 0x22
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	4a3e      	ldr	r2, [pc, #248]	; (8006508 <UART_Start_Receive_DMA+0x128>)
 800640e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	4a3d      	ldr	r2, [pc, #244]	; (800650c <UART_Start_Receive_DMA+0x12c>)
 8006416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	4a3c      	ldr	r2, [pc, #240]	; (8006510 <UART_Start_Receive_DMA+0x130>)
 800641e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	2200      	movs	r2, #0
 8006426:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006428:	f107 0308 	add.w	r3, r7, #8
 800642c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	f7fb fcaa 	bl	8001d98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006478:	65bb      	str	r3, [r7, #88]	; 0x58
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	330c      	adds	r3, #12
 8006480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006482:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006484:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	657b      	str	r3, [r7, #84]	; 0x54
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e0:	653b      	str	r3, [r7, #80]	; 0x50
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3314      	adds	r3, #20
 80064e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064ea:	627a      	str	r2, [r7, #36]	; 0x24
 80064ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6a39      	ldr	r1, [r7, #32]
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3760      	adds	r7, #96	; 0x60
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	08006115 	.word	0x08006115
 800650c:	0800623b 	.word	0x0800623b
 8006510:	08006271 	.word	0x08006271

08006514 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b089      	sub	sp, #36	; 0x24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	60bb      	str	r3, [r7, #8]
   return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	61ba      	str	r2, [r7, #24]
 800653e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6979      	ldr	r1, [r7, #20]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	613b      	str	r3, [r7, #16]
   return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e5      	bne.n	800651c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006558:	bf00      	nop
 800655a:	3724      	adds	r7, #36	; 0x24
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b095      	sub	sp, #84	; 0x54
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800658c:	643a      	str	r2, [r7, #64]	; 0x40
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3314      	adds	r3, #20
 80065be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e5      	bne.n	80065a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d119      	bne.n	8006610 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f023 0310 	bic.w	r3, r3, #16
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065fc:	61ba      	str	r2, [r7, #24]
 80065fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6979      	ldr	r1, [r7, #20]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	613b      	str	r3, [r7, #16]
   return(result);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800661e:	bf00      	nop
 8006620:	3754      	adds	r7, #84	; 0x54
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff fd4f 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006652:	b480      	push	{r7}
 8006654:	b085      	sub	sp, #20
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b21      	cmp	r3, #33	; 0x21
 8006664:	d13e      	bne.n	80066e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666e:	d114      	bne.n	800669a <UART_Transmit_IT+0x48>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d110      	bne.n	800669a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800668c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	621a      	str	r2, [r3, #32]
 8006698:	e008      	b.n	80066ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6211      	str	r1, [r2, #32]
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4619      	mov	r1, r3
 80066ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10f      	bne.n	80066e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e000      	b.n	80066e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066e4:	2302      	movs	r3, #2
  }
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006708:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fcd4 	bl	80060c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b08c      	sub	sp, #48	; 0x30
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b22      	cmp	r3, #34	; 0x22
 8006734:	f040 80ab 	bne.w	800688e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006740:	d117      	bne.n	8006772 <UART_Receive_IT+0x50>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d113      	bne.n	8006772 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	b29a      	uxth	r2, r3
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
 8006770:	e026      	b.n	80067c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006778:	2300      	movs	r3, #0
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006784:	d007      	beq.n	8006796 <UART_Receive_IT+0x74>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <UART_Receive_IT+0x82>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e008      	b.n	80067b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4619      	mov	r1, r3
 80067ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d15a      	bne.n	800688a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0220 	bic.w	r2, r2, #32
 80067e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695a      	ldr	r2, [r3, #20]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	2b01      	cmp	r3, #1
 8006812:	d135      	bne.n	8006880 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	613b      	str	r3, [r7, #16]
   return(result);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683a:	623a      	str	r2, [r7, #32]
 800683c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	69f9      	ldr	r1, [r7, #28]
 8006840:	6a3a      	ldr	r2, [r7, #32]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	61bb      	str	r3, [r7, #24]
   return(result);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b10      	cmp	r3, #16
 800685a:	d10a      	bne.n	8006872 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f7ff fc3f 	bl	80060fc <HAL_UARTEx_RxEventCallback>
 800687e:	e002      	b.n	8006886 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fa fadf 	bl	8000e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	e002      	b.n	8006890 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3730      	adds	r7, #48	; 0x30
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	b09f      	sub	sp, #124	; 0x7c
 800689e:	af00      	add	r7, sp, #0
 80068a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ae:	68d9      	ldr	r1, [r3, #12]
 80068b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	ea40 0301 	orr.w	r3, r0, r1
 80068b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068dc:	f021 010c 	bic.w	r1, r1, #12
 80068e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068e6:	430b      	orrs	r3, r1
 80068e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f6:	6999      	ldr	r1, [r3, #24]
 80068f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	ea40 0301 	orr.w	r3, r0, r1
 8006900:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	4bc5      	ldr	r3, [pc, #788]	; (8006c1c <UART_SetConfig+0x384>)
 8006908:	429a      	cmp	r2, r3
 800690a:	d004      	beq.n	8006916 <UART_SetConfig+0x7e>
 800690c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4bc3      	ldr	r3, [pc, #780]	; (8006c20 <UART_SetConfig+0x388>)
 8006912:	429a      	cmp	r2, r3
 8006914:	d103      	bne.n	800691e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006916:	f7ff f821 	bl	800595c <HAL_RCC_GetPCLK2Freq>
 800691a:	6778      	str	r0, [r7, #116]	; 0x74
 800691c:	e002      	b.n	8006924 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800691e:	f7ff f809 	bl	8005934 <HAL_RCC_GetPCLK1Freq>
 8006922:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692c:	f040 80b6 	bne.w	8006a9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006932:	461c      	mov	r4, r3
 8006934:	f04f 0500 	mov.w	r5, #0
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	1891      	adds	r1, r2, r2
 800693e:	6439      	str	r1, [r7, #64]	; 0x40
 8006940:	415b      	adcs	r3, r3
 8006942:	647b      	str	r3, [r7, #68]	; 0x44
 8006944:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006948:	1912      	adds	r2, r2, r4
 800694a:	eb45 0303 	adc.w	r3, r5, r3
 800694e:	f04f 0000 	mov.w	r0, #0
 8006952:	f04f 0100 	mov.w	r1, #0
 8006956:	00d9      	lsls	r1, r3, #3
 8006958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800695c:	00d0      	lsls	r0, r2, #3
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	1911      	adds	r1, r2, r4
 8006964:	6639      	str	r1, [r7, #96]	; 0x60
 8006966:	416b      	adcs	r3, r5
 8006968:	667b      	str	r3, [r7, #100]	; 0x64
 800696a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	461a      	mov	r2, r3
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	1891      	adds	r1, r2, r2
 8006976:	63b9      	str	r1, [r7, #56]	; 0x38
 8006978:	415b      	adcs	r3, r3
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006980:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006984:	f7f9 fc8c 	bl	80002a0 <__aeabi_uldivmod>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4ba5      	ldr	r3, [pc, #660]	; (8006c24 <UART_SetConfig+0x38c>)
 800698e:	fba3 2302 	umull	r2, r3, r3, r2
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	011e      	lsls	r6, r3, #4
 8006996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006998:	461c      	mov	r4, r3
 800699a:	f04f 0500 	mov.w	r5, #0
 800699e:	4622      	mov	r2, r4
 80069a0:	462b      	mov	r3, r5
 80069a2:	1891      	adds	r1, r2, r2
 80069a4:	6339      	str	r1, [r7, #48]	; 0x30
 80069a6:	415b      	adcs	r3, r3
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
 80069aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069ae:	1912      	adds	r2, r2, r4
 80069b0:	eb45 0303 	adc.w	r3, r5, r3
 80069b4:	f04f 0000 	mov.w	r0, #0
 80069b8:	f04f 0100 	mov.w	r1, #0
 80069bc:	00d9      	lsls	r1, r3, #3
 80069be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069c2:	00d0      	lsls	r0, r2, #3
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	1911      	adds	r1, r2, r4
 80069ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80069cc:	416b      	adcs	r3, r5
 80069ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	1891      	adds	r1, r2, r2
 80069dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80069de:	415b      	adcs	r3, r3
 80069e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069ea:	f7f9 fc59 	bl	80002a0 <__aeabi_uldivmod>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4b8c      	ldr	r3, [pc, #560]	; (8006c24 <UART_SetConfig+0x38c>)
 80069f4:	fba3 1302 	umull	r1, r3, r3, r2
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	2164      	movs	r1, #100	; 0x64
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	3332      	adds	r3, #50	; 0x32
 8006a06:	4a87      	ldr	r2, [pc, #540]	; (8006c24 <UART_SetConfig+0x38c>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a14:	441e      	add	r6, r3
 8006a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f04f 0100 	mov.w	r1, #0
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	1894      	adds	r4, r2, r2
 8006a24:	623c      	str	r4, [r7, #32]
 8006a26:	415b      	adcs	r3, r3
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a2e:	1812      	adds	r2, r2, r0
 8006a30:	eb41 0303 	adc.w	r3, r1, r3
 8006a34:	f04f 0400 	mov.w	r4, #0
 8006a38:	f04f 0500 	mov.w	r5, #0
 8006a3c:	00dd      	lsls	r5, r3, #3
 8006a3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a42:	00d4      	lsls	r4, r2, #3
 8006a44:	4622      	mov	r2, r4
 8006a46:	462b      	mov	r3, r5
 8006a48:	1814      	adds	r4, r2, r0
 8006a4a:	653c      	str	r4, [r7, #80]	; 0x50
 8006a4c:	414b      	adcs	r3, r1
 8006a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	1891      	adds	r1, r2, r2
 8006a5c:	61b9      	str	r1, [r7, #24]
 8006a5e:	415b      	adcs	r3, r3
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a6a:	f7f9 fc19 	bl	80002a0 <__aeabi_uldivmod>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4b6c      	ldr	r3, [pc, #432]	; (8006c24 <UART_SetConfig+0x38c>)
 8006a74:	fba3 1302 	umull	r1, r3, r3, r2
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	2164      	movs	r1, #100	; 0x64
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	3332      	adds	r3, #50	; 0x32
 8006a86:	4a67      	ldr	r2, [pc, #412]	; (8006c24 <UART_SetConfig+0x38c>)
 8006a88:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	f003 0207 	and.w	r2, r3, #7
 8006a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4432      	add	r2, r6
 8006a98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a9a:	e0b9      	b.n	8006c10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9e:	461c      	mov	r4, r3
 8006aa0:	f04f 0500 	mov.w	r5, #0
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	1891      	adds	r1, r2, r2
 8006aaa:	6139      	str	r1, [r7, #16]
 8006aac:	415b      	adcs	r3, r3
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ab4:	1912      	adds	r2, r2, r4
 8006ab6:	eb45 0303 	adc.w	r3, r5, r3
 8006aba:	f04f 0000 	mov.w	r0, #0
 8006abe:	f04f 0100 	mov.w	r1, #0
 8006ac2:	00d9      	lsls	r1, r3, #3
 8006ac4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ac8:	00d0      	lsls	r0, r2, #3
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	eb12 0804 	adds.w	r8, r2, r4
 8006ad2:	eb43 0905 	adc.w	r9, r3, r5
 8006ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f04f 0100 	mov.w	r1, #0
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	008b      	lsls	r3, r1, #2
 8006aea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006aee:	0082      	lsls	r2, r0, #2
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7f9 fbd4 	bl	80002a0 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b49      	ldr	r3, [pc, #292]	; (8006c24 <UART_SetConfig+0x38c>)
 8006afe:	fba3 2302 	umull	r2, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	011e      	lsls	r6, r3, #4
 8006b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f04f 0100 	mov.w	r1, #0
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	1894      	adds	r4, r2, r2
 8006b14:	60bc      	str	r4, [r7, #8]
 8006b16:	415b      	adcs	r3, r3
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b1e:	1812      	adds	r2, r2, r0
 8006b20:	eb41 0303 	adc.w	r3, r1, r3
 8006b24:	f04f 0400 	mov.w	r4, #0
 8006b28:	f04f 0500 	mov.w	r5, #0
 8006b2c:	00dd      	lsls	r5, r3, #3
 8006b2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b32:	00d4      	lsls	r4, r2, #3
 8006b34:	4622      	mov	r2, r4
 8006b36:	462b      	mov	r3, r5
 8006b38:	1814      	adds	r4, r2, r0
 8006b3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b3c:	414b      	adcs	r3, r1
 8006b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f04f 0100 	mov.w	r1, #0
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	008b      	lsls	r3, r1, #2
 8006b54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b58:	0082      	lsls	r2, r0, #2
 8006b5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b5e:	f7f9 fb9f 	bl	80002a0 <__aeabi_uldivmod>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4b2f      	ldr	r3, [pc, #188]	; (8006c24 <UART_SetConfig+0x38c>)
 8006b68:	fba3 1302 	umull	r1, r3, r3, r2
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	2164      	movs	r1, #100	; 0x64
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	3332      	adds	r3, #50	; 0x32
 8006b7a:	4a2a      	ldr	r2, [pc, #168]	; (8006c24 <UART_SetConfig+0x38c>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	095b      	lsrs	r3, r3, #5
 8006b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b86:	441e      	add	r6, r3
 8006b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	1894      	adds	r4, r2, r2
 8006b96:	603c      	str	r4, [r7, #0]
 8006b98:	415b      	adcs	r3, r3
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba0:	1812      	adds	r2, r2, r0
 8006ba2:	eb41 0303 	adc.w	r3, r1, r3
 8006ba6:	f04f 0400 	mov.w	r4, #0
 8006baa:	f04f 0500 	mov.w	r5, #0
 8006bae:	00dd      	lsls	r5, r3, #3
 8006bb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bb4:	00d4      	lsls	r4, r2, #3
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	462b      	mov	r3, r5
 8006bba:	eb12 0a00 	adds.w	sl, r2, r0
 8006bbe:	eb43 0b01 	adc.w	fp, r3, r1
 8006bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f04f 0100 	mov.w	r1, #0
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	008b      	lsls	r3, r1, #2
 8006bd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bda:	0082      	lsls	r2, r0, #2
 8006bdc:	4650      	mov	r0, sl
 8006bde:	4659      	mov	r1, fp
 8006be0:	f7f9 fb5e 	bl	80002a0 <__aeabi_uldivmod>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4b0e      	ldr	r3, [pc, #56]	; (8006c24 <UART_SetConfig+0x38c>)
 8006bea:	fba3 1302 	umull	r1, r3, r3, r2
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	2164      	movs	r1, #100	; 0x64
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	3332      	adds	r3, #50	; 0x32
 8006bfc:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <UART_SetConfig+0x38c>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	f003 020f 	and.w	r2, r3, #15
 8006c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4432      	add	r2, r6
 8006c0e:	609a      	str	r2, [r3, #8]
}
 8006c10:	bf00      	nop
 8006c12:	377c      	adds	r7, #124	; 0x7c
 8006c14:	46bd      	mov	sp, r7
 8006c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40011000 	.word	0x40011000
 8006c20:	40011400 	.word	0x40011400
 8006c24:	51eb851f 	.word	0x51eb851f

08006c28 <atoi>:
 8006c28:	220a      	movs	r2, #10
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	f000 b8d6 	b.w	8006ddc <strtol>

08006c30 <__errno>:
 8006c30:	4b01      	ldr	r3, [pc, #4]	; (8006c38 <__errno+0x8>)
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	200000e8 	.word	0x200000e8

08006c3c <__libc_init_array>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4d0d      	ldr	r5, [pc, #52]	; (8006c74 <__libc_init_array+0x38>)
 8006c40:	4c0d      	ldr	r4, [pc, #52]	; (8006c78 <__libc_init_array+0x3c>)
 8006c42:	1b64      	subs	r4, r4, r5
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	2600      	movs	r6, #0
 8006c48:	42a6      	cmp	r6, r4
 8006c4a:	d109      	bne.n	8006c60 <__libc_init_array+0x24>
 8006c4c:	4d0b      	ldr	r5, [pc, #44]	; (8006c7c <__libc_init_array+0x40>)
 8006c4e:	4c0c      	ldr	r4, [pc, #48]	; (8006c80 <__libc_init_array+0x44>)
 8006c50:	f000 fcdc 	bl	800760c <_init>
 8006c54:	1b64      	subs	r4, r4, r5
 8006c56:	10a4      	asrs	r4, r4, #2
 8006c58:	2600      	movs	r6, #0
 8006c5a:	42a6      	cmp	r6, r4
 8006c5c:	d105      	bne.n	8006c6a <__libc_init_array+0x2e>
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c64:	4798      	blx	r3
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7ee      	b.n	8006c48 <__libc_init_array+0xc>
 8006c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6e:	4798      	blx	r3
 8006c70:	3601      	adds	r6, #1
 8006c72:	e7f2      	b.n	8006c5a <__libc_init_array+0x1e>
 8006c74:	080077fc 	.word	0x080077fc
 8006c78:	080077fc 	.word	0x080077fc
 8006c7c:	080077fc 	.word	0x080077fc
 8006c80:	08007800 	.word	0x08007800

08006c84 <memset>:
 8006c84:	4402      	add	r2, r0
 8006c86:	4603      	mov	r3, r0
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d100      	bne.n	8006c8e <memset+0xa>
 8006c8c:	4770      	bx	lr
 8006c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c92:	e7f9      	b.n	8006c88 <memset+0x4>

08006c94 <siprintf>:
 8006c94:	b40e      	push	{r1, r2, r3}
 8006c96:	b500      	push	{lr}
 8006c98:	b09c      	sub	sp, #112	; 0x70
 8006c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c9c:	9002      	str	r0, [sp, #8]
 8006c9e:	9006      	str	r0, [sp, #24]
 8006ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ca4:	4809      	ldr	r0, [pc, #36]	; (8006ccc <siprintf+0x38>)
 8006ca6:	9107      	str	r1, [sp, #28]
 8006ca8:	9104      	str	r1, [sp, #16]
 8006caa:	4909      	ldr	r1, [pc, #36]	; (8006cd0 <siprintf+0x3c>)
 8006cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb0:	9105      	str	r1, [sp, #20]
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	a902      	add	r1, sp, #8
 8006cb8:	f000 f8f6 	bl	8006ea8 <_svfiprintf_r>
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	b01c      	add	sp, #112	; 0x70
 8006cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cc8:	b003      	add	sp, #12
 8006cca:	4770      	bx	lr
 8006ccc:	200000e8 	.word	0x200000e8
 8006cd0:	ffff0208 	.word	0xffff0208

08006cd4 <_strtol_l.isra.0>:
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cda:	d001      	beq.n	8006ce0 <_strtol_l.isra.0+0xc>
 8006cdc:	2b24      	cmp	r3, #36	; 0x24
 8006cde:	d906      	bls.n	8006cee <_strtol_l.isra.0+0x1a>
 8006ce0:	f7ff ffa6 	bl	8006c30 <__errno>
 8006ce4:	2316      	movs	r3, #22
 8006ce6:	6003      	str	r3, [r0, #0]
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cee:	4f3a      	ldr	r7, [pc, #232]	; (8006dd8 <_strtol_l.isra.0+0x104>)
 8006cf0:	468e      	mov	lr, r1
 8006cf2:	4676      	mov	r6, lr
 8006cf4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006cf8:	5de5      	ldrb	r5, [r4, r7]
 8006cfa:	f015 0508 	ands.w	r5, r5, #8
 8006cfe:	d1f8      	bne.n	8006cf2 <_strtol_l.isra.0+0x1e>
 8006d00:	2c2d      	cmp	r4, #45	; 0x2d
 8006d02:	d134      	bne.n	8006d6e <_strtol_l.isra.0+0x9a>
 8006d04:	f89e 4000 	ldrb.w	r4, [lr]
 8006d08:	f04f 0801 	mov.w	r8, #1
 8006d0c:	f106 0e02 	add.w	lr, r6, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d05c      	beq.n	8006dce <_strtol_l.isra.0+0xfa>
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d10c      	bne.n	8006d32 <_strtol_l.isra.0+0x5e>
 8006d18:	2c30      	cmp	r4, #48	; 0x30
 8006d1a:	d10a      	bne.n	8006d32 <_strtol_l.isra.0+0x5e>
 8006d1c:	f89e 4000 	ldrb.w	r4, [lr]
 8006d20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d24:	2c58      	cmp	r4, #88	; 0x58
 8006d26:	d14d      	bne.n	8006dc4 <_strtol_l.isra.0+0xf0>
 8006d28:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	f10e 0e02 	add.w	lr, lr, #2
 8006d32:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006d36:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006d3a:	2600      	movs	r6, #0
 8006d3c:	fbbc f9f3 	udiv	r9, ip, r3
 8006d40:	4635      	mov	r5, r6
 8006d42:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d46:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006d4a:	2f09      	cmp	r7, #9
 8006d4c:	d818      	bhi.n	8006d80 <_strtol_l.isra.0+0xac>
 8006d4e:	463c      	mov	r4, r7
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	dd24      	ble.n	8006d9e <_strtol_l.isra.0+0xca>
 8006d54:	2e00      	cmp	r6, #0
 8006d56:	db1f      	blt.n	8006d98 <_strtol_l.isra.0+0xc4>
 8006d58:	45a9      	cmp	r9, r5
 8006d5a:	d31d      	bcc.n	8006d98 <_strtol_l.isra.0+0xc4>
 8006d5c:	d101      	bne.n	8006d62 <_strtol_l.isra.0+0x8e>
 8006d5e:	45a2      	cmp	sl, r4
 8006d60:	db1a      	blt.n	8006d98 <_strtol_l.isra.0+0xc4>
 8006d62:	fb05 4503 	mla	r5, r5, r3, r4
 8006d66:	2601      	movs	r6, #1
 8006d68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006d6c:	e7eb      	b.n	8006d46 <_strtol_l.isra.0+0x72>
 8006d6e:	2c2b      	cmp	r4, #43	; 0x2b
 8006d70:	bf08      	it	eq
 8006d72:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006d76:	46a8      	mov	r8, r5
 8006d78:	bf08      	it	eq
 8006d7a:	f106 0e02 	addeq.w	lr, r6, #2
 8006d7e:	e7c7      	b.n	8006d10 <_strtol_l.isra.0+0x3c>
 8006d80:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006d84:	2f19      	cmp	r7, #25
 8006d86:	d801      	bhi.n	8006d8c <_strtol_l.isra.0+0xb8>
 8006d88:	3c37      	subs	r4, #55	; 0x37
 8006d8a:	e7e1      	b.n	8006d50 <_strtol_l.isra.0+0x7c>
 8006d8c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006d90:	2f19      	cmp	r7, #25
 8006d92:	d804      	bhi.n	8006d9e <_strtol_l.isra.0+0xca>
 8006d94:	3c57      	subs	r4, #87	; 0x57
 8006d96:	e7db      	b.n	8006d50 <_strtol_l.isra.0+0x7c>
 8006d98:	f04f 36ff 	mov.w	r6, #4294967295
 8006d9c:	e7e4      	b.n	8006d68 <_strtol_l.isra.0+0x94>
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	da05      	bge.n	8006dae <_strtol_l.isra.0+0xda>
 8006da2:	2322      	movs	r3, #34	; 0x22
 8006da4:	6003      	str	r3, [r0, #0]
 8006da6:	4665      	mov	r5, ip
 8006da8:	b942      	cbnz	r2, 8006dbc <_strtol_l.isra.0+0xe8>
 8006daa:	4628      	mov	r0, r5
 8006dac:	e79d      	b.n	8006cea <_strtol_l.isra.0+0x16>
 8006dae:	f1b8 0f00 	cmp.w	r8, #0
 8006db2:	d000      	beq.n	8006db6 <_strtol_l.isra.0+0xe2>
 8006db4:	426d      	negs	r5, r5
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	d0f7      	beq.n	8006daa <_strtol_l.isra.0+0xd6>
 8006dba:	b10e      	cbz	r6, 8006dc0 <_strtol_l.isra.0+0xec>
 8006dbc:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	e7f2      	b.n	8006daa <_strtol_l.isra.0+0xd6>
 8006dc4:	2430      	movs	r4, #48	; 0x30
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1b3      	bne.n	8006d32 <_strtol_l.isra.0+0x5e>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	e7b1      	b.n	8006d32 <_strtol_l.isra.0+0x5e>
 8006dce:	2c30      	cmp	r4, #48	; 0x30
 8006dd0:	d0a4      	beq.n	8006d1c <_strtol_l.isra.0+0x48>
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	e7ad      	b.n	8006d32 <_strtol_l.isra.0+0x5e>
 8006dd6:	bf00      	nop
 8006dd8:	080076c1 	.word	0x080076c1

08006ddc <strtol>:
 8006ddc:	4613      	mov	r3, r2
 8006dde:	460a      	mov	r2, r1
 8006de0:	4601      	mov	r1, r0
 8006de2:	4802      	ldr	r0, [pc, #8]	; (8006dec <strtol+0x10>)
 8006de4:	6800      	ldr	r0, [r0, #0]
 8006de6:	f7ff bf75 	b.w	8006cd4 <_strtol_l.isra.0>
 8006dea:	bf00      	nop
 8006dec:	200000e8 	.word	0x200000e8

08006df0 <__ssputs_r>:
 8006df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df4:	688e      	ldr	r6, [r1, #8]
 8006df6:	429e      	cmp	r6, r3
 8006df8:	4682      	mov	sl, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	4690      	mov	r8, r2
 8006dfe:	461f      	mov	r7, r3
 8006e00:	d838      	bhi.n	8006e74 <__ssputs_r+0x84>
 8006e02:	898a      	ldrh	r2, [r1, #12]
 8006e04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e08:	d032      	beq.n	8006e70 <__ssputs_r+0x80>
 8006e0a:	6825      	ldr	r5, [r4, #0]
 8006e0c:	6909      	ldr	r1, [r1, #16]
 8006e0e:	eba5 0901 	sub.w	r9, r5, r1
 8006e12:	6965      	ldr	r5, [r4, #20]
 8006e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	444b      	add	r3, r9
 8006e20:	106d      	asrs	r5, r5, #1
 8006e22:	429d      	cmp	r5, r3
 8006e24:	bf38      	it	cc
 8006e26:	461d      	movcc	r5, r3
 8006e28:	0553      	lsls	r3, r2, #21
 8006e2a:	d531      	bpl.n	8006e90 <__ssputs_r+0xa0>
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f000 fb47 	bl	80074c0 <_malloc_r>
 8006e32:	4606      	mov	r6, r0
 8006e34:	b950      	cbnz	r0, 8006e4c <__ssputs_r+0x5c>
 8006e36:	230c      	movs	r3, #12
 8006e38:	f8ca 3000 	str.w	r3, [sl]
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4c:	6921      	ldr	r1, [r4, #16]
 8006e4e:	464a      	mov	r2, r9
 8006e50:	f000 fabe 	bl	80073d0 <memcpy>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	6126      	str	r6, [r4, #16]
 8006e62:	6165      	str	r5, [r4, #20]
 8006e64:	444e      	add	r6, r9
 8006e66:	eba5 0509 	sub.w	r5, r5, r9
 8006e6a:	6026      	str	r6, [r4, #0]
 8006e6c:	60a5      	str	r5, [r4, #8]
 8006e6e:	463e      	mov	r6, r7
 8006e70:	42be      	cmp	r6, r7
 8006e72:	d900      	bls.n	8006e76 <__ssputs_r+0x86>
 8006e74:	463e      	mov	r6, r7
 8006e76:	4632      	mov	r2, r6
 8006e78:	6820      	ldr	r0, [r4, #0]
 8006e7a:	4641      	mov	r1, r8
 8006e7c:	f000 fab6 	bl	80073ec <memmove>
 8006e80:	68a3      	ldr	r3, [r4, #8]
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	1b9b      	subs	r3, r3, r6
 8006e86:	4432      	add	r2, r6
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	6022      	str	r2, [r4, #0]
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e7db      	b.n	8006e48 <__ssputs_r+0x58>
 8006e90:	462a      	mov	r2, r5
 8006e92:	f000 fb6f 	bl	8007574 <_realloc_r>
 8006e96:	4606      	mov	r6, r0
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d1e1      	bne.n	8006e60 <__ssputs_r+0x70>
 8006e9c:	6921      	ldr	r1, [r4, #16]
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	f000 fabe 	bl	8007420 <_free_r>
 8006ea4:	e7c7      	b.n	8006e36 <__ssputs_r+0x46>
	...

08006ea8 <_svfiprintf_r>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	4698      	mov	r8, r3
 8006eae:	898b      	ldrh	r3, [r1, #12]
 8006eb0:	061b      	lsls	r3, r3, #24
 8006eb2:	b09d      	sub	sp, #116	; 0x74
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	4614      	mov	r4, r2
 8006eba:	d50e      	bpl.n	8006eda <_svfiprintf_r+0x32>
 8006ebc:	690b      	ldr	r3, [r1, #16]
 8006ebe:	b963      	cbnz	r3, 8006eda <_svfiprintf_r+0x32>
 8006ec0:	2140      	movs	r1, #64	; 0x40
 8006ec2:	f000 fafd 	bl	80074c0 <_malloc_r>
 8006ec6:	6028      	str	r0, [r5, #0]
 8006ec8:	6128      	str	r0, [r5, #16]
 8006eca:	b920      	cbnz	r0, 8006ed6 <_svfiprintf_r+0x2e>
 8006ecc:	230c      	movs	r3, #12
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed4:	e0d1      	b.n	800707a <_svfiprintf_r+0x1d2>
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	616b      	str	r3, [r5, #20]
 8006eda:	2300      	movs	r3, #0
 8006edc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ede:	2320      	movs	r3, #32
 8006ee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ee4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ee8:	2330      	movs	r3, #48	; 0x30
 8006eea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007094 <_svfiprintf_r+0x1ec>
 8006eee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ef2:	f04f 0901 	mov.w	r9, #1
 8006ef6:	4623      	mov	r3, r4
 8006ef8:	469a      	mov	sl, r3
 8006efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006efe:	b10a      	cbz	r2, 8006f04 <_svfiprintf_r+0x5c>
 8006f00:	2a25      	cmp	r2, #37	; 0x25
 8006f02:	d1f9      	bne.n	8006ef8 <_svfiprintf_r+0x50>
 8006f04:	ebba 0b04 	subs.w	fp, sl, r4
 8006f08:	d00b      	beq.n	8006f22 <_svfiprintf_r+0x7a>
 8006f0a:	465b      	mov	r3, fp
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff ff6d 	bl	8006df0 <__ssputs_r>
 8006f16:	3001      	adds	r0, #1
 8006f18:	f000 80aa 	beq.w	8007070 <_svfiprintf_r+0x1c8>
 8006f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f1e:	445a      	add	r2, fp
 8006f20:	9209      	str	r2, [sp, #36]	; 0x24
 8006f22:	f89a 3000 	ldrb.w	r3, [sl]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80a2 	beq.w	8007070 <_svfiprintf_r+0x1c8>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f36:	f10a 0a01 	add.w	sl, sl, #1
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	9307      	str	r3, [sp, #28]
 8006f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f42:	931a      	str	r3, [sp, #104]	; 0x68
 8006f44:	4654      	mov	r4, sl
 8006f46:	2205      	movs	r2, #5
 8006f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4c:	4851      	ldr	r0, [pc, #324]	; (8007094 <_svfiprintf_r+0x1ec>)
 8006f4e:	f7f9 f957 	bl	8000200 <memchr>
 8006f52:	9a04      	ldr	r2, [sp, #16]
 8006f54:	b9d8      	cbnz	r0, 8006f8e <_svfiprintf_r+0xe6>
 8006f56:	06d0      	lsls	r0, r2, #27
 8006f58:	bf44      	itt	mi
 8006f5a:	2320      	movmi	r3, #32
 8006f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f60:	0711      	lsls	r1, r2, #28
 8006f62:	bf44      	itt	mi
 8006f64:	232b      	movmi	r3, #43	; 0x2b
 8006f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f70:	d015      	beq.n	8006f9e <_svfiprintf_r+0xf6>
 8006f72:	9a07      	ldr	r2, [sp, #28]
 8006f74:	4654      	mov	r4, sl
 8006f76:	2000      	movs	r0, #0
 8006f78:	f04f 0c0a 	mov.w	ip, #10
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f82:	3b30      	subs	r3, #48	; 0x30
 8006f84:	2b09      	cmp	r3, #9
 8006f86:	d94e      	bls.n	8007026 <_svfiprintf_r+0x17e>
 8006f88:	b1b0      	cbz	r0, 8006fb8 <_svfiprintf_r+0x110>
 8006f8a:	9207      	str	r2, [sp, #28]
 8006f8c:	e014      	b.n	8006fb8 <_svfiprintf_r+0x110>
 8006f8e:	eba0 0308 	sub.w	r3, r0, r8
 8006f92:	fa09 f303 	lsl.w	r3, r9, r3
 8006f96:	4313      	orrs	r3, r2
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	46a2      	mov	sl, r4
 8006f9c:	e7d2      	b.n	8006f44 <_svfiprintf_r+0x9c>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	1d19      	adds	r1, r3, #4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	9103      	str	r1, [sp, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bfbb      	ittet	lt
 8006faa:	425b      	neglt	r3, r3
 8006fac:	f042 0202 	orrlt.w	r2, r2, #2
 8006fb0:	9307      	strge	r3, [sp, #28]
 8006fb2:	9307      	strlt	r3, [sp, #28]
 8006fb4:	bfb8      	it	lt
 8006fb6:	9204      	strlt	r2, [sp, #16]
 8006fb8:	7823      	ldrb	r3, [r4, #0]
 8006fba:	2b2e      	cmp	r3, #46	; 0x2e
 8006fbc:	d10c      	bne.n	8006fd8 <_svfiprintf_r+0x130>
 8006fbe:	7863      	ldrb	r3, [r4, #1]
 8006fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc2:	d135      	bne.n	8007030 <_svfiprintf_r+0x188>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	1d1a      	adds	r2, r3, #4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	9203      	str	r2, [sp, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bfb8      	it	lt
 8006fd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fd4:	3402      	adds	r4, #2
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070a4 <_svfiprintf_r+0x1fc>
 8006fdc:	7821      	ldrb	r1, [r4, #0]
 8006fde:	2203      	movs	r2, #3
 8006fe0:	4650      	mov	r0, sl
 8006fe2:	f7f9 f90d 	bl	8000200 <memchr>
 8006fe6:	b140      	cbz	r0, 8006ffa <_svfiprintf_r+0x152>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	eba0 000a 	sub.w	r0, r0, sl
 8006fee:	fa03 f000 	lsl.w	r0, r3, r0
 8006ff2:	9b04      	ldr	r3, [sp, #16]
 8006ff4:	4303      	orrs	r3, r0
 8006ff6:	3401      	adds	r4, #1
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffe:	4826      	ldr	r0, [pc, #152]	; (8007098 <_svfiprintf_r+0x1f0>)
 8007000:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007004:	2206      	movs	r2, #6
 8007006:	f7f9 f8fb 	bl	8000200 <memchr>
 800700a:	2800      	cmp	r0, #0
 800700c:	d038      	beq.n	8007080 <_svfiprintf_r+0x1d8>
 800700e:	4b23      	ldr	r3, [pc, #140]	; (800709c <_svfiprintf_r+0x1f4>)
 8007010:	bb1b      	cbnz	r3, 800705a <_svfiprintf_r+0x1b2>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	3307      	adds	r3, #7
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	3308      	adds	r3, #8
 800701c:	9303      	str	r3, [sp, #12]
 800701e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007020:	4433      	add	r3, r6
 8007022:	9309      	str	r3, [sp, #36]	; 0x24
 8007024:	e767      	b.n	8006ef6 <_svfiprintf_r+0x4e>
 8007026:	fb0c 3202 	mla	r2, ip, r2, r3
 800702a:	460c      	mov	r4, r1
 800702c:	2001      	movs	r0, #1
 800702e:	e7a5      	b.n	8006f7c <_svfiprintf_r+0xd4>
 8007030:	2300      	movs	r3, #0
 8007032:	3401      	adds	r4, #1
 8007034:	9305      	str	r3, [sp, #20]
 8007036:	4619      	mov	r1, r3
 8007038:	f04f 0c0a 	mov.w	ip, #10
 800703c:	4620      	mov	r0, r4
 800703e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007042:	3a30      	subs	r2, #48	; 0x30
 8007044:	2a09      	cmp	r2, #9
 8007046:	d903      	bls.n	8007050 <_svfiprintf_r+0x1a8>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0c5      	beq.n	8006fd8 <_svfiprintf_r+0x130>
 800704c:	9105      	str	r1, [sp, #20]
 800704e:	e7c3      	b.n	8006fd8 <_svfiprintf_r+0x130>
 8007050:	fb0c 2101 	mla	r1, ip, r1, r2
 8007054:	4604      	mov	r4, r0
 8007056:	2301      	movs	r3, #1
 8007058:	e7f0      	b.n	800703c <_svfiprintf_r+0x194>
 800705a:	ab03      	add	r3, sp, #12
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	462a      	mov	r2, r5
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <_svfiprintf_r+0x1f8>)
 8007062:	a904      	add	r1, sp, #16
 8007064:	4638      	mov	r0, r7
 8007066:	f3af 8000 	nop.w
 800706a:	1c42      	adds	r2, r0, #1
 800706c:	4606      	mov	r6, r0
 800706e:	d1d6      	bne.n	800701e <_svfiprintf_r+0x176>
 8007070:	89ab      	ldrh	r3, [r5, #12]
 8007072:	065b      	lsls	r3, r3, #25
 8007074:	f53f af2c 	bmi.w	8006ed0 <_svfiprintf_r+0x28>
 8007078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800707a:	b01d      	add	sp, #116	; 0x74
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007080:	ab03      	add	r3, sp, #12
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	462a      	mov	r2, r5
 8007086:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <_svfiprintf_r+0x1f8>)
 8007088:	a904      	add	r1, sp, #16
 800708a:	4638      	mov	r0, r7
 800708c:	f000 f87a 	bl	8007184 <_printf_i>
 8007090:	e7eb      	b.n	800706a <_svfiprintf_r+0x1c2>
 8007092:	bf00      	nop
 8007094:	080077c1 	.word	0x080077c1
 8007098:	080077cb 	.word	0x080077cb
 800709c:	00000000 	.word	0x00000000
 80070a0:	08006df1 	.word	0x08006df1
 80070a4:	080077c7 	.word	0x080077c7

080070a8 <_printf_common>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	4616      	mov	r6, r2
 80070ae:	4699      	mov	r9, r3
 80070b0:	688a      	ldr	r2, [r1, #8]
 80070b2:	690b      	ldr	r3, [r1, #16]
 80070b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b8:	4293      	cmp	r3, r2
 80070ba:	bfb8      	it	lt
 80070bc:	4613      	movlt	r3, r2
 80070be:	6033      	str	r3, [r6, #0]
 80070c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c4:	4607      	mov	r7, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	b10a      	cbz	r2, 80070ce <_printf_common+0x26>
 80070ca:	3301      	adds	r3, #1
 80070cc:	6033      	str	r3, [r6, #0]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	0699      	lsls	r1, r3, #26
 80070d2:	bf42      	ittt	mi
 80070d4:	6833      	ldrmi	r3, [r6, #0]
 80070d6:	3302      	addmi	r3, #2
 80070d8:	6033      	strmi	r3, [r6, #0]
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	f015 0506 	ands.w	r5, r5, #6
 80070e0:	d106      	bne.n	80070f0 <_printf_common+0x48>
 80070e2:	f104 0a19 	add.w	sl, r4, #25
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	6832      	ldr	r2, [r6, #0]
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	42ab      	cmp	r3, r5
 80070ee:	dc26      	bgt.n	800713e <_printf_common+0x96>
 80070f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f4:	1e13      	subs	r3, r2, #0
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	bf18      	it	ne
 80070fa:	2301      	movne	r3, #1
 80070fc:	0692      	lsls	r2, r2, #26
 80070fe:	d42b      	bmi.n	8007158 <_printf_common+0xb0>
 8007100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007104:	4649      	mov	r1, r9
 8007106:	4638      	mov	r0, r7
 8007108:	47c0      	blx	r8
 800710a:	3001      	adds	r0, #1
 800710c:	d01e      	beq.n	800714c <_printf_common+0xa4>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	68e5      	ldr	r5, [r4, #12]
 8007112:	6832      	ldr	r2, [r6, #0]
 8007114:	f003 0306 	and.w	r3, r3, #6
 8007118:	2b04      	cmp	r3, #4
 800711a:	bf08      	it	eq
 800711c:	1aad      	subeq	r5, r5, r2
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	6922      	ldr	r2, [r4, #16]
 8007122:	bf0c      	ite	eq
 8007124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007128:	2500      	movne	r5, #0
 800712a:	4293      	cmp	r3, r2
 800712c:	bfc4      	itt	gt
 800712e:	1a9b      	subgt	r3, r3, r2
 8007130:	18ed      	addgt	r5, r5, r3
 8007132:	2600      	movs	r6, #0
 8007134:	341a      	adds	r4, #26
 8007136:	42b5      	cmp	r5, r6
 8007138:	d11a      	bne.n	8007170 <_printf_common+0xc8>
 800713a:	2000      	movs	r0, #0
 800713c:	e008      	b.n	8007150 <_printf_common+0xa8>
 800713e:	2301      	movs	r3, #1
 8007140:	4652      	mov	r2, sl
 8007142:	4649      	mov	r1, r9
 8007144:	4638      	mov	r0, r7
 8007146:	47c0      	blx	r8
 8007148:	3001      	adds	r0, #1
 800714a:	d103      	bne.n	8007154 <_printf_common+0xac>
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007154:	3501      	adds	r5, #1
 8007156:	e7c6      	b.n	80070e6 <_printf_common+0x3e>
 8007158:	18e1      	adds	r1, r4, r3
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	2030      	movs	r0, #48	; 0x30
 800715e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007162:	4422      	add	r2, r4
 8007164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800716c:	3302      	adds	r3, #2
 800716e:	e7c7      	b.n	8007100 <_printf_common+0x58>
 8007170:	2301      	movs	r3, #1
 8007172:	4622      	mov	r2, r4
 8007174:	4649      	mov	r1, r9
 8007176:	4638      	mov	r0, r7
 8007178:	47c0      	blx	r8
 800717a:	3001      	adds	r0, #1
 800717c:	d0e6      	beq.n	800714c <_printf_common+0xa4>
 800717e:	3601      	adds	r6, #1
 8007180:	e7d9      	b.n	8007136 <_printf_common+0x8e>
	...

08007184 <_printf_i>:
 8007184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	460c      	mov	r4, r1
 800718a:	4691      	mov	r9, r2
 800718c:	7e27      	ldrb	r7, [r4, #24]
 800718e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007190:	2f78      	cmp	r7, #120	; 0x78
 8007192:	4680      	mov	r8, r0
 8007194:	469a      	mov	sl, r3
 8007196:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800719a:	d807      	bhi.n	80071ac <_printf_i+0x28>
 800719c:	2f62      	cmp	r7, #98	; 0x62
 800719e:	d80a      	bhi.n	80071b6 <_printf_i+0x32>
 80071a0:	2f00      	cmp	r7, #0
 80071a2:	f000 80d8 	beq.w	8007356 <_printf_i+0x1d2>
 80071a6:	2f58      	cmp	r7, #88	; 0x58
 80071a8:	f000 80a3 	beq.w	80072f2 <_printf_i+0x16e>
 80071ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b4:	e03a      	b.n	800722c <_printf_i+0xa8>
 80071b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ba:	2b15      	cmp	r3, #21
 80071bc:	d8f6      	bhi.n	80071ac <_printf_i+0x28>
 80071be:	a001      	add	r0, pc, #4	; (adr r0, 80071c4 <_printf_i+0x40>)
 80071c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071c4:	0800721d 	.word	0x0800721d
 80071c8:	08007231 	.word	0x08007231
 80071cc:	080071ad 	.word	0x080071ad
 80071d0:	080071ad 	.word	0x080071ad
 80071d4:	080071ad 	.word	0x080071ad
 80071d8:	080071ad 	.word	0x080071ad
 80071dc:	08007231 	.word	0x08007231
 80071e0:	080071ad 	.word	0x080071ad
 80071e4:	080071ad 	.word	0x080071ad
 80071e8:	080071ad 	.word	0x080071ad
 80071ec:	080071ad 	.word	0x080071ad
 80071f0:	0800733d 	.word	0x0800733d
 80071f4:	08007261 	.word	0x08007261
 80071f8:	0800731f 	.word	0x0800731f
 80071fc:	080071ad 	.word	0x080071ad
 8007200:	080071ad 	.word	0x080071ad
 8007204:	0800735f 	.word	0x0800735f
 8007208:	080071ad 	.word	0x080071ad
 800720c:	08007261 	.word	0x08007261
 8007210:	080071ad 	.word	0x080071ad
 8007214:	080071ad 	.word	0x080071ad
 8007218:	08007327 	.word	0x08007327
 800721c:	680b      	ldr	r3, [r1, #0]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	600a      	str	r2, [r1, #0]
 8007224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800722c:	2301      	movs	r3, #1
 800722e:	e0a3      	b.n	8007378 <_printf_i+0x1f4>
 8007230:	6825      	ldr	r5, [r4, #0]
 8007232:	6808      	ldr	r0, [r1, #0]
 8007234:	062e      	lsls	r6, r5, #24
 8007236:	f100 0304 	add.w	r3, r0, #4
 800723a:	d50a      	bpl.n	8007252 <_printf_i+0xce>
 800723c:	6805      	ldr	r5, [r0, #0]
 800723e:	600b      	str	r3, [r1, #0]
 8007240:	2d00      	cmp	r5, #0
 8007242:	da03      	bge.n	800724c <_printf_i+0xc8>
 8007244:	232d      	movs	r3, #45	; 0x2d
 8007246:	426d      	negs	r5, r5
 8007248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800724c:	485e      	ldr	r0, [pc, #376]	; (80073c8 <_printf_i+0x244>)
 800724e:	230a      	movs	r3, #10
 8007250:	e019      	b.n	8007286 <_printf_i+0x102>
 8007252:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007256:	6805      	ldr	r5, [r0, #0]
 8007258:	600b      	str	r3, [r1, #0]
 800725a:	bf18      	it	ne
 800725c:	b22d      	sxthne	r5, r5
 800725e:	e7ef      	b.n	8007240 <_printf_i+0xbc>
 8007260:	680b      	ldr	r3, [r1, #0]
 8007262:	6825      	ldr	r5, [r4, #0]
 8007264:	1d18      	adds	r0, r3, #4
 8007266:	6008      	str	r0, [r1, #0]
 8007268:	0628      	lsls	r0, r5, #24
 800726a:	d501      	bpl.n	8007270 <_printf_i+0xec>
 800726c:	681d      	ldr	r5, [r3, #0]
 800726e:	e002      	b.n	8007276 <_printf_i+0xf2>
 8007270:	0669      	lsls	r1, r5, #25
 8007272:	d5fb      	bpl.n	800726c <_printf_i+0xe8>
 8007274:	881d      	ldrh	r5, [r3, #0]
 8007276:	4854      	ldr	r0, [pc, #336]	; (80073c8 <_printf_i+0x244>)
 8007278:	2f6f      	cmp	r7, #111	; 0x6f
 800727a:	bf0c      	ite	eq
 800727c:	2308      	moveq	r3, #8
 800727e:	230a      	movne	r3, #10
 8007280:	2100      	movs	r1, #0
 8007282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007286:	6866      	ldr	r6, [r4, #4]
 8007288:	60a6      	str	r6, [r4, #8]
 800728a:	2e00      	cmp	r6, #0
 800728c:	bfa2      	ittt	ge
 800728e:	6821      	ldrge	r1, [r4, #0]
 8007290:	f021 0104 	bicge.w	r1, r1, #4
 8007294:	6021      	strge	r1, [r4, #0]
 8007296:	b90d      	cbnz	r5, 800729c <_printf_i+0x118>
 8007298:	2e00      	cmp	r6, #0
 800729a:	d04d      	beq.n	8007338 <_printf_i+0x1b4>
 800729c:	4616      	mov	r6, r2
 800729e:	fbb5 f1f3 	udiv	r1, r5, r3
 80072a2:	fb03 5711 	mls	r7, r3, r1, r5
 80072a6:	5dc7      	ldrb	r7, [r0, r7]
 80072a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072ac:	462f      	mov	r7, r5
 80072ae:	42bb      	cmp	r3, r7
 80072b0:	460d      	mov	r5, r1
 80072b2:	d9f4      	bls.n	800729e <_printf_i+0x11a>
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d10b      	bne.n	80072d0 <_printf_i+0x14c>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	07df      	lsls	r7, r3, #31
 80072bc:	d508      	bpl.n	80072d0 <_printf_i+0x14c>
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	6861      	ldr	r1, [r4, #4]
 80072c2:	4299      	cmp	r1, r3
 80072c4:	bfde      	ittt	le
 80072c6:	2330      	movle	r3, #48	; 0x30
 80072c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072d0:	1b92      	subs	r2, r2, r6
 80072d2:	6122      	str	r2, [r4, #16]
 80072d4:	f8cd a000 	str.w	sl, [sp]
 80072d8:	464b      	mov	r3, r9
 80072da:	aa03      	add	r2, sp, #12
 80072dc:	4621      	mov	r1, r4
 80072de:	4640      	mov	r0, r8
 80072e0:	f7ff fee2 	bl	80070a8 <_printf_common>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d14c      	bne.n	8007382 <_printf_i+0x1fe>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	b004      	add	sp, #16
 80072ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f2:	4835      	ldr	r0, [pc, #212]	; (80073c8 <_printf_i+0x244>)
 80072f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	680e      	ldr	r6, [r1, #0]
 80072fc:	061f      	lsls	r7, r3, #24
 80072fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007302:	600e      	str	r6, [r1, #0]
 8007304:	d514      	bpl.n	8007330 <_printf_i+0x1ac>
 8007306:	07d9      	lsls	r1, r3, #31
 8007308:	bf44      	itt	mi
 800730a:	f043 0320 	orrmi.w	r3, r3, #32
 800730e:	6023      	strmi	r3, [r4, #0]
 8007310:	b91d      	cbnz	r5, 800731a <_printf_i+0x196>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f023 0320 	bic.w	r3, r3, #32
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	2310      	movs	r3, #16
 800731c:	e7b0      	b.n	8007280 <_printf_i+0xfc>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	f043 0320 	orr.w	r3, r3, #32
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	2378      	movs	r3, #120	; 0x78
 8007328:	4828      	ldr	r0, [pc, #160]	; (80073cc <_printf_i+0x248>)
 800732a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800732e:	e7e3      	b.n	80072f8 <_printf_i+0x174>
 8007330:	065e      	lsls	r6, r3, #25
 8007332:	bf48      	it	mi
 8007334:	b2ad      	uxthmi	r5, r5
 8007336:	e7e6      	b.n	8007306 <_printf_i+0x182>
 8007338:	4616      	mov	r6, r2
 800733a:	e7bb      	b.n	80072b4 <_printf_i+0x130>
 800733c:	680b      	ldr	r3, [r1, #0]
 800733e:	6826      	ldr	r6, [r4, #0]
 8007340:	6960      	ldr	r0, [r4, #20]
 8007342:	1d1d      	adds	r5, r3, #4
 8007344:	600d      	str	r5, [r1, #0]
 8007346:	0635      	lsls	r5, r6, #24
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	d501      	bpl.n	8007350 <_printf_i+0x1cc>
 800734c:	6018      	str	r0, [r3, #0]
 800734e:	e002      	b.n	8007356 <_printf_i+0x1d2>
 8007350:	0671      	lsls	r1, r6, #25
 8007352:	d5fb      	bpl.n	800734c <_printf_i+0x1c8>
 8007354:	8018      	strh	r0, [r3, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	4616      	mov	r6, r2
 800735c:	e7ba      	b.n	80072d4 <_printf_i+0x150>
 800735e:	680b      	ldr	r3, [r1, #0]
 8007360:	1d1a      	adds	r2, r3, #4
 8007362:	600a      	str	r2, [r1, #0]
 8007364:	681e      	ldr	r6, [r3, #0]
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	2100      	movs	r1, #0
 800736a:	4630      	mov	r0, r6
 800736c:	f7f8 ff48 	bl	8000200 <memchr>
 8007370:	b108      	cbz	r0, 8007376 <_printf_i+0x1f2>
 8007372:	1b80      	subs	r0, r0, r6
 8007374:	6060      	str	r0, [r4, #4]
 8007376:	6863      	ldr	r3, [r4, #4]
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	2300      	movs	r3, #0
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	e7a8      	b.n	80072d4 <_printf_i+0x150>
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	4632      	mov	r2, r6
 8007386:	4649      	mov	r1, r9
 8007388:	4640      	mov	r0, r8
 800738a:	47d0      	blx	sl
 800738c:	3001      	adds	r0, #1
 800738e:	d0ab      	beq.n	80072e8 <_printf_i+0x164>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	079b      	lsls	r3, r3, #30
 8007394:	d413      	bmi.n	80073be <_printf_i+0x23a>
 8007396:	68e0      	ldr	r0, [r4, #12]
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	4298      	cmp	r0, r3
 800739c:	bfb8      	it	lt
 800739e:	4618      	movlt	r0, r3
 80073a0:	e7a4      	b.n	80072ec <_printf_i+0x168>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4632      	mov	r2, r6
 80073a6:	4649      	mov	r1, r9
 80073a8:	4640      	mov	r0, r8
 80073aa:	47d0      	blx	sl
 80073ac:	3001      	adds	r0, #1
 80073ae:	d09b      	beq.n	80072e8 <_printf_i+0x164>
 80073b0:	3501      	adds	r5, #1
 80073b2:	68e3      	ldr	r3, [r4, #12]
 80073b4:	9903      	ldr	r1, [sp, #12]
 80073b6:	1a5b      	subs	r3, r3, r1
 80073b8:	42ab      	cmp	r3, r5
 80073ba:	dcf2      	bgt.n	80073a2 <_printf_i+0x21e>
 80073bc:	e7eb      	b.n	8007396 <_printf_i+0x212>
 80073be:	2500      	movs	r5, #0
 80073c0:	f104 0619 	add.w	r6, r4, #25
 80073c4:	e7f5      	b.n	80073b2 <_printf_i+0x22e>
 80073c6:	bf00      	nop
 80073c8:	080077d2 	.word	0x080077d2
 80073cc:	080077e3 	.word	0x080077e3

080073d0 <memcpy>:
 80073d0:	440a      	add	r2, r1
 80073d2:	4291      	cmp	r1, r2
 80073d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073d8:	d100      	bne.n	80073dc <memcpy+0xc>
 80073da:	4770      	bx	lr
 80073dc:	b510      	push	{r4, lr}
 80073de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e6:	4291      	cmp	r1, r2
 80073e8:	d1f9      	bne.n	80073de <memcpy+0xe>
 80073ea:	bd10      	pop	{r4, pc}

080073ec <memmove>:
 80073ec:	4288      	cmp	r0, r1
 80073ee:	b510      	push	{r4, lr}
 80073f0:	eb01 0402 	add.w	r4, r1, r2
 80073f4:	d902      	bls.n	80073fc <memmove+0x10>
 80073f6:	4284      	cmp	r4, r0
 80073f8:	4623      	mov	r3, r4
 80073fa:	d807      	bhi.n	800740c <memmove+0x20>
 80073fc:	1e43      	subs	r3, r0, #1
 80073fe:	42a1      	cmp	r1, r4
 8007400:	d008      	beq.n	8007414 <memmove+0x28>
 8007402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800740a:	e7f8      	b.n	80073fe <memmove+0x12>
 800740c:	4402      	add	r2, r0
 800740e:	4601      	mov	r1, r0
 8007410:	428a      	cmp	r2, r1
 8007412:	d100      	bne.n	8007416 <memmove+0x2a>
 8007414:	bd10      	pop	{r4, pc}
 8007416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800741a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800741e:	e7f7      	b.n	8007410 <memmove+0x24>

08007420 <_free_r>:
 8007420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007422:	2900      	cmp	r1, #0
 8007424:	d048      	beq.n	80074b8 <_free_r+0x98>
 8007426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800742a:	9001      	str	r0, [sp, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f1a1 0404 	sub.w	r4, r1, #4
 8007432:	bfb8      	it	lt
 8007434:	18e4      	addlt	r4, r4, r3
 8007436:	f000 f8d3 	bl	80075e0 <__malloc_lock>
 800743a:	4a20      	ldr	r2, [pc, #128]	; (80074bc <_free_r+0x9c>)
 800743c:	9801      	ldr	r0, [sp, #4]
 800743e:	6813      	ldr	r3, [r2, #0]
 8007440:	4615      	mov	r5, r2
 8007442:	b933      	cbnz	r3, 8007452 <_free_r+0x32>
 8007444:	6063      	str	r3, [r4, #4]
 8007446:	6014      	str	r4, [r2, #0]
 8007448:	b003      	add	sp, #12
 800744a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800744e:	f000 b8cd 	b.w	80075ec <__malloc_unlock>
 8007452:	42a3      	cmp	r3, r4
 8007454:	d90b      	bls.n	800746e <_free_r+0x4e>
 8007456:	6821      	ldr	r1, [r4, #0]
 8007458:	1862      	adds	r2, r4, r1
 800745a:	4293      	cmp	r3, r2
 800745c:	bf04      	itt	eq
 800745e:	681a      	ldreq	r2, [r3, #0]
 8007460:	685b      	ldreq	r3, [r3, #4]
 8007462:	6063      	str	r3, [r4, #4]
 8007464:	bf04      	itt	eq
 8007466:	1852      	addeq	r2, r2, r1
 8007468:	6022      	streq	r2, [r4, #0]
 800746a:	602c      	str	r4, [r5, #0]
 800746c:	e7ec      	b.n	8007448 <_free_r+0x28>
 800746e:	461a      	mov	r2, r3
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	b10b      	cbz	r3, 8007478 <_free_r+0x58>
 8007474:	42a3      	cmp	r3, r4
 8007476:	d9fa      	bls.n	800746e <_free_r+0x4e>
 8007478:	6811      	ldr	r1, [r2, #0]
 800747a:	1855      	adds	r5, r2, r1
 800747c:	42a5      	cmp	r5, r4
 800747e:	d10b      	bne.n	8007498 <_free_r+0x78>
 8007480:	6824      	ldr	r4, [r4, #0]
 8007482:	4421      	add	r1, r4
 8007484:	1854      	adds	r4, r2, r1
 8007486:	42a3      	cmp	r3, r4
 8007488:	6011      	str	r1, [r2, #0]
 800748a:	d1dd      	bne.n	8007448 <_free_r+0x28>
 800748c:	681c      	ldr	r4, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	6053      	str	r3, [r2, #4]
 8007492:	4421      	add	r1, r4
 8007494:	6011      	str	r1, [r2, #0]
 8007496:	e7d7      	b.n	8007448 <_free_r+0x28>
 8007498:	d902      	bls.n	80074a0 <_free_r+0x80>
 800749a:	230c      	movs	r3, #12
 800749c:	6003      	str	r3, [r0, #0]
 800749e:	e7d3      	b.n	8007448 <_free_r+0x28>
 80074a0:	6825      	ldr	r5, [r4, #0]
 80074a2:	1961      	adds	r1, r4, r5
 80074a4:	428b      	cmp	r3, r1
 80074a6:	bf04      	itt	eq
 80074a8:	6819      	ldreq	r1, [r3, #0]
 80074aa:	685b      	ldreq	r3, [r3, #4]
 80074ac:	6063      	str	r3, [r4, #4]
 80074ae:	bf04      	itt	eq
 80074b0:	1949      	addeq	r1, r1, r5
 80074b2:	6021      	streq	r1, [r4, #0]
 80074b4:	6054      	str	r4, [r2, #4]
 80074b6:	e7c7      	b.n	8007448 <_free_r+0x28>
 80074b8:	b003      	add	sp, #12
 80074ba:	bd30      	pop	{r4, r5, pc}
 80074bc:	20000180 	.word	0x20000180

080074c0 <_malloc_r>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	1ccd      	adds	r5, r1, #3
 80074c4:	f025 0503 	bic.w	r5, r5, #3
 80074c8:	3508      	adds	r5, #8
 80074ca:	2d0c      	cmp	r5, #12
 80074cc:	bf38      	it	cc
 80074ce:	250c      	movcc	r5, #12
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	4606      	mov	r6, r0
 80074d4:	db01      	blt.n	80074da <_malloc_r+0x1a>
 80074d6:	42a9      	cmp	r1, r5
 80074d8:	d903      	bls.n	80074e2 <_malloc_r+0x22>
 80074da:	230c      	movs	r3, #12
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	2000      	movs	r0, #0
 80074e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e2:	f000 f87d 	bl	80075e0 <__malloc_lock>
 80074e6:	4921      	ldr	r1, [pc, #132]	; (800756c <_malloc_r+0xac>)
 80074e8:	680a      	ldr	r2, [r1, #0]
 80074ea:	4614      	mov	r4, r2
 80074ec:	b99c      	cbnz	r4, 8007516 <_malloc_r+0x56>
 80074ee:	4f20      	ldr	r7, [pc, #128]	; (8007570 <_malloc_r+0xb0>)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	b923      	cbnz	r3, 80074fe <_malloc_r+0x3e>
 80074f4:	4621      	mov	r1, r4
 80074f6:	4630      	mov	r0, r6
 80074f8:	f000 f862 	bl	80075c0 <_sbrk_r>
 80074fc:	6038      	str	r0, [r7, #0]
 80074fe:	4629      	mov	r1, r5
 8007500:	4630      	mov	r0, r6
 8007502:	f000 f85d 	bl	80075c0 <_sbrk_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d123      	bne.n	8007552 <_malloc_r+0x92>
 800750a:	230c      	movs	r3, #12
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	4630      	mov	r0, r6
 8007510:	f000 f86c 	bl	80075ec <__malloc_unlock>
 8007514:	e7e3      	b.n	80074de <_malloc_r+0x1e>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	1b5b      	subs	r3, r3, r5
 800751a:	d417      	bmi.n	800754c <_malloc_r+0x8c>
 800751c:	2b0b      	cmp	r3, #11
 800751e:	d903      	bls.n	8007528 <_malloc_r+0x68>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	441c      	add	r4, r3
 8007524:	6025      	str	r5, [r4, #0]
 8007526:	e004      	b.n	8007532 <_malloc_r+0x72>
 8007528:	6863      	ldr	r3, [r4, #4]
 800752a:	42a2      	cmp	r2, r4
 800752c:	bf0c      	ite	eq
 800752e:	600b      	streq	r3, [r1, #0]
 8007530:	6053      	strne	r3, [r2, #4]
 8007532:	4630      	mov	r0, r6
 8007534:	f000 f85a 	bl	80075ec <__malloc_unlock>
 8007538:	f104 000b 	add.w	r0, r4, #11
 800753c:	1d23      	adds	r3, r4, #4
 800753e:	f020 0007 	bic.w	r0, r0, #7
 8007542:	1ac2      	subs	r2, r0, r3
 8007544:	d0cc      	beq.n	80074e0 <_malloc_r+0x20>
 8007546:	1a1b      	subs	r3, r3, r0
 8007548:	50a3      	str	r3, [r4, r2]
 800754a:	e7c9      	b.n	80074e0 <_malloc_r+0x20>
 800754c:	4622      	mov	r2, r4
 800754e:	6864      	ldr	r4, [r4, #4]
 8007550:	e7cc      	b.n	80074ec <_malloc_r+0x2c>
 8007552:	1cc4      	adds	r4, r0, #3
 8007554:	f024 0403 	bic.w	r4, r4, #3
 8007558:	42a0      	cmp	r0, r4
 800755a:	d0e3      	beq.n	8007524 <_malloc_r+0x64>
 800755c:	1a21      	subs	r1, r4, r0
 800755e:	4630      	mov	r0, r6
 8007560:	f000 f82e 	bl	80075c0 <_sbrk_r>
 8007564:	3001      	adds	r0, #1
 8007566:	d1dd      	bne.n	8007524 <_malloc_r+0x64>
 8007568:	e7cf      	b.n	800750a <_malloc_r+0x4a>
 800756a:	bf00      	nop
 800756c:	20000180 	.word	0x20000180
 8007570:	20000184 	.word	0x20000184

08007574 <_realloc_r>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	4607      	mov	r7, r0
 8007578:	4614      	mov	r4, r2
 800757a:	460e      	mov	r6, r1
 800757c:	b921      	cbnz	r1, 8007588 <_realloc_r+0x14>
 800757e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007582:	4611      	mov	r1, r2
 8007584:	f7ff bf9c 	b.w	80074c0 <_malloc_r>
 8007588:	b922      	cbnz	r2, 8007594 <_realloc_r+0x20>
 800758a:	f7ff ff49 	bl	8007420 <_free_r>
 800758e:	4625      	mov	r5, r4
 8007590:	4628      	mov	r0, r5
 8007592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007594:	f000 f830 	bl	80075f8 <_malloc_usable_size_r>
 8007598:	42a0      	cmp	r0, r4
 800759a:	d20f      	bcs.n	80075bc <_realloc_r+0x48>
 800759c:	4621      	mov	r1, r4
 800759e:	4638      	mov	r0, r7
 80075a0:	f7ff ff8e 	bl	80074c0 <_malloc_r>
 80075a4:	4605      	mov	r5, r0
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0f2      	beq.n	8007590 <_realloc_r+0x1c>
 80075aa:	4631      	mov	r1, r6
 80075ac:	4622      	mov	r2, r4
 80075ae:	f7ff ff0f 	bl	80073d0 <memcpy>
 80075b2:	4631      	mov	r1, r6
 80075b4:	4638      	mov	r0, r7
 80075b6:	f7ff ff33 	bl	8007420 <_free_r>
 80075ba:	e7e9      	b.n	8007590 <_realloc_r+0x1c>
 80075bc:	4635      	mov	r5, r6
 80075be:	e7e7      	b.n	8007590 <_realloc_r+0x1c>

080075c0 <_sbrk_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d06      	ldr	r5, [pc, #24]	; (80075dc <_sbrk_r+0x1c>)
 80075c4:	2300      	movs	r3, #0
 80075c6:	4604      	mov	r4, r0
 80075c8:	4608      	mov	r0, r1
 80075ca:	602b      	str	r3, [r5, #0]
 80075cc:	f7fa f91c 	bl	8001808 <_sbrk>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_sbrk_r+0x1a>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_sbrk_r+0x1a>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	2000044c 	.word	0x2000044c

080075e0 <__malloc_lock>:
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <__malloc_lock+0x8>)
 80075e2:	f000 b811 	b.w	8007608 <__retarget_lock_acquire_recursive>
 80075e6:	bf00      	nop
 80075e8:	20000454 	.word	0x20000454

080075ec <__malloc_unlock>:
 80075ec:	4801      	ldr	r0, [pc, #4]	; (80075f4 <__malloc_unlock+0x8>)
 80075ee:	f000 b80c 	b.w	800760a <__retarget_lock_release_recursive>
 80075f2:	bf00      	nop
 80075f4:	20000454 	.word	0x20000454

080075f8 <_malloc_usable_size_r>:
 80075f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fc:	1f18      	subs	r0, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfbc      	itt	lt
 8007602:	580b      	ldrlt	r3, [r1, r0]
 8007604:	18c0      	addlt	r0, r0, r3
 8007606:	4770      	bx	lr

08007608 <__retarget_lock_acquire_recursive>:
 8007608:	4770      	bx	lr

0800760a <__retarget_lock_release_recursive>:
 800760a:	4770      	bx	lr

0800760c <_init>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr

08007618 <_fini>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr
