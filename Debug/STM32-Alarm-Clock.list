
STM32-Alarm-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800701c  0800701c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800701c  0800701c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007024  08007024  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007024  08007024  00017024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800702c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200000dc  08007108  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08007108  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4ad  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af0  00000000  00000000  0002d5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204a2  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca4e  00000000  00000000  000508e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4788  00000000  00000000  0005d330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121ab8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d18  00000000  00000000  00121b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000dc 	.word	0x200000dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fa4 	.word	0x08006fa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	08006fa4 	.word	0x08006fa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 ff0c 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f940 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fa5c 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 fa1c 	bl	80009d4 <MX_DMA_Init>
  MX_I2C1_Init();
 800059c:	f000 f998 	bl	80008d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f9c4 	bl	800092c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f9ec 	bl	8000980 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxData, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4989      	ldr	r1, [pc, #548]	; (80007d0 <main+0x258>)
 80005ac:	4889      	ldr	r0, [pc, #548]	; (80007d4 <main+0x25c>)
 80005ae:	f005 f826 	bl	80055fe <HAL_UART_Receive_DMA>

  HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 80005b2:	4889      	ldr	r0, [pc, #548]	; (80007d8 <main+0x260>)
 80005b4:	f7ff fe0c 	bl	80001d0 <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2332      	movs	r3, #50	; 0x32
 80005be:	4986      	ldr	r1, [pc, #536]	; (80007d8 <main+0x260>)
 80005c0:	4884      	ldr	r0, [pc, #528]	; (80007d4 <main+0x25c>)
 80005c2:	f004 ff8a 	bl	80054da <HAL_UART_Transmit>

  //alarms
  alarm[0] = 0x01;
 80005c6:	4b85      	ldr	r3, [pc, #532]	; (80007dc <main+0x264>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
  alarm[1] = 0x02;
 80005cc:	4b83      	ldr	r3, [pc, #524]	; (80007dc <main+0x264>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	705a      	strb	r2, [r3, #1]

  //Time settings
  Time_reg[0] 			= 0x00;		//RTC register seconds
 80005d2:	4b83      	ldr	r3, [pc, #524]	; (80007e0 <main+0x268>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
  Time_reg[1] 			= 0x01;		//RTC register minutes
 80005d8:	4b81      	ldr	r3, [pc, #516]	; (80007e0 <main+0x268>)
 80005da:	2201      	movs	r2, #1
 80005dc:	705a      	strb	r2, [r3, #1]
  Time_reg[2] 			= 0x02;		//RTC register hours
 80005de:	4b80      	ldr	r3, [pc, #512]	; (80007e0 <main+0x268>)
 80005e0:	2202      	movs	r2, #2
 80005e2:	709a      	strb	r2, [r3, #2]
  Time_reg[3] 			= 0x03;		//RTC register days
 80005e4:	4b7e      	ldr	r3, [pc, #504]	; (80007e0 <main+0x268>)
 80005e6:	2203      	movs	r2, #3
 80005e8:	70da      	strb	r2, [r3, #3]

  Time_settings[0]    	= 0x00;		//seconds
 80005ea:	4b7e      	ldr	r3, [pc, #504]	; (80007e4 <main+0x26c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
  Time_settings[1] 		= 0x00;		//minutes
 80005f0:	4b7c      	ldr	r3, [pc, #496]	; (80007e4 <main+0x26c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	705a      	strb	r2, [r3, #1]
  Time_settings[2] 		= 0x65;		//hours (5 PM) (b01100101)
 80005f6:	4b7b      	ldr	r3, [pc, #492]	; (80007e4 <main+0x26c>)
 80005f8:	2265      	movs	r2, #101	; 0x65
 80005fa:	709a      	strb	r2, [r3, #2]
  Time_settings[3] 		= 0x01;		//day (Sunday)
 80005fc:	4b79      	ldr	r3, [pc, #484]	; (80007e4 <main+0x26c>)
 80005fe:	2201      	movs	r2, #1
 8000600:	70da      	strb	r2, [r3, #3]

  //Alarm settings
  alarm_reg[0] 			= 0x07;		//Alarm seconds reg
 8000602:	4b79      	ldr	r3, [pc, #484]	; (80007e8 <main+0x270>)
 8000604:	2207      	movs	r2, #7
 8000606:	701a      	strb	r2, [r3, #0]
  alarm_reg[1] 			= 0x08;		//Alarm minutes reg
 8000608:	4b77      	ldr	r3, [pc, #476]	; (80007e8 <main+0x270>)
 800060a:	2208      	movs	r2, #8
 800060c:	705a      	strb	r2, [r3, #1]
  alarm_reg[2] 			= 0x09;		//Alarm hours reg
 800060e:	4b76      	ldr	r3, [pc, #472]	; (80007e8 <main+0x270>)
 8000610:	2209      	movs	r2, #9
 8000612:	709a      	strb	r2, [r3, #2]
  alarm_reg[3] 			= 0x0A;		//Alarm days reg
 8000614:	4b74      	ldr	r3, [pc, #464]	; (80007e8 <main+0x270>)
 8000616:	220a      	movs	r2, #10
 8000618:	70da      	strb	r2, [r3, #3]

  alarm_settings[0]    	= 0x10;		//Alarm seconds
 800061a:	4b74      	ldr	r3, [pc, #464]	; (80007ec <main+0x274>)
 800061c:	2210      	movs	r2, #16
 800061e:	701a      	strb	r2, [r3, #0]
  alarm_settings[1] 	= 0x00;		//Alarm minutes
 8000620:	4b72      	ldr	r3, [pc, #456]	; (80007ec <main+0x274>)
 8000622:	2200      	movs	r2, #0
 8000624:	705a      	strb	r2, [r3, #1]
  alarm_settings[2]		= 0x65;		//Alarm hours (5 PM) (b0110 0101)
 8000626:	4b71      	ldr	r3, [pc, #452]	; (80007ec <main+0x274>)
 8000628:	2265      	movs	r2, #101	; 0x65
 800062a:	709a      	strb	r2, [r3, #2]
  alarm_settings[3]		= 0x41;		//Alarm day set (b0100 0001)
 800062c:	4b6f      	ldr	r3, [pc, #444]	; (80007ec <main+0x274>)
 800062e:	2241      	movs	r2, #65	; 0x41
 8000630:	70da      	strb	r2, [r3, #3]

  //Set time
  Write_RTC(Time_reg[0], Time_settings[0]);
 8000632:	4b6b      	ldr	r3, [pc, #428]	; (80007e0 <main+0x268>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	4b6a      	ldr	r3, [pc, #424]	; (80007e4 <main+0x26c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4610      	mov	r0, r2
 8000640:	f000 faa8 	bl	8000b94 <Write_RTC>
  Write_RTC(Time_reg[1], Time_settings[1]);
 8000644:	4b66      	ldr	r3, [pc, #408]	; (80007e0 <main+0x268>)
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	461a      	mov	r2, r3
 800064a:	4b66      	ldr	r3, [pc, #408]	; (80007e4 <main+0x26c>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f000 fa9f 	bl	8000b94 <Write_RTC>
  Write_RTC(Time_reg[2], Time_settings[2]);
 8000656:	4b62      	ldr	r3, [pc, #392]	; (80007e0 <main+0x268>)
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	461a      	mov	r2, r3
 800065c:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <main+0x26c>)
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	4619      	mov	r1, r3
 8000662:	4610      	mov	r0, r2
 8000664:	f000 fa96 	bl	8000b94 <Write_RTC>
  Write_RTC(Time_reg[3], Time_settings[3]);
 8000668:	4b5d      	ldr	r3, [pc, #372]	; (80007e0 <main+0x268>)
 800066a:	78db      	ldrb	r3, [r3, #3]
 800066c:	461a      	mov	r2, r3
 800066e:	4b5d      	ldr	r3, [pc, #372]	; (80007e4 <main+0x26c>)
 8000670:	78db      	ldrb	r3, [r3, #3]
 8000672:	4619      	mov	r1, r3
 8000674:	4610      	mov	r0, r2
 8000676:	f000 fa8d 	bl	8000b94 <Write_RTC>

  //Set Alarm

  Write_RTC(alarm_reg[0], alarm_settings[0]);
 800067a:	4b5b      	ldr	r3, [pc, #364]	; (80007e8 <main+0x270>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <main+0x274>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	4610      	mov	r0, r2
 8000688:	f000 fa84 	bl	8000b94 <Write_RTC>
  Write_RTC(alarm_reg[1], alarm_settings[1]);
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <main+0x270>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	461a      	mov	r2, r3
 8000692:	4b56      	ldr	r3, [pc, #344]	; (80007ec <main+0x274>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	4619      	mov	r1, r3
 8000698:	4610      	mov	r0, r2
 800069a:	f000 fa7b 	bl	8000b94 <Write_RTC>
  Write_RTC(alarm_reg[2], alarm_settings[2]);
 800069e:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <main+0x270>)
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b51      	ldr	r3, [pc, #324]	; (80007ec <main+0x274>)
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4610      	mov	r0, r2
 80006ac:	f000 fa72 	bl	8000b94 <Write_RTC>
  Write_RTC(alarm_reg[3], alarm_settings[3]);
 80006b0:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <main+0x270>)
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <main+0x274>)
 80006b8:	78db      	ldrb	r3, [r3, #3]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4610      	mov	r0, r2
 80006be:	f000 fa69 	bl	8000b94 <Write_RTC>

  Clear_Alarm_IT(alarm[0]);
 80006c2:	4b46      	ldr	r3, [pc, #280]	; (80007dc <main+0x264>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fad0 	bl	8000c6c <Clear_Alarm_IT>
  Enable_Alarm_IT(alarm[0]);
 80006cc:	4b43      	ldr	r3, [pc, #268]	; (80007dc <main+0x264>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 faa3 	bl	8000c1c <Enable_Alarm_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Read time
	Display_Time();
 80006d6:	f000 fb1b 	bl	8000d10 <Display_Time>

	HAL_Delay(30);
 80006da:	201e      	movs	r0, #30
 80006dc:	f000 fed6 	bl	800148c <HAL_Delay>

	Read_RTC(&control_reg, &control_byte);
 80006e0:	4943      	ldr	r1, [pc, #268]	; (80007f0 <main+0x278>)
 80006e2:	4844      	ldr	r0, [pc, #272]	; (80007f4 <main+0x27c>)
 80006e4:	f000 fa78 	bl	8000bd8 <Read_RTC>

	Read_RTC(&status_reg, &status_byte);
 80006e8:	4943      	ldr	r1, [pc, #268]	; (80007f8 <main+0x280>)
 80006ea:	4844      	ldr	r0, [pc, #272]	; (80007fc <main+0x284>)
 80006ec:	f000 fa74 	bl	8000bd8 <Read_RTC>

	if(b_button_pressed)
 80006f0:	4b43      	ldr	r3, [pc, #268]	; (8000800 <main+0x288>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d032      	beq.n	800075e <main+0x1e6>
	{
		HAL_UART_Transmit(&huart2,(uint8_t*) Ask_seconds,strlen(Ask_seconds), 50);
 80006f8:	4842      	ldr	r0, [pc, #264]	; (8000804 <main+0x28c>)
 80006fa:	f7ff fd69 	bl	80001d0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	2332      	movs	r3, #50	; 0x32
 8000704:	493f      	ldr	r1, [pc, #252]	; (8000804 <main+0x28c>)
 8000706:	4833      	ldr	r0, [pc, #204]	; (80007d4 <main+0x25c>)
 8000708:	f004 fee7 	bl	80054da <HAL_UART_Transmit>
		HAL_Delay(1000);
 800070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000710:	f000 febc 	bl	800148c <HAL_Delay>
		b_button_pressed = false;
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <main+0x288>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
		while(!b_seconds_entered);
 800071a:	bf00      	nop
 800071c:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <main+0x290>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f083 0301 	eor.w	r3, r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f8      	bne.n	800071c <main+0x1a4>
		HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);
 800072a:	4829      	ldr	r0, [pc, #164]	; (80007d0 <main+0x258>)
 800072c:	f7ff fd50 	bl	80001d0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	2332      	movs	r3, #50	; 0x32
 8000736:	4926      	ldr	r1, [pc, #152]	; (80007d0 <main+0x258>)
 8000738:	4826      	ldr	r0, [pc, #152]	; (80007d4 <main+0x25c>)
 800073a:	f004 fece 	bl	80054da <HAL_UART_Transmit>
		Write_RTC(Time_reg[0], rxData[0]);
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <main+0x268>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <main+0x258>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f000 fa22 	bl	8000b94 <Write_RTC>
		HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f000 fe9b 	bl	800148c <HAL_Delay>
		b_seconds_entered = false;
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <main+0x290>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e005      	b.n	800076a <main+0x1f2>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000764:	4829      	ldr	r0, [pc, #164]	; (800080c <main+0x294>)
 8000766:	f001 fd8b 	bl	8002280 <HAL_GPIO_WritePin>
	}

	if(b_seconds_entered)
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <main+0x290>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d018      	beq.n	80007a4 <main+0x22c>
	{
		HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);
 8000772:	4817      	ldr	r0, [pc, #92]	; (80007d0 <main+0x258>)
 8000774:	f7ff fd2c 	bl	80001d0 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	2332      	movs	r3, #50	; 0x32
 800077e:	4914      	ldr	r1, [pc, #80]	; (80007d0 <main+0x258>)
 8000780:	4814      	ldr	r0, [pc, #80]	; (80007d4 <main+0x25c>)
 8000782:	f004 feaa 	bl	80054da <HAL_UART_Transmit>
		Write_RTC(Time_reg[0], rxData[0]);
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <main+0x268>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <main+0x258>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	4610      	mov	r0, r2
 8000794:	f000 f9fe 	bl	8000b94 <Write_RTC>
		HAL_Delay(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f000 fe77 	bl	800148c <HAL_Delay>
		b_seconds_entered = false;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <main+0x290>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	}

	if(b_is_alarm_triggered)
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <main+0x298>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d094      	beq.n	80006d6 <main+0x15e>
	{
		Display_Time();
 80007ac:	f000 fab0 	bl	8000d10 <Display_Time>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b6:	4815      	ldr	r0, [pc, #84]	; (800080c <main+0x294>)
 80007b8:	f001 fd62 	bl	8002280 <HAL_GPIO_WritePin>
		Clear_Alarm_IT(alarm[0]);
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <main+0x264>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fa53 	bl	8000c6c <Clear_Alarm_IT>
		HAL_Delay(1000);
 80007c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ca:	f000 fe5f 	bl	800148c <HAL_Delay>
  {
 80007ce:	e782      	b.n	80006d6 <main+0x15e>
 80007d0:	20000108 	.word	0x20000108
 80007d4:	20000314 	.word	0x20000314
 80007d8:	20000034 	.word	0x20000034
 80007dc:	200001fc 	.word	0x200001fc
 80007e0:	2000019c 	.word	0x2000019c
 80007e4:	200001f8 	.word	0x200001f8
 80007e8:	20000310 	.word	0x20000310
 80007ec:	20000200 	.word	0x20000200
 80007f0:	20000067 	.word	0x20000067
 80007f4:	20000066 	.word	0x20000066
 80007f8:	200001f4 	.word	0x200001f4
 80007fc:	20000068 	.word	0x20000068
 8000800:	2000030d 	.word	0x2000030d
 8000804:	20000000 	.word	0x20000000
 8000808:	20000204 	.word	0x20000204
 800080c:	40020c00 	.word	0x40020c00
 8000810:	2000030c 	.word	0x2000030c

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 ff88 	bl	8006738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <SystemClock_Config+0xb4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <SystemClock_Config+0xb4>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <SystemClock_Config+0xb4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <SystemClock_Config+0xb8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <SystemClock_Config+0xb8>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <SystemClock_Config+0xb8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000878:	2310      	movs	r3, #16
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800087c:	2300      	movs	r3, #0
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f004 f993 	bl	8004bb0 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000890:	f000 faf0 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fbf6 	bl	80050a0 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008ba:	f000 fadb 	bl	8000e74 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2C1_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_I2C1_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2C1_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_I2C1_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_I2C1_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2C1_Init+0x50>)
 800090e:	f001 fce9 	bl	80022e4 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 faac 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001a0 	.word	0x200001a0
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART1_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000964:	f004 fd6c 	bl	8005440 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 fa81 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000268 	.word	0x20000268
 800097c:	40011000 	.word	0x40011000

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f004 fd42 	bl	8005440 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 fa57 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000314 	.word	0x20000314
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_DMA_Init+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <MX_DMA_Init+0x78>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_DMA_Init+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_DMA_Init+0x78>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_DMA_Init+0x78>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_DMA_Init+0x78>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	200b      	movs	r0, #11
 8000a18:	f000 fe37 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a1c:	200b      	movs	r0, #11
 8000a1e:	f000 fe50 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2010      	movs	r0, #16
 8000a28:	f000 fe2f 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a2c:	2010      	movs	r0, #16
 8000a2e:	f000 fe48 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	203a      	movs	r0, #58	; 0x3a
 8000a38:	f000 fe27 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a3c:	203a      	movs	r0, #58	; 0x3a
 8000a3e:	f000 fe40 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a45      	ldr	r2, [pc, #276]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b43      	ldr	r3, [pc, #268]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a37      	ldr	r2, [pc, #220]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_GPIO_Init+0x134>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2120      	movs	r1, #32
 8000ada:	482b      	ldr	r0, [pc, #172]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000adc:	f001 fbd0 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ae6:	4829      	ldr	r0, [pc, #164]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000ae8:	f001 fbca 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aec:	2302      	movs	r3, #2
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_GPIO_Init+0x140>)
 8000b02:	f001 fa09 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481b      	ldr	r0, [pc, #108]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000b1c:	f001 f9fc 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b20:	2320      	movs	r3, #32
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_GPIO_Init+0x138>)
 8000b38:	f001 f9ee 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_GPIO_Init+0x13c>)
 8000b56:	f001 f9df 	bl	8001f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2006      	movs	r0, #6
 8000b60:	f000 fd93 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b64:	2006      	movs	r0, #6
 8000b66:	f000 fdac 	bl	80016c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f000 fd8b 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b74:	2007      	movs	r0, #7
 8000b76:	f000 fda4 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40020800 	.word	0x40020800

08000b94 <Write_RTC>:

/* USER CODE BEGIN 4 */
void Write_RTC(uint8_t reg, uint8_t data)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
	  static uint8_t payload[2];
	  payload[0] = reg;
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <Write_RTC+0x3c>)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	7013      	strb	r3, [r2, #0]
	  payload[1] = data;
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <Write_RTC+0x3c>)
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	7053      	strb	r3, [r2, #1]
	  HAL_I2C_Master_Transmit(&hi2c1,RTC_address,payload,2,10);
 8000bb0:	23d0      	movs	r3, #208	; 0xd0
 8000bb2:	b299      	uxth	r1, r3
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2302      	movs	r3, #2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <Write_RTC+0x3c>)
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <Write_RTC+0x40>)
 8000bbe:	f001 fcd5 	bl	800256c <HAL_I2C_Master_Transmit>
	  HAL_Delay(30);
 8000bc2:	201e      	movs	r0, #30
 8000bc4:	f000 fc62 	bl	800148c <HAL_Delay>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000f8 	.word	0x200000f8
 8000bd4:	200001a0 	.word	0x200001a0

08000bd8 <Read_RTC>:

void Read_RTC(uint8_t* p_reg, uint8_t *p_data)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	//Ask slave to read data from register
	HAL_I2C_Master_Transmit(&hi2c1,RTC_address+1,p_reg,1,10);
 8000be2:	23d0      	movs	r3, #208	; 0xd0
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	3301      	adds	r3, #1
 8000be8:	b299      	uxth	r1, r3
 8000bea:	230a      	movs	r3, #10
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4809      	ldr	r0, [pc, #36]	; (8000c18 <Read_RTC+0x40>)
 8000bf4:	f001 fcba 	bl	800256c <HAL_I2C_Master_Transmit>
	//Store data
	HAL_I2C_Master_Receive(&hi2c1,RTC_address,p_data,1,10);
 8000bf8:	23d0      	movs	r3, #208	; 0xd0
 8000bfa:	b299      	uxth	r1, r3
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <Read_RTC+0x40>)
 8000c06:	f001 fdaf 	bl	8002768 <HAL_I2C_Master_Receive>
	HAL_Delay(30);
 8000c0a:	201e      	movs	r0, #30
 8000c0c:	f000 fc3e 	bl	800148c <HAL_Delay>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200001a0 	.word	0x200001a0

08000c1c <Enable_Alarm_IT>:

void Enable_Alarm_IT(uint8_t alarm)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	Read_RTC(&control_reg, &control_byte);
 8000c26:	490f      	ldr	r1, [pc, #60]	; (8000c64 <Enable_Alarm_IT+0x48>)
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <Enable_Alarm_IT+0x4c>)
 8000c2a:	f7ff ffd5 	bl	8000bd8 <Read_RTC>
	//Enable Alarm 1 interrupt
	if(alarm == 1)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d103      	bne.n	8000c3c <Enable_Alarm_IT+0x20>
	{
		control_byte =	 0x05;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <Enable_Alarm_IT+0x48>)
 8000c36:	2205      	movs	r2, #5
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e006      	b.n	8000c4a <Enable_Alarm_IT+0x2e>
	}
	//Enable Alarm 2 interrupt
	else
	{
		control_byte |=	 0x02;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <Enable_Alarm_IT+0x48>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <Enable_Alarm_IT+0x48>)
 8000c48:	701a      	strb	r2, [r3, #0]
	}

	Write_RTC(control_reg, control_byte);
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <Enable_Alarm_IT+0x4c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <Enable_Alarm_IT+0x48>)
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff9d 	bl	8000b94 <Write_RTC>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000067 	.word	0x20000067
 8000c68:	20000066 	.word	0x20000066

08000c6c <Clear_Alarm_IT>:

void Clear_Alarm_IT(uint8_t alarm)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	Read_RTC(&status_reg, &status_byte);
 8000c76:	4921      	ldr	r1, [pc, #132]	; (8000cfc <Clear_Alarm_IT+0x90>)
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <Clear_Alarm_IT+0x94>)
 8000c7a:	f7ff ffad 	bl	8000bd8 <Read_RTC>
	Read_RTC(&control_reg, &control_byte);
 8000c7e:	4921      	ldr	r1, [pc, #132]	; (8000d04 <Clear_Alarm_IT+0x98>)
 8000c80:	4821      	ldr	r0, [pc, #132]	; (8000d08 <Clear_Alarm_IT+0x9c>)
 8000c82:	f7ff ffa9 	bl	8000bd8 <Read_RTC>

	//Clear Alarm 1 interrupt
	if(alarm == 1)
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d10e      	bne.n	8000caa <Clear_Alarm_IT+0x3e>
	{
		status_byte &=	 0xFE;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <Clear_Alarm_IT+0x90>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f023 0301 	bic.w	r3, r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <Clear_Alarm_IT+0x90>)
 8000c98:	701a      	strb	r2, [r3, #0]
		control_byte &=	 0xFE;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <Clear_Alarm_IT+0x98>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <Clear_Alarm_IT+0x98>)
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e00d      	b.n	8000cc6 <Clear_Alarm_IT+0x5a>
	}
	//Clear Alarm 2 interrupt
	else
	{
		status_byte &=	 0xFD;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <Clear_Alarm_IT+0x90>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	f023 0302 	bic.w	r3, r3, #2
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <Clear_Alarm_IT+0x90>)
 8000cb6:	701a      	strb	r2, [r3, #0]
		control_byte &=	 0xFD;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <Clear_Alarm_IT+0x98>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	f023 0302 	bic.w	r3, r3, #2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <Clear_Alarm_IT+0x98>)
 8000cc4:	701a      	strb	r2, [r3, #0]
	}

	Write_RTC(control_reg, control_byte);
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <Clear_Alarm_IT+0x9c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <Clear_Alarm_IT+0x98>)
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5f 	bl	8000b94 <Write_RTC>
	Write_RTC(status_reg, status_byte);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <Clear_Alarm_IT+0x94>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <Clear_Alarm_IT+0x90>)
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff57 	bl	8000b94 <Write_RTC>
	b_is_alarm_triggered = false;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <Clear_Alarm_IT+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 8000cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf0:	f000 fbcc 	bl	800148c <HAL_Delay>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200001f4 	.word	0x200001f4
 8000d00:	20000068 	.word	0x20000068
 8000d04:	20000067 	.word	0x20000067
 8000d08:	20000066 	.word	0x20000066
 8000d0c:	2000030c 	.word	0x2000030c

08000d10 <Display_Time>:

void Display_Time(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af02      	add	r7, sp, #8
	Read_RTC(&Time_reg[0], &Time_settings[0]);
 8000d16:	4924      	ldr	r1, [pc, #144]	; (8000da8 <Display_Time+0x98>)
 8000d18:	4824      	ldr	r0, [pc, #144]	; (8000dac <Display_Time+0x9c>)
 8000d1a:	f7ff ff5d 	bl	8000bd8 <Read_RTC>
	Read_RTC(&Time_reg[1], &Time_settings[1]);
 8000d1e:	4924      	ldr	r1, [pc, #144]	; (8000db0 <Display_Time+0xa0>)
 8000d20:	4824      	ldr	r0, [pc, #144]	; (8000db4 <Display_Time+0xa4>)
 8000d22:	f7ff ff59 	bl	8000bd8 <Read_RTC>
	Read_RTC(&Time_reg[2], &Time_settings[2]);
 8000d26:	4924      	ldr	r1, [pc, #144]	; (8000db8 <Display_Time+0xa8>)
 8000d28:	4824      	ldr	r0, [pc, #144]	; (8000dbc <Display_Time+0xac>)
 8000d2a:	f7ff ff55 	bl	8000bd8 <Read_RTC>
	Read_RTC(&Time_reg[3], &Time_settings[3]);
 8000d2e:	4924      	ldr	r1, [pc, #144]	; (8000dc0 <Display_Time+0xb0>)
 8000d30:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <Display_Time+0xb4>)
 8000d32:	f7ff ff51 	bl	8000bd8 <Read_RTC>

	if(last_second != Time_settings[0] || last_minute != Time_settings[1] || last_hour != Time_settings[2])
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <Display_Time+0x98>)
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <Display_Time+0xb8>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d10b      	bne.n	8000d5a <Display_Time+0x4a>
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <Display_Time+0x98>)
 8000d44:	785a      	ldrb	r2, [r3, #1]
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <Display_Time+0xbc>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d105      	bne.n	8000d5a <Display_Time+0x4a>
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <Display_Time+0x98>)
 8000d50:	789a      	ldrb	r2, [r3, #2]
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <Display_Time+0xc0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d017      	beq.n	8000d8a <Display_Time+0x7a>
	{
		sprintf(txData, "%x:%x:%x\n",Time_settings[2], Time_settings[1], Time_settings[0]);
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <Display_Time+0x98>)
 8000d5c:	789b      	ldrb	r3, [r3, #2]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <Display_Time+0x98>)
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <Display_Time+0x98>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4919      	ldr	r1, [pc, #100]	; (8000dd4 <Display_Time+0xc4>)
 8000d70:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <Display_Time+0xc8>)
 8000d72:	f005 fce9 	bl	8006748 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 10);
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <Display_Time+0xc8>)
 8000d78:	f7ff fa2a 	bl	80001d0 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	230a      	movs	r3, #10
 8000d82:	4915      	ldr	r1, [pc, #84]	; (8000dd8 <Display_Time+0xc8>)
 8000d84:	4815      	ldr	r0, [pc, #84]	; (8000ddc <Display_Time+0xcc>)
 8000d86:	f004 fba8 	bl	80054da <HAL_UART_Transmit>
	}
	last_second = Time_settings[0];
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <Display_Time+0x98>)
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <Display_Time+0xb8>)
 8000d90:	701a      	strb	r2, [r3, #0]
	last_minute = Time_settings[1];
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <Display_Time+0x98>)
 8000d94:	785a      	ldrb	r2, [r3, #1]
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <Display_Time+0xbc>)
 8000d98:	701a      	strb	r2, [r3, #0]
	last_hour	= Time_settings[2];
 8000d9a:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <Display_Time+0x98>)
 8000d9c:	789a      	ldrb	r2, [r3, #2]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <Display_Time+0xc0>)
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001f8 	.word	0x200001f8
 8000dac:	2000019c 	.word	0x2000019c
 8000db0:	200001f9 	.word	0x200001f9
 8000db4:	2000019d 	.word	0x2000019d
 8000db8:	200001fa 	.word	0x200001fa
 8000dbc:	2000019e 	.word	0x2000019e
 8000dc0:	200001fb 	.word	0x200001fb
 8000dc4:	2000019f 	.word	0x2000019f
 8000dc8:	2000013a 	.word	0x2000013a
 8000dcc:	200001fe 	.word	0x200001fe
 8000dd0:	200001f5 	.word	0x200001f5
 8000dd4:	08006fbc 	.word	0x08006fbc
 8000dd8:	20000034 	.word	0x20000034
 8000ddc:	20000314 	.word	0x20000314

08000de0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000dea:	2102      	movs	r1, #2
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000dee:	f001 fa2f 	bl	8002250 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  b_is_alarm_triggered = true;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_GPIO_EXTI_Callback+0x40>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e02:	f001 fa25 	bl	8002250 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_GPIO_EXTI_Callback+0x32>
  {
	  b_button_pressed = true;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
  }
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	2000030c 	.word	0x2000030c
 8000e24:	40020000 	.word	0x40020000
 8000e28:	2000030d 	.word	0x2000030d

08000e2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3a:	480a      	ldr	r0, [pc, #40]	; (8000e64 <HAL_UART_RxCpltCallback+0x38>)
 8000e3c:	f001 fa20 	bl	8002280 <HAL_GPIO_WritePin>

  HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <HAL_UART_RxCpltCallback+0x3c>)
 8000e42:	f7ff f9c5 	bl	80001d0 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	2332      	movs	r3, #50	; 0x32
 8000e4c:	4906      	ldr	r1, [pc, #24]	; (8000e68 <HAL_UART_RxCpltCallback+0x3c>)
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <HAL_UART_RxCpltCallback+0x40>)
 8000e50:	f004 fb43 	bl	80054da <HAL_UART_Transmit>

  b_seconds_entered = true;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_UART_RxCpltCallback+0x44>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	20000108 	.word	0x20000108
 8000e6c:	20000314 	.word	0x20000314
 8000e70:	20000204 	.word	0x20000204

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a38      	ldr	r2, [pc, #224]	; (8000fd0 <HAL_I2C_MspInit+0x100>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d16a      	bne.n	8000fc8 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <HAL_I2C_MspInit+0x104>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <HAL_I2C_MspInit+0x104>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <HAL_I2C_MspInit+0x104>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f0e:	23c0      	movs	r3, #192	; 0xc0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f12:	2312      	movs	r3, #18
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <HAL_I2C_MspInit+0x108>)
 8000f2a:	f000 fff5 	bl	8001f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <HAL_I2C_MspInit+0x104>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_I2C_MspInit+0x104>)
 8000f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_I2C_MspInit+0x104>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f4c:	4a24      	ldr	r2, [pc, #144]	; (8000fe0 <HAL_I2C_MspInit+0x110>)
 8000f4e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f56:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f7e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f8c:	4813      	ldr	r0, [pc, #76]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000f8e:	f000 fbb3 	bl	80016f8 <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000f98:	f7ff ff6c 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_I2C_MspInit+0x10c>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	201f      	movs	r0, #31
 8000fae:	f000 fb6c 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fb2:	201f      	movs	r0, #31
 8000fb4:	f000 fb85 	bl	80016c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2020      	movs	r0, #32
 8000fbe:	f000 fb64 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fc2:	2020      	movs	r0, #32
 8000fc4:	f000 fb7d 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	200002ac 	.word	0x200002ac
 8000fe0:	40026010 	.word	0x40026010

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a69      	ldr	r2, [pc, #420]	; (80011a8 <HAL_UART_MspInit+0x1c4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d164      	bne.n	80010d0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	4b68      	ldr	r3, [pc, #416]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a67      	ldr	r2, [pc, #412]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b65      	ldr	r3, [pc, #404]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b61      	ldr	r3, [pc, #388]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a60      	ldr	r2, [pc, #384]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800103e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001050:	2307      	movs	r3, #7
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4855      	ldr	r0, [pc, #340]	; (80011b0 <HAL_UART_MspInit+0x1cc>)
 800105c:	f000 ff5c 	bl	8001f18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 8001062:	4a55      	ldr	r2, [pc, #340]	; (80011b8 <HAL_UART_MspInit+0x1d4>)
 8001064:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 8001068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 8001090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001094:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b47      	ldr	r3, [pc, #284]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010a2:	4844      	ldr	r0, [pc, #272]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 80010a4:	f000 fb28 	bl	80016f8 <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010ae:	f7ff fee1 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a3f      	ldr	r2, [pc, #252]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	4a3e      	ldr	r2, [pc, #248]	; (80011b4 <HAL_UART_MspInit+0x1d0>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2025      	movs	r0, #37	; 0x25
 80010c4:	f000 fae1 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010c8:	2025      	movs	r0, #37	; 0x25
 80010ca:	f000 fafa 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ce:	e067      	b.n	80011a0 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a39      	ldr	r2, [pc, #228]	; (80011bc <HAL_UART_MspInit+0x1d8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d162      	bne.n	80011a0 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b33      	ldr	r3, [pc, #204]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a32      	ldr	r2, [pc, #200]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_UART_MspInit+0x1c8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001112:	230c      	movs	r3, #12
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001122:	2307      	movs	r3, #7
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4820      	ldr	r0, [pc, #128]	; (80011b0 <HAL_UART_MspInit+0x1cc>)
 800112e:	f000 fef3 	bl	8001f18 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_UART_MspInit+0x1e0>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 800113a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800113e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 800114e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001152:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001166:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001174:	4812      	ldr	r0, [pc, #72]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001176:	f000 fabf 	bl	80016f8 <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001180:	f7ff fe78 	bl	8000e74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
 800118a:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_UART_MspInit+0x1dc>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2026      	movs	r0, #38	; 0x26
 8001196:	f000 fa78 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800119a:	2026      	movs	r0, #38	; 0x26
 800119c:	f000 fa91 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	3730      	adds	r7, #48	; 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	20000208 	.word	0x20000208
 80011b8:	40026440 	.word	0x40026440
 80011bc:	40004400 	.word	0x40004400
 80011c0:	2000013c 	.word	0x2000013c
 80011c4:	40026088 	.word	0x40026088

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 f91a 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001220:	2001      	movs	r0, #1
 8001222:	f001 f847 	bl	80022b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}

0800122a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800122e:	2002      	movs	r0, #2
 8001230:	f001 f840 	bl	80022b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <DMA1_Stream0_IRQHandler+0x10>)
 800123e:	f000 fbf3 	bl	8001a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002ac 	.word	0x200002ac

0800124c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <DMA1_Stream5_IRQHandler+0x10>)
 8001252:	f000 fbe9 	bl	8001a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000013c 	.word	0x2000013c

08001260 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <I2C1_EV_IRQHandler+0x10>)
 8001266:	f001 fca5 	bl	8002bb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001a0 	.word	0x200001a0

08001274 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <I2C1_ER_IRQHandler+0x10>)
 800127a:	f001 fe0c 	bl	8002e96 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001a0 	.word	0x200001a0

08001288 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <USART1_IRQHandler+0x10>)
 800128e:	f004 f9e7 	bl	8005660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000268 	.word	0x20000268

0800129c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <USART2_IRQHandler+0x10>)
 80012a2:	f004 f9dd 	bl	8005660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000314 	.word	0x20000314

080012b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA2_Stream2_IRQHandler+0x10>)
 80012b6:	f000 fbb7 	bl	8001a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000208 	.word	0x20000208

080012c4 <_sbrk>:
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
 80012f4:	f005 f9f6 	bl	80066e4 <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20020000 	.word	0x20020000
 8001324:	00000400 	.word	0x00000400
 8001328:	200000fc 	.word	0x200000fc
 800132c:	20000370 	.word	0x20000370

08001330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SystemInit+0x20>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <SystemInit+0x20>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135a:	490e      	ldr	r1, [pc, #56]	; (8001394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001370:	4c0b      	ldr	r4, [pc, #44]	; (80013a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800137e:	f7ff ffd7 	bl	8001330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f005 f9b5 	bl	80066f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff f8f7 	bl	8000578 <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800138c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001398:	0800702c 	.word	0x0800702c
  ldr r2, =_sbss
 800139c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80013a0:	2000036c 	.word	0x2000036c

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>
	...

080013a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_Init+0x40>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_Init+0x40>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x40>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f94f 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f808 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fd50 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f967 	bl	80016de <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f92f 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000006c 	.word	0x2000006c
 8001444:	20000074 	.word	0x20000074
 8001448:	20000070 	.word	0x20000070

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000074 	.word	0x20000074
 8001470:	20000358 	.word	0x20000358

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000358 	.word	0x20000358

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff ffee 	bl	8001474 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d005      	beq.n	80014b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_Delay+0x44>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b2:	bf00      	nop
 80014b4:	f7ff ffde 	bl	8001474 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8f7      	bhi.n	80014b4 <HAL_Delay+0x28>
  {
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000074 	.word	0x20000074

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff8e 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff29 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff3e 	bl	800151c <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff8e 	bl	80015c8 <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5d 	bl	8001574 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff31 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff feb6 	bl	8001474 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e099      	b.n	8001848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001734:	e00f      	b.n	8001756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001736:	f7ff fe9d 	bl	8001474 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b05      	cmp	r3, #5
 8001742:	d908      	bls.n	8001756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e078      	b.n	8001848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1e8      	bne.n	8001736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_DMA_Init+0x158>)
 8001770:	4013      	ands	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d107      	bne.n	80017c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4313      	orrs	r3, r2
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f023 0307 	bic.w	r3, r3, #7
 80017d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d117      	bne.n	800181a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00e      	beq.n	800181a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fb0f 	bl	8001e20 <DMA_CheckFifoParam>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2240      	movs	r2, #64	; 0x40
 800180c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001816:	2301      	movs	r3, #1
 8001818:	e016      	b.n	8001848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fac6 	bl	8001db4 <DMA_CalcBaseAndBitshift>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	223f      	movs	r2, #63	; 0x3f
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	f010803f 	.word	0xf010803f

08001854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_DMA_Start_IT+0x26>
 8001876:	2302      	movs	r3, #2
 8001878:	e040      	b.n	80018fc <HAL_DMA_Start_IT+0xa8>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d12f      	bne.n	80018ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2202      	movs	r2, #2
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fa58 	bl	8001d58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	223f      	movs	r2, #63	; 0x3f
 80018ae:	409a      	lsls	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0216 	orr.w	r2, r2, #22
 80018c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d007      	beq.n	80018dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0208 	orr.w	r2, r2, #8
 80018da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e005      	b.n	80018fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018f6:	2302      	movs	r3, #2
 80018f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001912:	f7ff fdaf 	bl	8001474 <HAL_GetTick>
 8001916:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d008      	beq.n	8001936 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e052      	b.n	80019dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0216 	bic.w	r2, r2, #22
 8001944:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001954:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <HAL_DMA_Abort+0x62>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0208 	bic.w	r2, r2, #8
 8001974:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0201 	bic.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001986:	e013      	b.n	80019b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001988:	f7ff fd74 	bl	8001474 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b05      	cmp	r3, #5
 8001994:	d90c      	bls.n	80019b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2220      	movs	r2, #32
 800199a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e015      	b.n	80019dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1e4      	bne.n	8001988 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	223f      	movs	r2, #63	; 0x3f
 80019c4:	409a      	lsls	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d004      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00c      	b.n	8001a1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2205      	movs	r2, #5
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a34:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <HAL_DMA_IRQHandler+0x258>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a92      	ldr	r2, [pc, #584]	; (8001c84 <HAL_DMA_IRQHandler+0x25c>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	2208      	movs	r2, #8
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d01a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0204 	bic.w	r2, r2, #4
 8001a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2208      	movs	r2, #8
 8001a82:	409a      	lsls	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d012      	beq.n	8001aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0202 	orr.w	r2, r3, #2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2204      	movs	r2, #4
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d012      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2204      	movs	r2, #4
 8001aee:	409a      	lsls	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f043 0204 	orr.w	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2210      	movs	r2, #16
 8001b06:	409a      	lsls	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d043      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d03c      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b22:	2210      	movs	r2, #16
 8001b24:	409a      	lsls	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d018      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d024      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
 8001b56:	e01f      	b.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e016      	b.n	8001b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0208 	bic.w	r2, r2, #8
 8001b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 808e 	beq.w	8001cc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8086 	beq.w	8001cc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d136      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0216 	bic.w	r2, r2, #22
 8001be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x1da>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0208 	bic.w	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	223f      	movs	r2, #63	; 0x3f
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d07d      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
        }
        return;
 8001c3e:	e078      	b.n	8001d32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01c      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d108      	bne.n	8001c6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d030      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
 8001c6c:	e02b      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d027      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
 8001c7e:	e022      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x29e>
 8001c80:	2000006c 	.word	0x2000006c
 8001c84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0210 	bic.w	r2, r2, #16
 8001ca4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d032      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2205      	movs	r2, #5
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d307      	bcc.n	8001d0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f2      	bne.n	8001cf2 <HAL_DMA_IRQHandler+0x2ca>
 8001d0c:	e000      	b.n	8001d10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d0e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
 8001d30:	e000      	b.n	8001d34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d32:	bf00      	nop
    }
  }
}
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop

08001d3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4a:	b2db      	uxtb	r3, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	d108      	bne.n	8001d98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d96:	e007      	b.n	8001da8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	3b10      	subs	r3, #16
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <DMA_CalcBaseAndBitshift+0x64>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <DMA_CalcBaseAndBitshift+0x68>)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d909      	bls.n	8001df6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	1d1a      	adds	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	659a      	str	r2, [r3, #88]	; 0x58
 8001df4:	e007      	b.n	8001e06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	aaaaaaab 	.word	0xaaaaaaab
 8001e1c:	08006fe0 	.word	0x08006fe0

08001e20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d11f      	bne.n	8001e7a <DMA_CheckFifoParam+0x5a>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d856      	bhi.n	8001eee <DMA_CheckFifoParam+0xce>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <DMA_CheckFifoParam+0x28>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e6b 	.word	0x08001e6b
 8001e50:	08001e59 	.word	0x08001e59
 8001e54:	08001eef 	.word	0x08001eef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d046      	beq.n	8001ef2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e68:	e043      	b.n	8001ef2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e72:	d140      	bne.n	8001ef6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e78:	e03d      	b.n	8001ef6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e82:	d121      	bne.n	8001ec8 <DMA_CheckFifoParam+0xa8>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d837      	bhi.n	8001efa <DMA_CheckFifoParam+0xda>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <DMA_CheckFifoParam+0x70>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ea1 	.word	0x08001ea1
 8001e94:	08001ea7 	.word	0x08001ea7
 8001e98:	08001ea1 	.word	0x08001ea1
 8001e9c:	08001eb9 	.word	0x08001eb9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea4:	e030      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d025      	beq.n	8001efe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb6:	e022      	b.n	8001efe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ec0:	d11f      	bne.n	8001f02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ec6:	e01c      	b.n	8001f02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d903      	bls.n	8001ed6 <DMA_CheckFifoParam+0xb6>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d003      	beq.n	8001edc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ed4:	e018      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eda:	e015      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      break;
 8001eec:	e00b      	b.n	8001f06 <DMA_CheckFifoParam+0xe6>
      break;
 8001eee:	bf00      	nop
 8001ef0:	e00a      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e008      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e006      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e004      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
 8001f00:	e002      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f02:	bf00      	nop
 8001f04:	e000      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
    }
  } 
  
  return status; 
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e16b      	b.n	800220c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 815a 	bne.w	8002206 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d005      	beq.n	8001f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d130      	bne.n	8001fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0201 	and.w	r2, r3, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d017      	beq.n	8002008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d123      	bne.n	800205c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80b4 	beq.w	8002206 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b60      	ldr	r3, [pc, #384]	; (8002224 <HAL_GPIO_Init+0x30c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a5f      	ldr	r2, [pc, #380]	; (8002224 <HAL_GPIO_Init+0x30c>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <HAL_GPIO_Init+0x30c>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ba:	4a5b      	ldr	r2, [pc, #364]	; (8002228 <HAL_GPIO_Init+0x310>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_GPIO_Init+0x314>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d02b      	beq.n	800213e <HAL_GPIO_Init+0x226>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_GPIO_Init+0x318>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d025      	beq.n	800213a <HAL_GPIO_Init+0x222>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_GPIO_Init+0x31c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01f      	beq.n	8002136 <HAL_GPIO_Init+0x21e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_GPIO_Init+0x320>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d019      	beq.n	8002132 <HAL_GPIO_Init+0x21a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4e      	ldr	r2, [pc, #312]	; (800223c <HAL_GPIO_Init+0x324>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x216>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4d      	ldr	r2, [pc, #308]	; (8002240 <HAL_GPIO_Init+0x328>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x212>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_GPIO_Init+0x32c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x20e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4b      	ldr	r2, [pc, #300]	; (8002248 <HAL_GPIO_Init+0x330>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x20a>
 800211e:	2307      	movs	r3, #7
 8002120:	e00e      	b.n	8002140 <HAL_GPIO_Init+0x228>
 8002122:	2308      	movs	r3, #8
 8002124:	e00c      	b.n	8002140 <HAL_GPIO_Init+0x228>
 8002126:	2306      	movs	r3, #6
 8002128:	e00a      	b.n	8002140 <HAL_GPIO_Init+0x228>
 800212a:	2305      	movs	r3, #5
 800212c:	e008      	b.n	8002140 <HAL_GPIO_Init+0x228>
 800212e:	2304      	movs	r3, #4
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x228>
 8002132:	2303      	movs	r3, #3
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x228>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x228>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x228>
 800213e:	2300      	movs	r3, #0
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f002 0203 	and.w	r2, r2, #3
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	4093      	lsls	r3, r2
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002150:	4935      	ldr	r1, [pc, #212]	; (8002228 <HAL_GPIO_Init+0x310>)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_GPIO_Init+0x334>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002182:	4a32      	ldr	r2, [pc, #200]	; (800224c <HAL_GPIO_Init+0x334>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_GPIO_Init+0x334>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_GPIO_Init+0x334>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b2:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_GPIO_Init+0x334>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_GPIO_Init+0x334>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_GPIO_Init+0x334>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_GPIO_Init+0x334>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3301      	adds	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	f67f ae90 	bls.w	8001f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40013800 	.word	0x40013800
 800222c:	40020000 	.word	0x40020000
 8002230:	40020400 	.word	0x40020400
 8002234:	40020800 	.word	0x40020800
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40021000 	.word	0x40021000
 8002240:	40021400 	.word	0x40021400
 8002244:	40021800 	.word	0x40021800
 8002248:	40021c00 	.word	0x40021c00
 800224c:	40013c00 	.word	0x40013c00

08002250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e001      	b.n	8002272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fd84 	bl	8000de0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e12b      	b.n	800254e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fde0 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002348:	f003 f852 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 800234c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_I2C_Init+0x274>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d807      	bhi.n	8002368 <HAL_I2C_Init+0x84>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a80      	ldr	r2, [pc, #512]	; (800255c <HAL_I2C_Init+0x278>)
 800235c:	4293      	cmp	r3, r2
 800235e:	bf94      	ite	ls
 8002360:	2301      	movls	r3, #1
 8002362:	2300      	movhi	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e006      	b.n	8002376 <HAL_I2C_Init+0x92>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a7d      	ldr	r2, [pc, #500]	; (8002560 <HAL_I2C_Init+0x27c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0e7      	b.n	800254e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a78      	ldr	r2, [pc, #480]	; (8002564 <HAL_I2C_Init+0x280>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0c9b      	lsrs	r3, r3, #18
 8002388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a6a      	ldr	r2, [pc, #424]	; (8002558 <HAL_I2C_Init+0x274>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d802      	bhi.n	80023b8 <HAL_I2C_Init+0xd4>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3301      	adds	r3, #1
 80023b6:	e009      	b.n	80023cc <HAL_I2C_Init+0xe8>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	4a69      	ldr	r2, [pc, #420]	; (8002568 <HAL_I2C_Init+0x284>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	3301      	adds	r3, #1
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	495c      	ldr	r1, [pc, #368]	; (8002558 <HAL_I2C_Init+0x274>)
 80023e8:	428b      	cmp	r3, r1
 80023ea:	d819      	bhi.n	8002420 <HAL_I2C_Init+0x13c>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e59      	subs	r1, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002400:	400b      	ands	r3, r1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_I2C_Init+0x138>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e59      	subs	r1, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fbb1 f3f3 	udiv	r3, r1, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241a:	e051      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 800241c:	2304      	movs	r3, #4
 800241e:	e04f      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d111      	bne.n	800244c <HAL_I2C_Init+0x168>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e012      	b.n	8002472 <HAL_I2C_Init+0x18e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	0099      	lsls	r1, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Init+0x196>
 8002476:	2301      	movs	r3, #1
 8002478:	e022      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10e      	bne.n	80024a0 <HAL_I2C_Init+0x1bc>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e58      	subs	r0, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	440b      	add	r3, r1
 8002490:	fbb0 f3f3 	udiv	r3, r0, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	e00f      	b.n	80024c0 <HAL_I2C_Init+0x1dc>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	0099      	lsls	r1, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6809      	ldr	r1, [r1, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6911      	ldr	r1, [r2, #16]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	430b      	orrs	r3, r1
 8002502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	000186a0 	.word	0x000186a0
 800255c:	001e847f 	.word	0x001e847f
 8002560:	003d08ff 	.word	0x003d08ff
 8002564:	431bde83 	.word	0x431bde83
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	817b      	strh	r3, [r7, #10]
 800257c:	4613      	mov	r3, r2
 800257e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7fe ff78 	bl	8001474 <HAL_GetTick>
 8002584:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	f040 80e0 	bne.w	8002754 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2319      	movs	r3, #25
 800259a:	2201      	movs	r2, #1
 800259c:	4970      	ldr	r1, [pc, #448]	; (8002760 <HAL_I2C_Master_Transmit+0x1f4>)
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f002 f8dc 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0d3      	b.n	8002756 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_I2C_Master_Transmit+0x50>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0cc      	b.n	8002756 <HAL_I2C_Master_Transmit+0x1ea>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d007      	beq.n	80025e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2221      	movs	r2, #33	; 0x21
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2210      	movs	r2, #16
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <HAL_I2C_Master_Transmit+0x1f8>)
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f001 fe9e 	bl	800436c <I2C_MasterRequestWrite>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e08d      	b.n	8002756 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002650:	e066      	b.n	8002720 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	6a39      	ldr	r1, [r7, #32]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f002 f956 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b04      	cmp	r3, #4
 8002668:	d107      	bne.n	800267a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002678:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06b      	b.n	8002756 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d11b      	bne.n	80026f4 <HAL_I2C_Master_Transmit+0x188>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d017      	beq.n	80026f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f002 f946 	bl	800498a <I2C_WaitOnBTFFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b04      	cmp	r3, #4
 800270a:	d107      	bne.n	800271c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e01a      	b.n	8002756 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d194      	bne.n	8002652 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	00100002 	.word	0x00100002
 8002764:	ffff0000 	.word	0xffff0000

08002768 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	461a      	mov	r2, r3
 8002774:	460b      	mov	r3, r1
 8002776:	817b      	strh	r3, [r7, #10]
 8002778:	4613      	mov	r3, r2
 800277a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7fe fe7a 	bl	8001474 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b20      	cmp	r3, #32
 800278c:	f040 820b 	bne.w	8002ba6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2319      	movs	r3, #25
 8002796:	2201      	movs	r2, #1
 8002798:	497c      	ldr	r1, [pc, #496]	; (800298c <HAL_I2C_Master_Receive+0x224>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f001 ffde 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
 80027a8:	e1fe      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_I2C_Master_Receive+0x50>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e1f7      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d007      	beq.n	80027de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2222      	movs	r2, #34	; 0x22
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2210      	movs	r2, #16
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a5c      	ldr	r2, [pc, #368]	; (8002990 <HAL_I2C_Master_Receive+0x228>)
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002820:	8979      	ldrh	r1, [r7, #10]
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f001 fe22 	bl	8004470 <I2C_MasterRequestRead>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1b8      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	d113      	bne.n	8002866 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e18c      	b.n	8002b80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	2b01      	cmp	r3, #1
 800286c:	d11b      	bne.n	80028a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e16c      	b.n	8002b80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d11b      	bne.n	80028e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	e14c      	b.n	8002b80 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800290c:	e138      	b.n	8002b80 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	2b03      	cmp	r3, #3
 8002914:	f200 80f1 	bhi.w	8002afa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	2b01      	cmp	r3, #1
 800291e:	d123      	bne.n	8002968 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f002 f8a3 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e139      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002966:	e10b      	b.n	8002b80 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b02      	cmp	r3, #2
 800296e:	d14e      	bne.n	8002a0e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	2200      	movs	r2, #0
 8002978:	4906      	ldr	r1, [pc, #24]	; (8002994 <HAL_I2C_Master_Receive+0x22c>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f001 feee 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e10e      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
 800298a:	bf00      	nop
 800298c:	00100002 	.word	0x00100002
 8002990:	ffff0000 	.word	0xffff0000
 8002994:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a0c:	e0b8      	b.n	8002b80 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	2200      	movs	r2, #0
 8002a16:	4966      	ldr	r1, [pc, #408]	; (8002bb0 <HAL_I2C_Master_Receive+0x448>)
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f001 fe9f 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0bf      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	2200      	movs	r2, #0
 8002a72:	494f      	ldr	r1, [pc, #316]	; (8002bb0 <HAL_I2C_Master_Receive+0x448>)
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f001 fe71 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e091      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002af8:	e042      	b.n	8002b80 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f001 ffb6 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e04c      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d118      	bne.n	8002b80 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f47f aec2 	bne.w	800290e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3728      	adds	r7, #40	; 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	00010004 	.word	0x00010004

08002bb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d003      	beq.n	8002bec <HAL_I2C_EV_IRQHandler+0x38>
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	f040 80c1 	bne.w	8002d6e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <HAL_I2C_EV_IRQHandler+0x6e>
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c0c:	d003      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0x62>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c14:	d101      	bne.n	8002c1a <HAL_I2C_EV_IRQHandler+0x66>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_I2C_EV_IRQHandler+0x68>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f000 8132 	beq.w	8002e86 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <HAL_I2C_EV_IRQHandler+0x92>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f001 ff9e 	bl	8004b7a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fd79 	bl	8003736 <I2C_Master_SB>
 8002c44:	e092      	b.n	8002d6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_I2C_EV_IRQHandler+0xb2>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	0a5b      	lsrs	r3, r3, #9
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fdef 	bl	8003842 <I2C_Master_ADD10>
 8002c64:	e082      	b.n	8002d6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0xd2>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	0a5b      	lsrs	r3, r3, #9
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fe09 	bl	8003896 <I2C_Master_ADDR>
 8002c84:	e072      	b.n	8002d6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03b      	beq.n	8002d0a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca0:	f000 80f3 	beq.w	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	09db      	lsrs	r3, r3, #7
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f9f3 	bl	80030b4 <I2C_MasterTransmit_TXE>
 8002cce:	e04d      	b.n	8002d6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80d6 	beq.w	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	0a5b      	lsrs	r3, r3, #9
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80cf 	beq.w	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cec:	7bbb      	ldrb	r3, [r7, #14]
 8002cee:	2b21      	cmp	r3, #33	; 0x21
 8002cf0:	d103      	bne.n	8002cfa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fa7a 	bl	80031ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cf8:	e0c7      	b.n	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	f040 80c4 	bne.w	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fae8 	bl	80032d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d08:	e0bf      	b.n	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d18:	f000 80b7 	beq.w	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00f      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x194>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x194>
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fb5d 	bl	8003400 <I2C_MasterReceive_RXNE>
 8002d46:	e011      	b.n	8002d6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 809a 	beq.w	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8093 	beq.w	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fbfc 	bl	8003562 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d6a:	e08e      	b.n	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d6c:	e08d      	b.n	8002e8a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	e007      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <HAL_I2C_EV_IRQHandler+0x20e>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	0a5b      	lsrs	r3, r3, #9
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00c      	beq.n	8002dc2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002db8:	69b9      	ldr	r1, [r7, #24]
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 ffba 	bl	8003d34 <I2C_Slave_ADDR>
 8002dc0:	e066      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x22e>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a5b      	lsrs	r3, r3, #9
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fff4 	bl	8003dc8 <I2C_Slave_STOPF>
 8002de0:	e056      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	2b21      	cmp	r3, #33	; 0x21
 8002de6:	d002      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x23a>
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	2b29      	cmp	r3, #41	; 0x29
 8002dec:	d125      	bne.n	8002e3a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	09db      	lsrs	r3, r3, #7
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00f      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x266>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	0a9b      	lsrs	r3, r3, #10
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x266>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fed0 	bl	8003bb8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e18:	e039      	b.n	8002e8e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d033      	beq.n	8002e8e <HAL_I2C_EV_IRQHandler+0x2da>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	0a5b      	lsrs	r3, r3, #9
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02d      	beq.n	8002e8e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fefd 	bl	8003c32 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e38:	e029      	b.n	8002e8e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00f      	beq.n	8002e66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a9b      	lsrs	r3, r3, #10
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 ff08 	bl	8003c74 <I2C_SlaveReceive_RXNE>
 8002e64:	e014      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00e      	beq.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	0a5b      	lsrs	r3, r3, #9
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 ff36 	bl	8003cf0 <I2C_SlaveReceive_BTF>
 8002e84:	e004      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e8e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08a      	sub	sp, #40	; 0x28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_I2C_ER_IRQHandler+0x4e>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ee2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	0a5b      	lsrs	r3, r3, #9
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00e      	beq.n	8002f0e <HAL_I2C_ER_IRQHandler+0x78>
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f0c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	0a9b      	lsrs	r3, r3, #10
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d03f      	beq.n	8002f9a <HAL_I2C_ER_IRQHandler+0x104>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d039      	beq.n	8002f9a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002f26:	7efb      	ldrb	r3, [r7, #27]
 8002f28:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f40:	7ebb      	ldrb	r3, [r7, #26]
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d112      	bne.n	8002f6c <HAL_I2C_ER_IRQHandler+0xd6>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <HAL_I2C_ER_IRQHandler+0xd6>
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b21      	cmp	r3, #33	; 0x21
 8002f50:	d008      	beq.n	8002f64 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b29      	cmp	r3, #41	; 0x29
 8002f56:	d005      	beq.n	8002f64 <HAL_I2C_ER_IRQHandler+0xce>
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b28      	cmp	r3, #40	; 0x28
 8002f5c:	d106      	bne.n	8002f6c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b21      	cmp	r3, #33	; 0x21
 8002f62:	d103      	bne.n	8002f6c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 f85f 	bl	8004028 <I2C_Slave_AF>
 8002f6a:	e016      	b.n	8002f9a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f74:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f7e:	7efb      	ldrb	r3, [r7, #27]
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d002      	beq.n	8002f8a <HAL_I2C_ER_IRQHandler+0xf4>
 8002f84:	7efb      	ldrb	r3, [r7, #27]
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d107      	bne.n	8002f9a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f98:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	0adb      	lsrs	r3, r3, #11
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002fc2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f001 f896 	bl	8004108 <I2C_ITError>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3728      	adds	r7, #40	; 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
 8003040:	4613      	mov	r3, r2
 8003042:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d150      	bne.n	800317c <I2C_MasterTransmit_TXE+0xc8>
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b21      	cmp	r3, #33	; 0x21
 80030de:	d14d      	bne.n	800317c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d01d      	beq.n	8003122 <I2C_MasterTransmit_TXE+0x6e>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d01a      	beq.n	8003122 <I2C_MasterTransmit_TXE+0x6e>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f2:	d016      	beq.n	8003122 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003102:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2211      	movs	r2, #17
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ff62 	bl	8002fe4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003120:	e060      	b.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003130:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d107      	bne.n	800316c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff7d 	bl	8003064 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800316a:	e03b      	b.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff35 	bl	8002fe4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800317a:	e033      	b.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b21      	cmp	r3, #33	; 0x21
 8003180:	d005      	beq.n	800318e <I2C_MasterTransmit_TXE+0xda>
 8003182:	7bbb      	ldrb	r3, [r7, #14]
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d12d      	bne.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b22      	cmp	r3, #34	; 0x22
 800318c:	d12a      	bne.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d108      	bne.n	80031aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80031a8:	e01c      	b.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d103      	bne.n	80031be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f88e 	bl	80032d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80031bc:	e012      	b.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031e2:	e7ff      	b.n	80031e4 <I2C_MasterTransmit_TXE+0x130>
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b21      	cmp	r3, #33	; 0x21
 8003204:	d164      	bne.n	80032d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003234:	e04c      	b.n	80032d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d01d      	beq.n	8003278 <I2C_MasterTransmit_BTF+0x8c>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b20      	cmp	r3, #32
 8003240:	d01a      	beq.n	8003278 <I2C_MasterTransmit_BTF+0x8c>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003248:	d016      	beq.n	8003278 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003258:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2211      	movs	r2, #17
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff feb7 	bl	8002fe4 <HAL_I2C_MasterTxCpltCallback>
}
 8003276:	e02b      	b.n	80032d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003286:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d107      	bne.n	80032c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fed2 	bl	8003064 <HAL_I2C_MemTxCpltCallback>
}
 80032c0:	e006      	b.n	80032d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fe8a 	bl	8002fe4 <HAL_I2C_MasterTxCpltCallback>
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11d      	bne.n	800332c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10b      	bne.n	8003310 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800330e:	e073      	b.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	b29b      	uxth	r3, r3
 8003316:	121b      	asrs	r3, r3, #8
 8003318:	b2da      	uxtb	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	651a      	str	r2, [r3, #80]	; 0x50
}
 800332a:	e065      	b.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10b      	bne.n	800334c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	b2da      	uxtb	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	651a      	str	r2, [r3, #80]	; 0x50
}
 800334a:	e055      	b.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003350:	2b02      	cmp	r3, #2
 8003352:	d151      	bne.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b22      	cmp	r3, #34	; 0x22
 8003358:	d10d      	bne.n	8003376 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003368:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003374:	e040      	b.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d015      	beq.n	80033ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b21      	cmp	r3, #33	; 0x21
 8003384:	d112      	bne.n	80033ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033aa:	e025      	b.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d120      	bne.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b21      	cmp	r3, #33	; 0x21
 80033ba:	d11d      	bne.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fe36 	bl	8003064 <HAL_I2C_MemTxCpltCallback>
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b22      	cmp	r3, #34	; 0x22
 8003412:	f040 80a2 	bne.w	800355a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d921      	bls.n	8003468 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b03      	cmp	r3, #3
 8003452:	f040 8082 	bne.w	800355a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003464:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003466:	e078      	b.n	800355a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2b02      	cmp	r3, #2
 800346e:	d074      	beq.n	800355a <I2C_MasterReceive_RXNE+0x15a>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d002      	beq.n	800347c <I2C_MasterReceive_RXNE+0x7c>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d16e      	bne.n	800355a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f001 fac5 	bl	8004a0c <I2C_WaitOnSTOPRequestThroughIT>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d142      	bne.n	800350e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003496:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d10a      	bne.n	80034f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff fdc1 	bl	8003078 <HAL_I2C_MemRxCpltCallback>
}
 80034f6:	e030      	b.n	800355a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2212      	movs	r2, #18
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fd76 	bl	8002ff8 <HAL_I2C_MasterRxCpltCallback>
}
 800350c:	e025      	b.n	800355a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800351c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fd99 	bl	800308c <HAL_I2C_ErrorCallback>
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b04      	cmp	r3, #4
 8003578:	d11b      	bne.n	80035b2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80035b0:	e0bd      	b.n	800372e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d129      	bne.n	8003610 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d00a      	beq.n	80035e8 <I2C_MasterReceive_BTF+0x86>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d007      	beq.n	80035e8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800360e:	e08e      	b.n	800372e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d176      	bne.n	8003708 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d002      	beq.n	8003626 <I2C_MasterReceive_BTF+0xc4>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d108      	bne.n	8003638 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e019      	b.n	800366c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b04      	cmp	r3, #4
 800363c:	d002      	beq.n	8003644 <I2C_MasterReceive_BTF+0xe2>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d108      	bne.n	8003656 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e00a      	b.n	800366c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b10      	cmp	r3, #16
 800365a:	d007      	beq.n	800366c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d10a      	bne.n	80036f2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fcc4 	bl	8003078 <HAL_I2C_MemRxCpltCallback>
}
 80036f0:	e01d      	b.n	800372e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2212      	movs	r2, #18
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fc79 	bl	8002ff8 <HAL_I2C_MasterRxCpltCallback>
}
 8003706:	e012      	b.n	800372e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d117      	bne.n	800377a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003762:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003764:	e067      	b.n	8003836 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	b2da      	uxtb	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
}
 8003778:	e05d      	b.n	8003836 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003782:	d133      	bne.n	80037ec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b21      	cmp	r3, #33	; 0x21
 800378e:	d109      	bne.n	80037a4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a0:	611a      	str	r2, [r3, #16]
 80037a2:	e008      	b.n	80037b6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <I2C_Master_SB+0x92>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d032      	beq.n	8003836 <I2C_Master_SB+0x100>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d02d      	beq.n	8003836 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e8:	605a      	str	r2, [r3, #4]
}
 80037ea:	e024      	b.n	8003836 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10e      	bne.n	8003812 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	11db      	asrs	r3, r3, #7
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 0306 	and.w	r3, r3, #6
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f063 030f 	orn	r3, r3, #15
 8003808:	b2da      	uxtb	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]
}
 8003810:	e011      	b.n	8003836 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10d      	bne.n	8003836 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	b29b      	uxth	r3, r3
 8003820:	11db      	asrs	r3, r3, #7
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f003 0306 	and.w	r3, r3, #6
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f063 030e 	orn	r3, r3, #14
 800382e:	b2da      	uxtb	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	b2da      	uxtb	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <I2C_Master_ADD10+0x26>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <I2C_Master_ADD10+0x48>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003888:	605a      	str	r2, [r3, #4]
  }
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003896:	b480      	push	{r7}
 8003898:	b091      	sub	sp, #68	; 0x44
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b22      	cmp	r3, #34	; 0x22
 80038be:	f040 8169 	bne.w	8003b94 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <I2C_Master_ADDR+0x54>
 80038ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d10b      	bne.n	80038ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	e160      	b.n	8003bac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11d      	bne.n	800392e <I2C_Master_ADDR+0x98>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038fa:	d118      	bne.n	800392e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003920:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	651a      	str	r2, [r3, #80]	; 0x50
 800392c:	e13e      	b.n	8003bac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d113      	bne.n	8003960 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e115      	b.n	8003b8c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 808a 	bne.w	8003a80 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003972:	d137      	bne.n	80039e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003982:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003992:	d113      	bne.n	80039bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	e0e7      	b.n	8003b8c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e0d3      	b.n	8003b8c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d02e      	beq.n	8003a48 <I2C_Master_ADDR+0x1b2>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d02b      	beq.n	8003a48 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f2:	2b12      	cmp	r3, #18
 80039f4:	d102      	bne.n	80039fc <I2C_Master_ADDR+0x166>
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d125      	bne.n	8003a48 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d00e      	beq.n	8003a20 <I2C_Master_ADDR+0x18a>
 8003a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d00b      	beq.n	8003a20 <I2C_Master_ADDR+0x18a>
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d008      	beq.n	8003a20 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e007      	b.n	8003a30 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a2e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	e0a1      	b.n	8003b8c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e085      	b.n	8003b8c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d14d      	bne.n	8003b26 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d016      	beq.n	8003abe <I2C_Master_ADDR+0x228>
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d013      	beq.n	8003abe <I2C_Master_ADDR+0x228>
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d010      	beq.n	8003abe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aaa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e007      	b.n	8003ace <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003acc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003adc:	d117      	bne.n	8003b0e <I2C_Master_ADDR+0x278>
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ae4:	d00b      	beq.n	8003afe <I2C_Master_ADDR+0x268>
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d008      	beq.n	8003afe <I2C_Master_ADDR+0x268>
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d005      	beq.n	8003afe <I2C_Master_ADDR+0x268>
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d002      	beq.n	8003afe <I2C_Master_ADDR+0x268>
 8003af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d107      	bne.n	8003b0e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	e032      	b.n	8003b8c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b44:	d117      	bne.n	8003b76 <I2C_Master_ADDR+0x2e0>
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b4c:	d00b      	beq.n	8003b66 <I2C_Master_ADDR+0x2d0>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d008      	beq.n	8003b66 <I2C_Master_ADDR+0x2d0>
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d005      	beq.n	8003b66 <I2C_Master_ADDR+0x2d0>
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d002      	beq.n	8003b66 <I2C_Master_ADDR+0x2d0>
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d107      	bne.n	8003b76 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b92:	e00b      	b.n	8003bac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
}
 8003baa:	e7ff      	b.n	8003bac <I2C_Master_ADDR+0x316>
 8003bac:	bf00      	nop
 8003bae:	3744      	adds	r7, #68	; 0x44
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02b      	beq.n	8003c2a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d114      	bne.n	8003c2a <I2C_SlaveTransmit_TXE+0x72>
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b29      	cmp	r3, #41	; 0x29
 8003c04:	d111      	bne.n	8003c2a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c14:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2228      	movs	r2, #40	; 0x28
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff f9f1 	bl	800300c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d011      	beq.n	8003c68 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d02c      	beq.n	8003ce8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d114      	bne.n	8003ce8 <I2C_SlaveReceive_RXNE+0x74>
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc2:	d111      	bne.n	8003ce8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2222      	movs	r2, #34	; 0x22
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2228      	movs	r2, #40	; 0x28
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff f99c 	bl	8003020 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d012      	beq.n	8003d28 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d4e:	2b28      	cmp	r3, #40	; 0x28
 8003d50:	d127      	bne.n	8003da2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d60:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	09db      	lsrs	r3, r3, #7
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	81bb      	strh	r3, [r7, #12]
 8003d84:	e002      	b.n	8003d8c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d94:	89ba      	ldrh	r2, [r7, #12]
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff f94a 	bl	8003034 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003da0:	e00e      	b.n	8003dc0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003de6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e24:	d172      	bne.n	8003f0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b22      	cmp	r3, #34	; 0x22
 8003e2a:	d002      	beq.n	8003e32 <I2C_Slave_STOPF+0x6a>
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	d135      	bne.n	8003e9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd ff66 	bl	8001d3c <HAL_DMA_GetState>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d049      	beq.n	8003f0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	4a69      	ldr	r2, [pc, #420]	; (8004020 <I2C_Slave_STOPF+0x258>)
 8003e7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fd fdae 	bl	80019e4 <HAL_DMA_Abort_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d03d      	beq.n	8003f0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e9c:	e035      	b.n	8003f0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd ff30 	bl	8001d3c <HAL_DMA_GetState>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d014      	beq.n	8003f0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	4a4e      	ldr	r2, [pc, #312]	; (8004020 <I2C_Slave_STOPF+0x258>)
 8003ee8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fd78 	bl	80019e4 <HAL_DMA_Abort_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
 8003f08:	e000      	b.n	8003f0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d03e      	beq.n	8003f94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d112      	bne.n	8003f4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d112      	bne.n	8003f7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f043 0204 	orr.w	r2, r3, #4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8b3 	bl	8004108 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003fa2:	e039      	b.n	8004018 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa8:	d109      	bne.n	8003fbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2228      	movs	r2, #40	; 0x28
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff f831 	bl	8003020 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b28      	cmp	r3, #40	; 0x28
 8003fc8:	d111      	bne.n	8003fee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	; (8004024 <I2C_Slave_STOPF+0x25c>)
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff f832 	bl	8003050 <HAL_I2C_ListenCpltCallback>
}
 8003fec:	e014      	b.n	8004018 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	2b22      	cmp	r3, #34	; 0x22
 8003ff4:	d002      	beq.n	8003ffc <I2C_Slave_STOPF+0x234>
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	2b22      	cmp	r3, #34	; 0x22
 8003ffa:	d10d      	bne.n	8004018 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff f804 	bl	8003020 <HAL_I2C_SlaveRxCpltCallback>
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	0800460d 	.word	0x0800460d
 8004024:	ffff0000 	.word	0xffff0000

08004028 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d002      	beq.n	800404a <I2C_Slave_AF+0x22>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b20      	cmp	r3, #32
 8004048:	d129      	bne.n	800409e <I2C_Slave_AF+0x76>
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b28      	cmp	r3, #40	; 0x28
 800404e:	d126      	bne.n	800409e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <I2C_Slave_AF+0xdc>)
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004064:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800406e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe ffda 	bl	8003050 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800409c:	e02e      	b.n	80040fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b21      	cmp	r3, #33	; 0x21
 80040a2:	d126      	bne.n	80040f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a17      	ldr	r2, [pc, #92]	; (8004104 <I2C_Slave_AF+0xdc>)
 80040a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2221      	movs	r2, #33	; 0x21
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fe ff8e 	bl	800300c <HAL_I2C_SlaveTxCpltCallback>
}
 80040f0:	e004      	b.n	80040fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040fa:	615a      	str	r2, [r3, #20]
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	ffff0000 	.word	0xffff0000

08004108 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004116:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004120:	7bbb      	ldrb	r3, [r7, #14]
 8004122:	2b10      	cmp	r3, #16
 8004124:	d002      	beq.n	800412c <I2C_ITError+0x24>
 8004126:	7bbb      	ldrb	r3, [r7, #14]
 8004128:	2b40      	cmp	r3, #64	; 0x40
 800412a:	d10a      	bne.n	8004142 <I2C_ITError+0x3a>
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b22      	cmp	r3, #34	; 0x22
 8004130:	d107      	bne.n	8004142 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004140:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004148:	2b28      	cmp	r3, #40	; 0x28
 800414a:	d107      	bne.n	800415c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2228      	movs	r2, #40	; 0x28
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800415a:	e015      	b.n	8004188 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416a:	d00a      	beq.n	8004182 <I2C_ITError+0x7a>
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b60      	cmp	r3, #96	; 0x60
 8004170:	d007      	beq.n	8004182 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004196:	d162      	bne.n	800425e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d020      	beq.n	80041f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	4a6a      	ldr	r2, [pc, #424]	; (8004364 <I2C_ITError+0x25c>)
 80041bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fc0e 	bl	80019e4 <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8089 	beq.w	80042e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f2:	4610      	mov	r0, r2
 80041f4:	4798      	blx	r3
 80041f6:	e074      	b.n	80042e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	4a59      	ldr	r2, [pc, #356]	; (8004364 <I2C_ITError+0x25c>)
 80041fe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd fbed 	bl	80019e4 <HAL_DMA_Abort_IT>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d068      	beq.n	80042e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d10b      	bne.n	8004236 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004258:	4610      	mov	r0, r2
 800425a:	4798      	blx	r3
 800425c:	e041      	b.n	80042e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b60      	cmp	r3, #96	; 0x60
 8004268:	d125      	bne.n	80042b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d10b      	bne.n	800429e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fe fef6 	bl	80030a0 <HAL_I2C_AbortCpltCallback>
 80042b4:	e015      	b.n	80042e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d10b      	bne.n	80042dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fe fed5 	bl	800308c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d113      	bne.n	800435c <I2C_ITError+0x254>
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b28      	cmp	r3, #40	; 0x28
 8004338:	d110      	bne.n	800435c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <I2C_ITError+0x260>)
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fe fe7a 	bl	8003050 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	0800460d 	.word	0x0800460d
 8004368:	ffff0000 	.word	0xffff0000

0800436c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	460b      	mov	r3, r1
 800437a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d006      	beq.n	8004396 <I2C_MasterRequestWrite+0x2a>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d003      	beq.n	8004396 <I2C_MasterRequestWrite+0x2a>
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004394:	d108      	bne.n	80043a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e00b      	b.n	80043c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	2b12      	cmp	r3, #18
 80043ae:	d107      	bne.n	80043c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f9c5 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e6:	d103      	bne.n	80043f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e035      	b.n	8004460 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fc:	d108      	bne.n	8004410 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800440c:	611a      	str	r2, [r3, #16]
 800440e:	e01b      	b.n	8004448 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004410:	897b      	ldrh	r3, [r7, #10]
 8004412:	11db      	asrs	r3, r3, #7
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 0306 	and.w	r3, r3, #6
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f063 030f 	orn	r3, r3, #15
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	490e      	ldr	r1, [pc, #56]	; (8004468 <I2C_MasterRequestWrite+0xfc>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f9eb 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e010      	b.n	8004460 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4907      	ldr	r1, [pc, #28]	; (800446c <I2C_MasterRequestWrite+0x100>)
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f9db 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	00010008 	.word	0x00010008
 800446c:	00010002 	.word	0x00010002

08004470 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	460b      	mov	r3, r1
 800447e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004494:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d006      	beq.n	80044aa <I2C_MasterRequestRead+0x3a>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d003      	beq.n	80044aa <I2C_MasterRequestRead+0x3a>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a8:	d108      	bne.n	80044bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e00b      	b.n	80044d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	2b11      	cmp	r3, #17
 80044c2:	d107      	bne.n	80044d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f93b 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fa:	d103      	bne.n	8004504 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e079      	b.n	80045fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004510:	d108      	bne.n	8004524 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004512:	897b      	ldrh	r3, [r7, #10]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]
 8004522:	e05f      	b.n	80045e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004524:	897b      	ldrh	r3, [r7, #10]
 8004526:	11db      	asrs	r3, r3, #7
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0306 	and.w	r3, r3, #6
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f063 030f 	orn	r3, r3, #15
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4930      	ldr	r1, [pc, #192]	; (8004604 <I2C_MasterRequestRead+0x194>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f961 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e054      	b.n	80045fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4929      	ldr	r1, [pc, #164]	; (8004608 <I2C_MasterRequestRead+0x198>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f951 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e044      	b.n	80045fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004596:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f8d9 	bl	800475c <I2C_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d103      	bne.n	80045c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e017      	b.n	80045fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045cc:	897b      	ldrh	r3, [r7, #10]
 80045ce:	11db      	asrs	r3, r3, #7
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f063 030e 	orn	r3, r3, #14
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4907      	ldr	r1, [pc, #28]	; (8004608 <I2C_MasterRequestRead+0x198>)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f90d 	bl	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	00010008 	.word	0x00010008
 8004608:	00010002 	.word	0x00010002

0800460c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004626:	4b4b      	ldr	r3, [pc, #300]	; (8004754 <I2C_DMAAbort+0x148>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	08db      	lsrs	r3, r3, #3
 800462c:	4a4a      	ldr	r2, [pc, #296]	; (8004758 <I2C_DMAAbort+0x14c>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a1a      	lsrs	r2, r3, #8
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00da      	lsls	r2, r3, #3
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004652:	e00a      	b.n	800466a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3b01      	subs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004668:	d0ea      	beq.n	8004640 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004676:	2200      	movs	r2, #0
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	2200      	movs	r2, #0
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	2200      	movs	r2, #0
 80046ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	2200      	movs	r2, #0
 80046be:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b60      	cmp	r3, #96	; 0x60
 80046da:	d10e      	bne.n	80046fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7fe fcd4 	bl	80030a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046f8:	e027      	b.n	800474a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046fa:	7cfb      	ldrb	r3, [r7, #19]
 80046fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004700:	2b28      	cmp	r3, #40	; 0x28
 8004702:	d117      	bne.n	8004734 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004722:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2228      	movs	r2, #40	; 0x28
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004732:	e007      	b.n	8004744 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004744:	6978      	ldr	r0, [r7, #20]
 8004746:	f7fe fca1 	bl	800308c <HAL_I2C_ErrorCallback>
}
 800474a:	bf00      	nop
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	2000006c 	.word	0x2000006c
 8004758:	14f8b589 	.word	0x14f8b589

0800475c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800476c:	e025      	b.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d021      	beq.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fc fe7d 	bl	8001474 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d116      	bne.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e023      	b.n	8004802 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10d      	bne.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	e00c      	b.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	43da      	mvns	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4013      	ands	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bf0c      	ite	eq
 80047f2:	2301      	moveq	r3, #1
 80047f4:	2300      	movne	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d0b6      	beq.n	800476e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004818:	e051      	b.n	80048be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004828:	d123      	bne.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004842:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e046      	b.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d021      	beq.n	80048be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fc fdfb 	bl	8001474 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e020      	b.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10c      	bne.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	43da      	mvns	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4013      	ands	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e00b      	b.n	80048fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	43da      	mvns	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4013      	ands	r3, r2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d18d      	bne.n	800481a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004914:	e02d      	b.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f900 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e02d      	b.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d021      	beq.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fc fda1 	bl	8001474 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d116      	bne.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0220 	orr.w	r2, r3, #32
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e007      	b.n	8004982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d1ca      	bne.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004996:	e02d      	b.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f8bf 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e02d      	b.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d021      	beq.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b0:	f7fc fd60 	bl	8001474 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e007      	b.n	8004a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d1ca      	bne.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a18:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	0a1a      	lsrs	r2, r3, #8
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e008      	b.n	8004a5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d0e9      	beq.n	8004a2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	2000006c 	.word	0x2000006c
 8004a6c:	14f8b589 	.word	0x14f8b589

08004a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a7c:	e042      	b.n	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d119      	bne.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0210 	mvn.w	r2, #16
 8004a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e029      	b.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fc fcd8 	bl	8001474 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d116      	bne.n	8004b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e007      	b.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d1b5      	bne.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d11b      	bne.n	8004b6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	f043 0204 	orr.w	r2, r3, #4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b8a:	d103      	bne.n	8004b94 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b92:	e007      	b.n	8004ba4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b9c:	d102      	bne.n	8004ba4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e264      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d075      	beq.n	8004cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bce:	4ba3      	ldr	r3, [pc, #652]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bda:	4ba0      	ldr	r3, [pc, #640]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d112      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	4b9d      	ldr	r3, [pc, #628]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf2:	d10b      	bne.n	8004c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf4:	4b99      	ldr	r3, [pc, #612]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d05b      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x108>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d157      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e23f      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c14:	d106      	bne.n	8004c24 <HAL_RCC_OscConfig+0x74>
 8004c16:	4b91      	ldr	r3, [pc, #580]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a90      	ldr	r2, [pc, #576]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e01d      	b.n	8004c60 <HAL_RCC_OscConfig+0xb0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c2c:	d10c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x98>
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a8a      	ldr	r2, [pc, #552]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a87      	ldr	r2, [pc, #540]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	e00b      	b.n	8004c60 <HAL_RCC_OscConfig+0xb0>
 8004c48:	4b84      	ldr	r3, [pc, #528]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a83      	ldr	r2, [pc, #524]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4b81      	ldr	r3, [pc, #516]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a80      	ldr	r2, [pc, #512]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fc fc04 	bl	8001474 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fc fc00 	bl	8001474 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e204      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	4b76      	ldr	r3, [pc, #472]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0xc0>
 8004c8e:	e014      	b.n	8004cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fc fbf0 	bl	8001474 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fc fbec 	bl	8001474 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e1f0      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004caa:	4b6c      	ldr	r3, [pc, #432]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0xe8>
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d063      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cc6:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd2:	4b62      	ldr	r3, [pc, #392]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d11c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d116      	bne.n	8004d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	4b5c      	ldr	r3, [pc, #368]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_RCC_OscConfig+0x152>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e1c4      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d02:	4b56      	ldr	r3, [pc, #344]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4952      	ldr	r1, [pc, #328]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d16:	e03a      	b.n	8004d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d20:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <HAL_RCC_OscConfig+0x2b0>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc fba5 	bl	8001474 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7fc fba1 	bl	8001474 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e1a5      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d40:	4b46      	ldr	r3, [pc, #280]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4c:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4940      	ldr	r1, [pc, #256]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
 8004d60:	e015      	b.n	8004d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d62:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCC_OscConfig+0x2b0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc fb84 	bl	8001474 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d70:	f7fc fb80 	bl	8001474 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e184      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d030      	beq.n	8004dfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da2:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <HAL_RCC_OscConfig+0x2b4>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fc fb64 	bl	8001474 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db0:	f7fc fb60 	bl	8001474 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e164      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0x200>
 8004dce:	e015      	b.n	8004dfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_RCC_OscConfig+0x2b4>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd6:	f7fc fb4d 	bl	8001474 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fc fb49 	bl	8001474 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e14d      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f0      	bne.n	8004dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80a0 	beq.w	8004f4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10f      	bne.n	8004e3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e28:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_RCC_OscConfig+0x2ac>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_OscConfig+0x2b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d121      	bne.n	8004e8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_RCC_OscConfig+0x2b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <HAL_RCC_OscConfig+0x2b8>)
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e52:	f7fc fb0f 	bl	8001474 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	e011      	b.n	8004e7e <HAL_RCC_OscConfig+0x2ce>
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	42470000 	.word	0x42470000
 8004e64:	42470e80 	.word	0x42470e80
 8004e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fc fb02 	bl	8001474 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e106      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b85      	ldr	r3, [pc, #532]	; (8005094 <HAL_RCC_OscConfig+0x4e4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x2f0>
 8004e92:	4b81      	ldr	r3, [pc, #516]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	4a80      	ldr	r2, [pc, #512]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9e:	e01c      	b.n	8004eda <HAL_RCC_OscConfig+0x32a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x312>
 8004ea8:	4b7b      	ldr	r3, [pc, #492]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a7a      	ldr	r2, [pc, #488]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004eae:	f043 0304 	orr.w	r3, r3, #4
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb4:	4b78      	ldr	r3, [pc, #480]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	4a77      	ldr	r2, [pc, #476]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec0:	e00b      	b.n	8004eda <HAL_RCC_OscConfig+0x32a>
 8004ec2:	4b75      	ldr	r3, [pc, #468]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	4a74      	ldr	r2, [pc, #464]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ece:	4b72      	ldr	r3, [pc, #456]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	4a71      	ldr	r2, [pc, #452]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d015      	beq.n	8004f0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee2:	f7fc fac7 	bl	8001474 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fc fac3 	bl	8001474 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0c5      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f00:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ee      	beq.n	8004eea <HAL_RCC_OscConfig+0x33a>
 8004f0c:	e014      	b.n	8004f38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0e:	f7fc fab1 	bl	8001474 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fc faad 	bl	8001474 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0af      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f2c:	4b5a      	ldr	r3, [pc, #360]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ee      	bne.n	8004f16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3e:	4b56      	ldr	r3, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	4a55      	ldr	r2, [pc, #340]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 809b 	beq.w	800508a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f54:	4b50      	ldr	r3, [pc, #320]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d05c      	beq.n	800501a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d141      	bne.n	8004fec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f68:	4b4c      	ldr	r3, [pc, #304]	; (800509c <HAL_RCC_OscConfig+0x4ec>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7fc fa81 	bl	8001474 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f76:	f7fc fa7d 	bl	8001474 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e081      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f88:	4b43      	ldr	r3, [pc, #268]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	019b      	lsls	r3, r3, #6
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	3b01      	subs	r3, #1
 8004fae:	041b      	lsls	r3, r3, #16
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	061b      	lsls	r3, r3, #24
 8004fb8:	4937      	ldr	r1, [pc, #220]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbe:	4b37      	ldr	r3, [pc, #220]	; (800509c <HAL_RCC_OscConfig+0x4ec>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fc fa56 	bl	8001474 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fc fa52 	bl	8001474 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e056      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b2e      	ldr	r3, [pc, #184]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x41c>
 8004fea:	e04e      	b.n	800508a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_RCC_OscConfig+0x4ec>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff2:	f7fc fa3f 	bl	8001474 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fc fa3b 	bl	8001474 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e03f      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500c:	4b22      	ldr	r3, [pc, #136]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f0      	bne.n	8004ffa <HAL_RCC_OscConfig+0x44a>
 8005018:	e037      	b.n	800508a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e032      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005026:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <HAL_RCC_OscConfig+0x4e8>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d028      	beq.n	8005086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d121      	bne.n	8005086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d11a      	bne.n	8005086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005056:	4013      	ands	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800505c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800505e:	4293      	cmp	r3, r2
 8005060:	d111      	bne.n	8005086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	3b01      	subs	r3, #1
 8005070:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d001      	beq.n	800508a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40007000 	.word	0x40007000
 8005098:	40023800 	.word	0x40023800
 800509c:	42470060 	.word	0x42470060

080050a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0cc      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b68      	ldr	r3, [pc, #416]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d90c      	bls.n	80050dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b63      	ldr	r3, [pc, #396]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0b8      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f4:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a58      	ldr	r2, [pc, #352]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800510c:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	494d      	ldr	r1, [pc, #308]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d044      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d119      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	2b03      	cmp	r3, #3
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e06f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516e:	4b3b      	ldr	r3, [pc, #236]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e067      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4934      	ldr	r1, [pc, #208]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005190:	f7fc f970 	bl	8001474 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	e00a      	b.n	80051ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005198:	f7fc f96c 	bl	8001474 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e04f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 020c 	and.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1eb      	bne.n	8005198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051c0:	4b25      	ldr	r3, [pc, #148]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d20c      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b22      	ldr	r3, [pc, #136]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e032      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4916      	ldr	r1, [pc, #88]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	490e      	ldr	r1, [pc, #56]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005226:	f000 f821 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	490a      	ldr	r1, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	5ccb      	ldrb	r3, [r1, r3]
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fc f8d0 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40023c00 	.word	0x40023c00
 800525c:	40023800 	.word	0x40023800
 8005260:	08006fc8 	.word	0x08006fc8
 8005264:	2000006c 	.word	0x2000006c
 8005268:	20000070 	.word	0x20000070

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b5b0      	push	{r4, r5, r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005272:	2100      	movs	r1, #0
 8005274:	6079      	str	r1, [r7, #4]
 8005276:	2100      	movs	r1, #0
 8005278:	60f9      	str	r1, [r7, #12]
 800527a:	2100      	movs	r1, #0
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800527e:	2100      	movs	r1, #0
 8005280:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005282:	4952      	ldr	r1, [pc, #328]	; (80053cc <HAL_RCC_GetSysClockFreq+0x160>)
 8005284:	6889      	ldr	r1, [r1, #8]
 8005286:	f001 010c 	and.w	r1, r1, #12
 800528a:	2908      	cmp	r1, #8
 800528c:	d00d      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x3e>
 800528e:	2908      	cmp	r1, #8
 8005290:	f200 8094 	bhi.w	80053bc <HAL_RCC_GetSysClockFreq+0x150>
 8005294:	2900      	cmp	r1, #0
 8005296:	d002      	beq.n	800529e <HAL_RCC_GetSysClockFreq+0x32>
 8005298:	2904      	cmp	r1, #4
 800529a:	d003      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x38>
 800529c:	e08e      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800529e:	4b4c      	ldr	r3, [pc, #304]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80052a0:	60bb      	str	r3, [r7, #8]
       break;
 80052a2:	e08e      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a4:	4b4b      	ldr	r3, [pc, #300]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052a6:	60bb      	str	r3, [r7, #8]
      break;
 80052a8:	e08b      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052aa:	4948      	ldr	r1, [pc, #288]	; (80053cc <HAL_RCC_GetSysClockFreq+0x160>)
 80052ac:	6849      	ldr	r1, [r1, #4]
 80052ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80052b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b4:	4945      	ldr	r1, [pc, #276]	; (80053cc <HAL_RCC_GetSysClockFreq+0x160>)
 80052b6:	6849      	ldr	r1, [r1, #4]
 80052b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80052bc:	2900      	cmp	r1, #0
 80052be:	d024      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c0:	4942      	ldr	r1, [pc, #264]	; (80053cc <HAL_RCC_GetSysClockFreq+0x160>)
 80052c2:	6849      	ldr	r1, [r1, #4]
 80052c4:	0989      	lsrs	r1, r1, #6
 80052c6:	4608      	mov	r0, r1
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052d0:	f04f 0500 	mov.w	r5, #0
 80052d4:	ea00 0204 	and.w	r2, r0, r4
 80052d8:	ea01 0305 	and.w	r3, r1, r5
 80052dc:	493d      	ldr	r1, [pc, #244]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052de:	fb01 f003 	mul.w	r0, r1, r3
 80052e2:	2100      	movs	r1, #0
 80052e4:	fb01 f102 	mul.w	r1, r1, r2
 80052e8:	1844      	adds	r4, r0, r1
 80052ea:	493a      	ldr	r1, [pc, #232]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052ec:	fba2 0101 	umull	r0, r1, r2, r1
 80052f0:	1863      	adds	r3, r4, r1
 80052f2:	4619      	mov	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	f7fa ffc0 	bl	8000280 <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4613      	mov	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e04a      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530a:	4b30      	ldr	r3, [pc, #192]	; (80053cc <HAL_RCC_GetSysClockFreq+0x160>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	099b      	lsrs	r3, r3, #6
 8005310:	461a      	mov	r2, r3
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f240 10ff 	movw	r0, #511	; 0x1ff
 800531a:	f04f 0100 	mov.w	r1, #0
 800531e:	ea02 0400 	and.w	r4, r2, r0
 8005322:	ea03 0501 	and.w	r5, r3, r1
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	014b      	lsls	r3, r1, #5
 8005334:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005338:	0142      	lsls	r2, r0, #5
 800533a:	4610      	mov	r0, r2
 800533c:	4619      	mov	r1, r3
 800533e:	1b00      	subs	r0, r0, r4
 8005340:	eb61 0105 	sbc.w	r1, r1, r5
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	018b      	lsls	r3, r1, #6
 800534e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005352:	0182      	lsls	r2, r0, #6
 8005354:	1a12      	subs	r2, r2, r0
 8005356:	eb63 0301 	sbc.w	r3, r3, r1
 800535a:	f04f 0000 	mov.w	r0, #0
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	00d9      	lsls	r1, r3, #3
 8005364:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005368:	00d0      	lsls	r0, r2, #3
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	1912      	adds	r2, r2, r4
 8005370:	eb45 0303 	adc.w	r3, r5, r3
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	0299      	lsls	r1, r3, #10
 800537e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005382:	0290      	lsls	r0, r2, #10
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	461a      	mov	r2, r3
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	f7fa ff74 	bl	8000280 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4613      	mov	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <HAL_RCC_GetSysClockFreq+0x160>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	3301      	adds	r3, #1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	60bb      	str	r3, [r7, #8]
      break;
 80053ba:	e002      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80053be:	60bb      	str	r3, [r7, #8]
      break;
 80053c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c2:	68bb      	ldr	r3, [r7, #8]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bdb0      	pop	{r4, r5, r7, pc}
 80053cc:	40023800 	.word	0x40023800
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	017d7840 	.word	0x017d7840

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_RCC_GetHCLKFreq+0x14>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	2000006c 	.word	0x2000006c

080053f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f4:	f7ff fff0 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	0a9b      	lsrs	r3, r3, #10
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	4903      	ldr	r1, [pc, #12]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40023800 	.word	0x40023800
 8005414:	08006fd8 	.word	0x08006fd8

08005418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800541c:	f7ff ffdc 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0b5b      	lsrs	r3, r3, #13
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	; (800543c <HAL_RCC_GetPCLK2Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	08006fd8 	.word	0x08006fd8

08005440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e03f      	b.n	80054d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fdbc 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 ff65 	bl	8006354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08a      	sub	sp, #40	; 0x28
 80054de:	af02      	add	r7, sp, #8
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d17c      	bne.n	80055f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_UART_Transmit+0x2c>
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e075      	b.n	80055f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_UART_Transmit+0x3e>
 8005514:	2302      	movs	r3, #2
 8005516:	e06e      	b.n	80055f6 <HAL_UART_Transmit+0x11c>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2221      	movs	r2, #33	; 0x21
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800552e:	f7fb ffa1 	bl	8001474 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	88fa      	ldrh	r2, [r7, #6]
 800553e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005548:	d108      	bne.n	800555c <HAL_UART_Transmit+0x82>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e003      	b.n	8005564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800556c:	e02a      	b.n	80055c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fc21 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e036      	b.n	80055f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800559c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	3302      	adds	r3, #2
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	e007      	b.n	80055b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	3301      	adds	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1cf      	bne.n	800556e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2140      	movs	r1, #64	; 0x40
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fbf1 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e006      	b.n	80055f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b20      	cmp	r3, #32
 8005616:	d11d      	bne.n	8005654 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Receive_DMA+0x26>
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e016      	b.n	8005656 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_UART_Receive_DMA+0x38>
 8005632:	2302      	movs	r3, #2
 8005634:	e00f      	b.n	8005656 <HAL_UART_Receive_DMA+0x58>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	461a      	mov	r2, r3
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fc26 	bl	8005e9c <UART_Start_Receive_DMA>
 8005650:	4603      	mov	r3, r0
 8005652:	e000      	b.n	8005656 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b0ba      	sub	sp, #232	; 0xe8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800569e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fd8d 	bl	80061de <UART_Receive_IT>
      return;
 80056c4:	e256      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80de 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
 80056d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80d1 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
 80056f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
 800571a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0202 	orr.w	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
 800573e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d011      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800576e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f043 0208 	orr.w	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 81ed 	beq.w	8005b6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fd18 	bl	80061de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_UART_IRQHandler+0x17a>
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04f      	beq.n	800587a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fc20 	bl	8006020 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	d141      	bne.n	8005872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800581a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800581e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1d9      	bne.n	80057ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	4a7d      	ldr	r2, [pc, #500]	; (8005a3c <HAL_UART_IRQHandler+0x3dc>)
 8005848:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	4618      	mov	r0, r3
 8005850:	f7fc f8c8 	bl	80019e4 <HAL_DMA_Abort_IT>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d016      	beq.n	8005888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00e      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f99a 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e00a      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f996 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e006      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f992 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005886:	e170      	b.n	8005b6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	bf00      	nop
    return;
 800588a:	e16e      	b.n	8005b6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	2b01      	cmp	r3, #1
 8005892:	f040 814a 	bne.w	8005b2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8143 	beq.w	8005b2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 813c 	beq.w	8005b2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	f040 80b4 	bne.w	8005a40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8140 	beq.w	8005b6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f080 8139 	bcs.w	8005b6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005902:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590e:	f000 8088 	beq.w	8005a22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800592c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800593e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800594a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1d9      	bne.n	8005912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800596e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005982:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005986:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800598a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e1      	bne.n	800595e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e3      	bne.n	800599a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a04:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e3      	bne.n	80059e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fb ff71 	bl	8001904 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8c0 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a38:	e099      	b.n	8005b6e <HAL_UART_IRQHandler+0x50e>
 8005a3a:	bf00      	nop
 8005a3c:	080060e7 	.word	0x080060e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 808b 	beq.w	8005b72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8086 	beq.w	8005b72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a8a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e3      	bne.n	8005a66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	623b      	str	r3, [r7, #32]
   return(result);
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3314      	adds	r3, #20
 8005abe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e3      	bne.n	8005a9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0310 	bic.w	r3, r3, #16
 8005afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b08:	61fa      	str	r2, [r7, #28]
 8005b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	69b9      	ldr	r1, [r7, #24]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	617b      	str	r3, [r7, #20]
   return(result);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e3      	bne.n	8005ae4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f848 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b28:	e023      	b.n	8005b72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_UART_IRQHandler+0x4ea>
 8005b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fae3 	bl	800610e <UART_Transmit_IT>
    return;
 8005b48:	e014      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00e      	beq.n	8005b74 <HAL_UART_IRQHandler+0x514>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb23 	bl	80061ae <UART_EndTransmit_IT>
    return;
 8005b68:	e004      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
    return;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
      return;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
      return;
 8005b72:	bf00      	nop
  }
}
 8005b74:	37e8      	adds	r7, #232	; 0xe8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop

08005b7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b09c      	sub	sp, #112	; 0x70
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d172      	bne.n	8005cd2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bee:	2200      	movs	r2, #0
 8005bf0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c12:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c46:	647a      	str	r2, [r7, #68]	; 0x44
 8005c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	623b      	str	r3, [r7, #32]
   return(result);
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c70:	663b      	str	r3, [r7, #96]	; 0x60
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d119      	bne.n	8005cd2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f023 0310 	bic.w	r3, r3, #16
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cbe:	61fa      	str	r2, [r7, #28]
 8005cc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	69b9      	ldr	r1, [r7, #24]
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	617b      	str	r3, [r7, #20]
   return(result);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d106      	bne.n	8005ce8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ce2:	f7ff ff69 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ce6:	e002      	b.n	8005cee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005ce8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cea:	f7fb f89f 	bl	8000e2c <HAL_UART_RxCpltCallback>
}
 8005cee:	bf00      	nop
 8005cf0:	3770      	adds	r7, #112	; 0x70
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d108      	bne.n	8005d1e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff ff4e 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d1c:	e002      	b.n	8005d24 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ff36 	bl	8005b90 <HAL_UART_RxHalfCpltCallback>
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	2b80      	cmp	r3, #128	; 0x80
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b21      	cmp	r3, #33	; 0x21
 8005d5e:	d108      	bne.n	8005d72 <UART_DMAError+0x46>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f000 f92f 	bl	8005fd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b22      	cmp	r3, #34	; 0x22
 8005d92:	d108      	bne.n	8005da6 <UART_DMAError+0x7a>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005da0:	68b8      	ldr	r0, [r7, #8]
 8005da2:	f000 f93d 	bl	8006020 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f043 0210 	orr.w	r2, r3, #16
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005db2:	68b8      	ldr	r0, [r7, #8]
 8005db4:	f7ff fef6 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b090      	sub	sp, #64	; 0x40
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd0:	e050      	b.n	8005e74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d04c      	beq.n	8005e74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005de0:	f7fb fb48 	bl	8001474 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d241      	bcs.n	8005e74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e10:	637a      	str	r2, [r7, #52]	; 0x34
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	613b      	str	r3, [r7, #16]
   return(result);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3314      	adds	r3, #20
 8005e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e44:	623a      	str	r2, [r7, #32]
 8005e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	69f9      	ldr	r1, [r7, #28]
 8005e4a:	6a3a      	ldr	r2, [r7, #32]
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e5      	bne.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e00f      	b.n	8005e94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d09f      	beq.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3740      	adds	r7, #64	; 0x40
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b098      	sub	sp, #96	; 0x60
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2222      	movs	r2, #34	; 0x22
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	4a3e      	ldr	r2, [pc, #248]	; (8005fc4 <UART_Start_Receive_DMA+0x128>)
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	4a3d      	ldr	r2, [pc, #244]	; (8005fc8 <UART_Start_Receive_DMA+0x12c>)
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	4a3c      	ldr	r2, [pc, #240]	; (8005fcc <UART_Start_Receive_DMA+0x130>)
 8005eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	f7fb fcaa 	bl	8001854 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3314      	adds	r3, #20
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	657b      	str	r3, [r7, #84]	; 0x54
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3314      	adds	r3, #20
 8005f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f72:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	617b      	str	r3, [r7, #20]
   return(result);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fa6:	627a      	str	r2, [r7, #36]	; 0x24
 8005fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6a39      	ldr	r1, [r7, #32]
 8005fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3760      	adds	r7, #96	; 0x60
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08005bd1 	.word	0x08005bd1
 8005fc8:	08005cf7 	.word	0x08005cf7
 8005fcc:	08005d2d 	.word	0x08005d2d

08005fd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	; 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	61ba      	str	r2, [r7, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6979      	ldr	r1, [r7, #20]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	613b      	str	r3, [r7, #16]
   return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006014:	bf00      	nop
 8006016:	3724      	adds	r7, #36	; 0x24
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b095      	sub	sp, #84	; 0x54
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800603e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006048:	643a      	str	r2, [r7, #64]	; 0x40
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800604e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3314      	adds	r3, #20
 8006062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	61fb      	str	r3, [r7, #28]
   return(result);
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	64bb      	str	r3, [r7, #72]	; 0x48
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3314      	adds	r3, #20
 800607a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800607c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	2b01      	cmp	r3, #1
 8006096:	d119      	bne.n	80060cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f023 0310 	bic.w	r3, r3, #16
 80060ae:	647b      	str	r3, [r7, #68]	; 0x44
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b8:	61ba      	str	r2, [r7, #24]
 80060ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6979      	ldr	r1, [r7, #20]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	613b      	str	r3, [r7, #16]
   return(result);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060da:	bf00      	nop
 80060dc:	3754      	adds	r7, #84	; 0x54
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff fd4f 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b21      	cmp	r3, #33	; 0x21
 8006120:	d13e      	bne.n	80061a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612a:	d114      	bne.n	8006156 <UART_Transmit_IT+0x48>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d110      	bne.n	8006156 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006148:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	1c9a      	adds	r2, r3, #2
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	621a      	str	r2, [r3, #32]
 8006154:	e008      	b.n	8006168 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6211      	str	r1, [r2, #32]
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29b      	uxth	r3, r3
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4619      	mov	r1, r3
 8006176:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10f      	bne.n	800619c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800618a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	e000      	b.n	80061a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061a0:	2302      	movs	r3, #2
  }
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff fcd4 	bl	8005b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b08c      	sub	sp, #48	; 0x30
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b22      	cmp	r3, #34	; 0x22
 80061f0:	f040 80ab 	bne.w	800634a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fc:	d117      	bne.n	800622e <UART_Receive_IT+0x50>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d113      	bne.n	800622e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621c:	b29a      	uxth	r2, r3
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	1c9a      	adds	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28
 800622c:	e026      	b.n	800627c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006234:	2300      	movs	r3, #0
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d007      	beq.n	8006252 <UART_Receive_IT+0x74>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <UART_Receive_IT+0x82>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e008      	b.n	8006272 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29b      	uxth	r3, r3
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4619      	mov	r1, r3
 800628a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800628c:	2b00      	cmp	r3, #0
 800628e:	d15a      	bne.n	8006346 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0220 	bic.w	r2, r2, #32
 800629e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0201 	bic.w	r2, r2, #1
 80062be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d135      	bne.n	800633c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	613b      	str	r3, [r7, #16]
   return(result);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f023 0310 	bic.w	r3, r3, #16
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	623a      	str	r2, [r7, #32]
 80062f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	6a3a      	ldr	r2, [r7, #32]
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	61bb      	str	r3, [r7, #24]
   return(result);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b10      	cmp	r3, #16
 8006316:	d10a      	bne.n	800632e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fc3f 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
 800633a:	e002      	b.n	8006342 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fa fd75 	bl	8000e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	e002      	b.n	800634c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3730      	adds	r7, #48	; 0x30
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	b09f      	sub	sp, #124	; 0x7c
 800635a:	af00      	add	r7, sp, #0
 800635c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800635e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636a:	68d9      	ldr	r1, [r3, #12]
 800636c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	ea40 0301 	orr.w	r3, r0, r1
 8006374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	431a      	orrs	r2, r3
 8006380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	431a      	orrs	r2, r3
 8006386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	4313      	orrs	r3, r2
 800638c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800638e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006398:	f021 010c 	bic.w	r1, r1, #12
 800639c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063a2:	430b      	orrs	r3, r1
 80063a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b2:	6999      	ldr	r1, [r3, #24]
 80063b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	ea40 0301 	orr.w	r3, r0, r1
 80063bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4bc5      	ldr	r3, [pc, #788]	; (80066d8 <UART_SetConfig+0x384>)
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d004      	beq.n	80063d2 <UART_SetConfig+0x7e>
 80063c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4bc3      	ldr	r3, [pc, #780]	; (80066dc <UART_SetConfig+0x388>)
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d103      	bne.n	80063da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063d2:	f7ff f821 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 80063d6:	6778      	str	r0, [r7, #116]	; 0x74
 80063d8:	e002      	b.n	80063e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063da:	f7ff f809 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 80063de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e8:	f040 80b6 	bne.w	8006558 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ee:	461c      	mov	r4, r3
 80063f0:	f04f 0500 	mov.w	r5, #0
 80063f4:	4622      	mov	r2, r4
 80063f6:	462b      	mov	r3, r5
 80063f8:	1891      	adds	r1, r2, r2
 80063fa:	6439      	str	r1, [r7, #64]	; 0x40
 80063fc:	415b      	adcs	r3, r3
 80063fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006400:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006404:	1912      	adds	r2, r2, r4
 8006406:	eb45 0303 	adc.w	r3, r5, r3
 800640a:	f04f 0000 	mov.w	r0, #0
 800640e:	f04f 0100 	mov.w	r1, #0
 8006412:	00d9      	lsls	r1, r3, #3
 8006414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006418:	00d0      	lsls	r0, r2, #3
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	1911      	adds	r1, r2, r4
 8006420:	6639      	str	r1, [r7, #96]	; 0x60
 8006422:	416b      	adcs	r3, r5
 8006424:	667b      	str	r3, [r7, #100]	; 0x64
 8006426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	461a      	mov	r2, r3
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	1891      	adds	r1, r2, r2
 8006432:	63b9      	str	r1, [r7, #56]	; 0x38
 8006434:	415b      	adcs	r3, r3
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800643c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006440:	f7f9 ff1e 	bl	8000280 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4ba5      	ldr	r3, [pc, #660]	; (80066e0 <UART_SetConfig+0x38c>)
 800644a:	fba3 2302 	umull	r2, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	011e      	lsls	r6, r3, #4
 8006452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006454:	461c      	mov	r4, r3
 8006456:	f04f 0500 	mov.w	r5, #0
 800645a:	4622      	mov	r2, r4
 800645c:	462b      	mov	r3, r5
 800645e:	1891      	adds	r1, r2, r2
 8006460:	6339      	str	r1, [r7, #48]	; 0x30
 8006462:	415b      	adcs	r3, r3
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
 8006466:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800646a:	1912      	adds	r2, r2, r4
 800646c:	eb45 0303 	adc.w	r3, r5, r3
 8006470:	f04f 0000 	mov.w	r0, #0
 8006474:	f04f 0100 	mov.w	r1, #0
 8006478:	00d9      	lsls	r1, r3, #3
 800647a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800647e:	00d0      	lsls	r0, r2, #3
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	1911      	adds	r1, r2, r4
 8006486:	65b9      	str	r1, [r7, #88]	; 0x58
 8006488:	416b      	adcs	r3, r5
 800648a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800648c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	461a      	mov	r2, r3
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	1891      	adds	r1, r2, r2
 8006498:	62b9      	str	r1, [r7, #40]	; 0x28
 800649a:	415b      	adcs	r3, r3
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800649e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064a6:	f7f9 feeb 	bl	8000280 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4b8c      	ldr	r3, [pc, #560]	; (80066e0 <UART_SetConfig+0x38c>)
 80064b0:	fba3 1302 	umull	r1, r3, r3, r2
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	2164      	movs	r1, #100	; 0x64
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	3332      	adds	r3, #50	; 0x32
 80064c2:	4a87      	ldr	r2, [pc, #540]	; (80066e0 <UART_SetConfig+0x38c>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064d0:	441e      	add	r6, r3
 80064d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d4:	4618      	mov	r0, r3
 80064d6:	f04f 0100 	mov.w	r1, #0
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	1894      	adds	r4, r2, r2
 80064e0:	623c      	str	r4, [r7, #32]
 80064e2:	415b      	adcs	r3, r3
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
 80064e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064ea:	1812      	adds	r2, r2, r0
 80064ec:	eb41 0303 	adc.w	r3, r1, r3
 80064f0:	f04f 0400 	mov.w	r4, #0
 80064f4:	f04f 0500 	mov.w	r5, #0
 80064f8:	00dd      	lsls	r5, r3, #3
 80064fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064fe:	00d4      	lsls	r4, r2, #3
 8006500:	4622      	mov	r2, r4
 8006502:	462b      	mov	r3, r5
 8006504:	1814      	adds	r4, r2, r0
 8006506:	653c      	str	r4, [r7, #80]	; 0x50
 8006508:	414b      	adcs	r3, r1
 800650a:	657b      	str	r3, [r7, #84]	; 0x54
 800650c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	461a      	mov	r2, r3
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	1891      	adds	r1, r2, r2
 8006518:	61b9      	str	r1, [r7, #24]
 800651a:	415b      	adcs	r3, r3
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006522:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006526:	f7f9 feab 	bl	8000280 <__aeabi_uldivmod>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4b6c      	ldr	r3, [pc, #432]	; (80066e0 <UART_SetConfig+0x38c>)
 8006530:	fba3 1302 	umull	r1, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	2164      	movs	r1, #100	; 0x64
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	3332      	adds	r3, #50	; 0x32
 8006542:	4a67      	ldr	r2, [pc, #412]	; (80066e0 <UART_SetConfig+0x38c>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f003 0207 	and.w	r2, r3, #7
 800654e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4432      	add	r2, r6
 8006554:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006556:	e0b9      	b.n	80066cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800655a:	461c      	mov	r4, r3
 800655c:	f04f 0500 	mov.w	r5, #0
 8006560:	4622      	mov	r2, r4
 8006562:	462b      	mov	r3, r5
 8006564:	1891      	adds	r1, r2, r2
 8006566:	6139      	str	r1, [r7, #16]
 8006568:	415b      	adcs	r3, r3
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006570:	1912      	adds	r2, r2, r4
 8006572:	eb45 0303 	adc.w	r3, r5, r3
 8006576:	f04f 0000 	mov.w	r0, #0
 800657a:	f04f 0100 	mov.w	r1, #0
 800657e:	00d9      	lsls	r1, r3, #3
 8006580:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006584:	00d0      	lsls	r0, r2, #3
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	eb12 0804 	adds.w	r8, r2, r4
 800658e:	eb43 0905 	adc.w	r9, r3, r5
 8006592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	f04f 0100 	mov.w	r1, #0
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	008b      	lsls	r3, r1, #2
 80065a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065aa:	0082      	lsls	r2, r0, #2
 80065ac:	4640      	mov	r0, r8
 80065ae:	4649      	mov	r1, r9
 80065b0:	f7f9 fe66 	bl	8000280 <__aeabi_uldivmod>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4b49      	ldr	r3, [pc, #292]	; (80066e0 <UART_SetConfig+0x38c>)
 80065ba:	fba3 2302 	umull	r2, r3, r3, r2
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	011e      	lsls	r6, r3, #4
 80065c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c4:	4618      	mov	r0, r3
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	1894      	adds	r4, r2, r2
 80065d0:	60bc      	str	r4, [r7, #8]
 80065d2:	415b      	adcs	r3, r3
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065da:	1812      	adds	r2, r2, r0
 80065dc:	eb41 0303 	adc.w	r3, r1, r3
 80065e0:	f04f 0400 	mov.w	r4, #0
 80065e4:	f04f 0500 	mov.w	r5, #0
 80065e8:	00dd      	lsls	r5, r3, #3
 80065ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065ee:	00d4      	lsls	r4, r2, #3
 80065f0:	4622      	mov	r2, r4
 80065f2:	462b      	mov	r3, r5
 80065f4:	1814      	adds	r4, r2, r0
 80065f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80065f8:	414b      	adcs	r3, r1
 80065fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	f04f 0100 	mov.w	r1, #0
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	008b      	lsls	r3, r1, #2
 8006610:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006614:	0082      	lsls	r2, r0, #2
 8006616:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800661a:	f7f9 fe31 	bl	8000280 <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4b2f      	ldr	r3, [pc, #188]	; (80066e0 <UART_SetConfig+0x38c>)
 8006624:	fba3 1302 	umull	r1, r3, r3, r2
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	2164      	movs	r1, #100	; 0x64
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	3332      	adds	r3, #50	; 0x32
 8006636:	4a2a      	ldr	r2, [pc, #168]	; (80066e0 <UART_SetConfig+0x38c>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006642:	441e      	add	r6, r3
 8006644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006646:	4618      	mov	r0, r3
 8006648:	f04f 0100 	mov.w	r1, #0
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	1894      	adds	r4, r2, r2
 8006652:	603c      	str	r4, [r7, #0]
 8006654:	415b      	adcs	r3, r3
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800665c:	1812      	adds	r2, r2, r0
 800665e:	eb41 0303 	adc.w	r3, r1, r3
 8006662:	f04f 0400 	mov.w	r4, #0
 8006666:	f04f 0500 	mov.w	r5, #0
 800666a:	00dd      	lsls	r5, r3, #3
 800666c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006670:	00d4      	lsls	r4, r2, #3
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	eb12 0a00 	adds.w	sl, r2, r0
 800667a:	eb43 0b01 	adc.w	fp, r3, r1
 800667e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4618      	mov	r0, r3
 8006684:	f04f 0100 	mov.w	r1, #0
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	008b      	lsls	r3, r1, #2
 8006692:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006696:	0082      	lsls	r2, r0, #2
 8006698:	4650      	mov	r0, sl
 800669a:	4659      	mov	r1, fp
 800669c:	f7f9 fdf0 	bl	8000280 <__aeabi_uldivmod>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <UART_SetConfig+0x38c>)
 80066a6:	fba3 1302 	umull	r1, r3, r3, r2
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	2164      	movs	r1, #100	; 0x64
 80066ae:	fb01 f303 	mul.w	r3, r1, r3
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	3332      	adds	r3, #50	; 0x32
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <UART_SetConfig+0x38c>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	f003 020f 	and.w	r2, r3, #15
 80066c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4432      	add	r2, r6
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	377c      	adds	r7, #124	; 0x7c
 80066d0:	46bd      	mov	sp, r7
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	bf00      	nop
 80066d8:	40011000 	.word	0x40011000
 80066dc:	40011400 	.word	0x40011400
 80066e0:	51eb851f 	.word	0x51eb851f

080066e4 <__errno>:
 80066e4:	4b01      	ldr	r3, [pc, #4]	; (80066ec <__errno+0x8>)
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20000078 	.word	0x20000078

080066f0 <__libc_init_array>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	4d0d      	ldr	r5, [pc, #52]	; (8006728 <__libc_init_array+0x38>)
 80066f4:	4c0d      	ldr	r4, [pc, #52]	; (800672c <__libc_init_array+0x3c>)
 80066f6:	1b64      	subs	r4, r4, r5
 80066f8:	10a4      	asrs	r4, r4, #2
 80066fa:	2600      	movs	r6, #0
 80066fc:	42a6      	cmp	r6, r4
 80066fe:	d109      	bne.n	8006714 <__libc_init_array+0x24>
 8006700:	4d0b      	ldr	r5, [pc, #44]	; (8006730 <__libc_init_array+0x40>)
 8006702:	4c0c      	ldr	r4, [pc, #48]	; (8006734 <__libc_init_array+0x44>)
 8006704:	f000 fc4e 	bl	8006fa4 <_init>
 8006708:	1b64      	subs	r4, r4, r5
 800670a:	10a4      	asrs	r4, r4, #2
 800670c:	2600      	movs	r6, #0
 800670e:	42a6      	cmp	r6, r4
 8006710:	d105      	bne.n	800671e <__libc_init_array+0x2e>
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	f855 3b04 	ldr.w	r3, [r5], #4
 8006718:	4798      	blx	r3
 800671a:	3601      	adds	r6, #1
 800671c:	e7ee      	b.n	80066fc <__libc_init_array+0xc>
 800671e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006722:	4798      	blx	r3
 8006724:	3601      	adds	r6, #1
 8006726:	e7f2      	b.n	800670e <__libc_init_array+0x1e>
 8006728:	08007024 	.word	0x08007024
 800672c:	08007024 	.word	0x08007024
 8006730:	08007024 	.word	0x08007024
 8006734:	08007028 	.word	0x08007028

08006738 <memset>:
 8006738:	4402      	add	r2, r0
 800673a:	4603      	mov	r3, r0
 800673c:	4293      	cmp	r3, r2
 800673e:	d100      	bne.n	8006742 <memset+0xa>
 8006740:	4770      	bx	lr
 8006742:	f803 1b01 	strb.w	r1, [r3], #1
 8006746:	e7f9      	b.n	800673c <memset+0x4>

08006748 <siprintf>:
 8006748:	b40e      	push	{r1, r2, r3}
 800674a:	b500      	push	{lr}
 800674c:	b09c      	sub	sp, #112	; 0x70
 800674e:	ab1d      	add	r3, sp, #116	; 0x74
 8006750:	9002      	str	r0, [sp, #8]
 8006752:	9006      	str	r0, [sp, #24]
 8006754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006758:	4809      	ldr	r0, [pc, #36]	; (8006780 <siprintf+0x38>)
 800675a:	9107      	str	r1, [sp, #28]
 800675c:	9104      	str	r1, [sp, #16]
 800675e:	4909      	ldr	r1, [pc, #36]	; (8006784 <siprintf+0x3c>)
 8006760:	f853 2b04 	ldr.w	r2, [r3], #4
 8006764:	9105      	str	r1, [sp, #20]
 8006766:	6800      	ldr	r0, [r0, #0]
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	a902      	add	r1, sp, #8
 800676c:	f000 f868 	bl	8006840 <_svfiprintf_r>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	b01c      	add	sp, #112	; 0x70
 8006778:	f85d eb04 	ldr.w	lr, [sp], #4
 800677c:	b003      	add	sp, #12
 800677e:	4770      	bx	lr
 8006780:	20000078 	.word	0x20000078
 8006784:	ffff0208 	.word	0xffff0208

08006788 <__ssputs_r>:
 8006788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800678c:	688e      	ldr	r6, [r1, #8]
 800678e:	429e      	cmp	r6, r3
 8006790:	4682      	mov	sl, r0
 8006792:	460c      	mov	r4, r1
 8006794:	4690      	mov	r8, r2
 8006796:	461f      	mov	r7, r3
 8006798:	d838      	bhi.n	800680c <__ssputs_r+0x84>
 800679a:	898a      	ldrh	r2, [r1, #12]
 800679c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067a0:	d032      	beq.n	8006808 <__ssputs_r+0x80>
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	6909      	ldr	r1, [r1, #16]
 80067a6:	eba5 0901 	sub.w	r9, r5, r1
 80067aa:	6965      	ldr	r5, [r4, #20]
 80067ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067b4:	3301      	adds	r3, #1
 80067b6:	444b      	add	r3, r9
 80067b8:	106d      	asrs	r5, r5, #1
 80067ba:	429d      	cmp	r5, r3
 80067bc:	bf38      	it	cc
 80067be:	461d      	movcc	r5, r3
 80067c0:	0553      	lsls	r3, r2, #21
 80067c2:	d531      	bpl.n	8006828 <__ssputs_r+0xa0>
 80067c4:	4629      	mov	r1, r5
 80067c6:	f000 fb47 	bl	8006e58 <_malloc_r>
 80067ca:	4606      	mov	r6, r0
 80067cc:	b950      	cbnz	r0, 80067e4 <__ssputs_r+0x5c>
 80067ce:	230c      	movs	r3, #12
 80067d0:	f8ca 3000 	str.w	r3, [sl]
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e4:	6921      	ldr	r1, [r4, #16]
 80067e6:	464a      	mov	r2, r9
 80067e8:	f000 fabe 	bl	8006d68 <memcpy>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	6126      	str	r6, [r4, #16]
 80067fa:	6165      	str	r5, [r4, #20]
 80067fc:	444e      	add	r6, r9
 80067fe:	eba5 0509 	sub.w	r5, r5, r9
 8006802:	6026      	str	r6, [r4, #0]
 8006804:	60a5      	str	r5, [r4, #8]
 8006806:	463e      	mov	r6, r7
 8006808:	42be      	cmp	r6, r7
 800680a:	d900      	bls.n	800680e <__ssputs_r+0x86>
 800680c:	463e      	mov	r6, r7
 800680e:	4632      	mov	r2, r6
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	4641      	mov	r1, r8
 8006814:	f000 fab6 	bl	8006d84 <memmove>
 8006818:	68a3      	ldr	r3, [r4, #8]
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	1b9b      	subs	r3, r3, r6
 800681e:	4432      	add	r2, r6
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	6022      	str	r2, [r4, #0]
 8006824:	2000      	movs	r0, #0
 8006826:	e7db      	b.n	80067e0 <__ssputs_r+0x58>
 8006828:	462a      	mov	r2, r5
 800682a:	f000 fb6f 	bl	8006f0c <_realloc_r>
 800682e:	4606      	mov	r6, r0
 8006830:	2800      	cmp	r0, #0
 8006832:	d1e1      	bne.n	80067f8 <__ssputs_r+0x70>
 8006834:	6921      	ldr	r1, [r4, #16]
 8006836:	4650      	mov	r0, sl
 8006838:	f000 fabe 	bl	8006db8 <_free_r>
 800683c:	e7c7      	b.n	80067ce <__ssputs_r+0x46>
	...

08006840 <_svfiprintf_r>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	4698      	mov	r8, r3
 8006846:	898b      	ldrh	r3, [r1, #12]
 8006848:	061b      	lsls	r3, r3, #24
 800684a:	b09d      	sub	sp, #116	; 0x74
 800684c:	4607      	mov	r7, r0
 800684e:	460d      	mov	r5, r1
 8006850:	4614      	mov	r4, r2
 8006852:	d50e      	bpl.n	8006872 <_svfiprintf_r+0x32>
 8006854:	690b      	ldr	r3, [r1, #16]
 8006856:	b963      	cbnz	r3, 8006872 <_svfiprintf_r+0x32>
 8006858:	2140      	movs	r1, #64	; 0x40
 800685a:	f000 fafd 	bl	8006e58 <_malloc_r>
 800685e:	6028      	str	r0, [r5, #0]
 8006860:	6128      	str	r0, [r5, #16]
 8006862:	b920      	cbnz	r0, 800686e <_svfiprintf_r+0x2e>
 8006864:	230c      	movs	r3, #12
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	e0d1      	b.n	8006a12 <_svfiprintf_r+0x1d2>
 800686e:	2340      	movs	r3, #64	; 0x40
 8006870:	616b      	str	r3, [r5, #20]
 8006872:	2300      	movs	r3, #0
 8006874:	9309      	str	r3, [sp, #36]	; 0x24
 8006876:	2320      	movs	r3, #32
 8006878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800687c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006880:	2330      	movs	r3, #48	; 0x30
 8006882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a2c <_svfiprintf_r+0x1ec>
 8006886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800688a:	f04f 0901 	mov.w	r9, #1
 800688e:	4623      	mov	r3, r4
 8006890:	469a      	mov	sl, r3
 8006892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006896:	b10a      	cbz	r2, 800689c <_svfiprintf_r+0x5c>
 8006898:	2a25      	cmp	r2, #37	; 0x25
 800689a:	d1f9      	bne.n	8006890 <_svfiprintf_r+0x50>
 800689c:	ebba 0b04 	subs.w	fp, sl, r4
 80068a0:	d00b      	beq.n	80068ba <_svfiprintf_r+0x7a>
 80068a2:	465b      	mov	r3, fp
 80068a4:	4622      	mov	r2, r4
 80068a6:	4629      	mov	r1, r5
 80068a8:	4638      	mov	r0, r7
 80068aa:	f7ff ff6d 	bl	8006788 <__ssputs_r>
 80068ae:	3001      	adds	r0, #1
 80068b0:	f000 80aa 	beq.w	8006a08 <_svfiprintf_r+0x1c8>
 80068b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b6:	445a      	add	r2, fp
 80068b8:	9209      	str	r2, [sp, #36]	; 0x24
 80068ba:	f89a 3000 	ldrb.w	r3, [sl]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80a2 	beq.w	8006a08 <_svfiprintf_r+0x1c8>
 80068c4:	2300      	movs	r3, #0
 80068c6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ce:	f10a 0a01 	add.w	sl, sl, #1
 80068d2:	9304      	str	r3, [sp, #16]
 80068d4:	9307      	str	r3, [sp, #28]
 80068d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068da:	931a      	str	r3, [sp, #104]	; 0x68
 80068dc:	4654      	mov	r4, sl
 80068de:	2205      	movs	r2, #5
 80068e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e4:	4851      	ldr	r0, [pc, #324]	; (8006a2c <_svfiprintf_r+0x1ec>)
 80068e6:	f7f9 fc7b 	bl	80001e0 <memchr>
 80068ea:	9a04      	ldr	r2, [sp, #16]
 80068ec:	b9d8      	cbnz	r0, 8006926 <_svfiprintf_r+0xe6>
 80068ee:	06d0      	lsls	r0, r2, #27
 80068f0:	bf44      	itt	mi
 80068f2:	2320      	movmi	r3, #32
 80068f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f8:	0711      	lsls	r1, r2, #28
 80068fa:	bf44      	itt	mi
 80068fc:	232b      	movmi	r3, #43	; 0x2b
 80068fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006902:	f89a 3000 	ldrb.w	r3, [sl]
 8006906:	2b2a      	cmp	r3, #42	; 0x2a
 8006908:	d015      	beq.n	8006936 <_svfiprintf_r+0xf6>
 800690a:	9a07      	ldr	r2, [sp, #28]
 800690c:	4654      	mov	r4, sl
 800690e:	2000      	movs	r0, #0
 8006910:	f04f 0c0a 	mov.w	ip, #10
 8006914:	4621      	mov	r1, r4
 8006916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800691a:	3b30      	subs	r3, #48	; 0x30
 800691c:	2b09      	cmp	r3, #9
 800691e:	d94e      	bls.n	80069be <_svfiprintf_r+0x17e>
 8006920:	b1b0      	cbz	r0, 8006950 <_svfiprintf_r+0x110>
 8006922:	9207      	str	r2, [sp, #28]
 8006924:	e014      	b.n	8006950 <_svfiprintf_r+0x110>
 8006926:	eba0 0308 	sub.w	r3, r0, r8
 800692a:	fa09 f303 	lsl.w	r3, r9, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	46a2      	mov	sl, r4
 8006934:	e7d2      	b.n	80068dc <_svfiprintf_r+0x9c>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	1d19      	adds	r1, r3, #4
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	9103      	str	r1, [sp, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfbb      	ittet	lt
 8006942:	425b      	neglt	r3, r3
 8006944:	f042 0202 	orrlt.w	r2, r2, #2
 8006948:	9307      	strge	r3, [sp, #28]
 800694a:	9307      	strlt	r3, [sp, #28]
 800694c:	bfb8      	it	lt
 800694e:	9204      	strlt	r2, [sp, #16]
 8006950:	7823      	ldrb	r3, [r4, #0]
 8006952:	2b2e      	cmp	r3, #46	; 0x2e
 8006954:	d10c      	bne.n	8006970 <_svfiprintf_r+0x130>
 8006956:	7863      	ldrb	r3, [r4, #1]
 8006958:	2b2a      	cmp	r3, #42	; 0x2a
 800695a:	d135      	bne.n	80069c8 <_svfiprintf_r+0x188>
 800695c:	9b03      	ldr	r3, [sp, #12]
 800695e:	1d1a      	adds	r2, r3, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	9203      	str	r2, [sp, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	bfb8      	it	lt
 8006968:	f04f 33ff 	movlt.w	r3, #4294967295
 800696c:	3402      	adds	r4, #2
 800696e:	9305      	str	r3, [sp, #20]
 8006970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a3c <_svfiprintf_r+0x1fc>
 8006974:	7821      	ldrb	r1, [r4, #0]
 8006976:	2203      	movs	r2, #3
 8006978:	4650      	mov	r0, sl
 800697a:	f7f9 fc31 	bl	80001e0 <memchr>
 800697e:	b140      	cbz	r0, 8006992 <_svfiprintf_r+0x152>
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	eba0 000a 	sub.w	r0, r0, sl
 8006986:	fa03 f000 	lsl.w	r0, r3, r0
 800698a:	9b04      	ldr	r3, [sp, #16]
 800698c:	4303      	orrs	r3, r0
 800698e:	3401      	adds	r4, #1
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006996:	4826      	ldr	r0, [pc, #152]	; (8006a30 <_svfiprintf_r+0x1f0>)
 8006998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800699c:	2206      	movs	r2, #6
 800699e:	f7f9 fc1f 	bl	80001e0 <memchr>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d038      	beq.n	8006a18 <_svfiprintf_r+0x1d8>
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <_svfiprintf_r+0x1f4>)
 80069a8:	bb1b      	cbnz	r3, 80069f2 <_svfiprintf_r+0x1b2>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	3307      	adds	r3, #7
 80069ae:	f023 0307 	bic.w	r3, r3, #7
 80069b2:	3308      	adds	r3, #8
 80069b4:	9303      	str	r3, [sp, #12]
 80069b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b8:	4433      	add	r3, r6
 80069ba:	9309      	str	r3, [sp, #36]	; 0x24
 80069bc:	e767      	b.n	800688e <_svfiprintf_r+0x4e>
 80069be:	fb0c 3202 	mla	r2, ip, r2, r3
 80069c2:	460c      	mov	r4, r1
 80069c4:	2001      	movs	r0, #1
 80069c6:	e7a5      	b.n	8006914 <_svfiprintf_r+0xd4>
 80069c8:	2300      	movs	r3, #0
 80069ca:	3401      	adds	r4, #1
 80069cc:	9305      	str	r3, [sp, #20]
 80069ce:	4619      	mov	r1, r3
 80069d0:	f04f 0c0a 	mov.w	ip, #10
 80069d4:	4620      	mov	r0, r4
 80069d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069da:	3a30      	subs	r2, #48	; 0x30
 80069dc:	2a09      	cmp	r2, #9
 80069de:	d903      	bls.n	80069e8 <_svfiprintf_r+0x1a8>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0c5      	beq.n	8006970 <_svfiprintf_r+0x130>
 80069e4:	9105      	str	r1, [sp, #20]
 80069e6:	e7c3      	b.n	8006970 <_svfiprintf_r+0x130>
 80069e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ec:	4604      	mov	r4, r0
 80069ee:	2301      	movs	r3, #1
 80069f0:	e7f0      	b.n	80069d4 <_svfiprintf_r+0x194>
 80069f2:	ab03      	add	r3, sp, #12
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	462a      	mov	r2, r5
 80069f8:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <_svfiprintf_r+0x1f8>)
 80069fa:	a904      	add	r1, sp, #16
 80069fc:	4638      	mov	r0, r7
 80069fe:	f3af 8000 	nop.w
 8006a02:	1c42      	adds	r2, r0, #1
 8006a04:	4606      	mov	r6, r0
 8006a06:	d1d6      	bne.n	80069b6 <_svfiprintf_r+0x176>
 8006a08:	89ab      	ldrh	r3, [r5, #12]
 8006a0a:	065b      	lsls	r3, r3, #25
 8006a0c:	f53f af2c 	bmi.w	8006868 <_svfiprintf_r+0x28>
 8006a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a12:	b01d      	add	sp, #116	; 0x74
 8006a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a18:	ab03      	add	r3, sp, #12
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	462a      	mov	r2, r5
 8006a1e:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <_svfiprintf_r+0x1f8>)
 8006a20:	a904      	add	r1, sp, #16
 8006a22:	4638      	mov	r0, r7
 8006a24:	f000 f87a 	bl	8006b1c <_printf_i>
 8006a28:	e7eb      	b.n	8006a02 <_svfiprintf_r+0x1c2>
 8006a2a:	bf00      	nop
 8006a2c:	08006fe8 	.word	0x08006fe8
 8006a30:	08006ff2 	.word	0x08006ff2
 8006a34:	00000000 	.word	0x00000000
 8006a38:	08006789 	.word	0x08006789
 8006a3c:	08006fee 	.word	0x08006fee

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4699      	mov	r9, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfb8      	it	lt
 8006a54:	4613      	movlt	r3, r2
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc26      	bgt.n	8006ad6 <_printf_common+0x96>
 8006a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a8c:	1e13      	subs	r3, r2, #0
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d42b      	bmi.n	8006af0 <_printf_common+0xb0>
 8006a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c0      	blx	r8
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d01e      	beq.n	8006ae4 <_printf_common+0xa4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	68e5      	ldr	r5, [r4, #12]
 8006aaa:	6832      	ldr	r2, [r6, #0]
 8006aac:	f003 0306 	and.w	r3, r3, #6
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	bf08      	it	eq
 8006ab4:	1aad      	subeq	r5, r5, r2
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	bf0c      	ite	eq
 8006abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac0:	2500      	movne	r5, #0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bfc4      	itt	gt
 8006ac6:	1a9b      	subgt	r3, r3, r2
 8006ac8:	18ed      	addgt	r5, r5, r3
 8006aca:	2600      	movs	r6, #0
 8006acc:	341a      	adds	r4, #26
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	d11a      	bne.n	8006b08 <_printf_common+0xc8>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e008      	b.n	8006ae8 <_printf_common+0xa8>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4649      	mov	r1, r9
 8006adc:	4638      	mov	r0, r7
 8006ade:	47c0      	blx	r8
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d103      	bne.n	8006aec <_printf_common+0xac>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7c6      	b.n	8006a7e <_printf_common+0x3e>
 8006af0:	18e1      	adds	r1, r4, r3
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	2030      	movs	r0, #48	; 0x30
 8006af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006afa:	4422      	add	r2, r4
 8006afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b04:	3302      	adds	r3, #2
 8006b06:	e7c7      	b.n	8006a98 <_printf_common+0x58>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c0      	blx	r8
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa4>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d9      	b.n	8006ace <_printf_common+0x8e>
	...

08006b1c <_printf_i>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	4691      	mov	r9, r2
 8006b24:	7e27      	ldrb	r7, [r4, #24]
 8006b26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b28:	2f78      	cmp	r7, #120	; 0x78
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b32:	d807      	bhi.n	8006b44 <_printf_i+0x28>
 8006b34:	2f62      	cmp	r7, #98	; 0x62
 8006b36:	d80a      	bhi.n	8006b4e <_printf_i+0x32>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	f000 80d8 	beq.w	8006cee <_printf_i+0x1d2>
 8006b3e:	2f58      	cmp	r7, #88	; 0x58
 8006b40:	f000 80a3 	beq.w	8006c8a <_printf_i+0x16e>
 8006b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b4c:	e03a      	b.n	8006bc4 <_printf_i+0xa8>
 8006b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b52:	2b15      	cmp	r3, #21
 8006b54:	d8f6      	bhi.n	8006b44 <_printf_i+0x28>
 8006b56:	a001      	add	r0, pc, #4	; (adr r0, 8006b5c <_printf_i+0x40>)
 8006b58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006b45 	.word	0x08006b45
 8006b68:	08006b45 	.word	0x08006b45
 8006b6c:	08006b45 	.word	0x08006b45
 8006b70:	08006b45 	.word	0x08006b45
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b45 	.word	0x08006b45
 8006b7c:	08006b45 	.word	0x08006b45
 8006b80:	08006b45 	.word	0x08006b45
 8006b84:	08006b45 	.word	0x08006b45
 8006b88:	08006cd5 	.word	0x08006cd5
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006cb7 	.word	0x08006cb7
 8006b94:	08006b45 	.word	0x08006b45
 8006b98:	08006b45 	.word	0x08006b45
 8006b9c:	08006cf7 	.word	0x08006cf7
 8006ba0:	08006b45 	.word	0x08006b45
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006b45 	.word	0x08006b45
 8006bac:	08006b45 	.word	0x08006b45
 8006bb0:	08006cbf 	.word	0x08006cbf
 8006bb4:	680b      	ldr	r3, [r1, #0]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	600a      	str	r2, [r1, #0]
 8006bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0a3      	b.n	8006d10 <_printf_i+0x1f4>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	6808      	ldr	r0, [r1, #0]
 8006bcc:	062e      	lsls	r6, r5, #24
 8006bce:	f100 0304 	add.w	r3, r0, #4
 8006bd2:	d50a      	bpl.n	8006bea <_printf_i+0xce>
 8006bd4:	6805      	ldr	r5, [r0, #0]
 8006bd6:	600b      	str	r3, [r1, #0]
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	da03      	bge.n	8006be4 <_printf_i+0xc8>
 8006bdc:	232d      	movs	r3, #45	; 0x2d
 8006bde:	426d      	negs	r5, r5
 8006be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be4:	485e      	ldr	r0, [pc, #376]	; (8006d60 <_printf_i+0x244>)
 8006be6:	230a      	movs	r3, #10
 8006be8:	e019      	b.n	8006c1e <_printf_i+0x102>
 8006bea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bee:	6805      	ldr	r5, [r0, #0]
 8006bf0:	600b      	str	r3, [r1, #0]
 8006bf2:	bf18      	it	ne
 8006bf4:	b22d      	sxthne	r5, r5
 8006bf6:	e7ef      	b.n	8006bd8 <_printf_i+0xbc>
 8006bf8:	680b      	ldr	r3, [r1, #0]
 8006bfa:	6825      	ldr	r5, [r4, #0]
 8006bfc:	1d18      	adds	r0, r3, #4
 8006bfe:	6008      	str	r0, [r1, #0]
 8006c00:	0628      	lsls	r0, r5, #24
 8006c02:	d501      	bpl.n	8006c08 <_printf_i+0xec>
 8006c04:	681d      	ldr	r5, [r3, #0]
 8006c06:	e002      	b.n	8006c0e <_printf_i+0xf2>
 8006c08:	0669      	lsls	r1, r5, #25
 8006c0a:	d5fb      	bpl.n	8006c04 <_printf_i+0xe8>
 8006c0c:	881d      	ldrh	r5, [r3, #0]
 8006c0e:	4854      	ldr	r0, [pc, #336]	; (8006d60 <_printf_i+0x244>)
 8006c10:	2f6f      	cmp	r7, #111	; 0x6f
 8006c12:	bf0c      	ite	eq
 8006c14:	2308      	moveq	r3, #8
 8006c16:	230a      	movne	r3, #10
 8006c18:	2100      	movs	r1, #0
 8006c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c1e:	6866      	ldr	r6, [r4, #4]
 8006c20:	60a6      	str	r6, [r4, #8]
 8006c22:	2e00      	cmp	r6, #0
 8006c24:	bfa2      	ittt	ge
 8006c26:	6821      	ldrge	r1, [r4, #0]
 8006c28:	f021 0104 	bicge.w	r1, r1, #4
 8006c2c:	6021      	strge	r1, [r4, #0]
 8006c2e:	b90d      	cbnz	r5, 8006c34 <_printf_i+0x118>
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	d04d      	beq.n	8006cd0 <_printf_i+0x1b4>
 8006c34:	4616      	mov	r6, r2
 8006c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c3e:	5dc7      	ldrb	r7, [r0, r7]
 8006c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c44:	462f      	mov	r7, r5
 8006c46:	42bb      	cmp	r3, r7
 8006c48:	460d      	mov	r5, r1
 8006c4a:	d9f4      	bls.n	8006c36 <_printf_i+0x11a>
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d10b      	bne.n	8006c68 <_printf_i+0x14c>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	07df      	lsls	r7, r3, #31
 8006c54:	d508      	bpl.n	8006c68 <_printf_i+0x14c>
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	4299      	cmp	r1, r3
 8006c5c:	bfde      	ittt	le
 8006c5e:	2330      	movle	r3, #48	; 0x30
 8006c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c68:	1b92      	subs	r2, r2, r6
 8006c6a:	6122      	str	r2, [r4, #16]
 8006c6c:	f8cd a000 	str.w	sl, [sp]
 8006c70:	464b      	mov	r3, r9
 8006c72:	aa03      	add	r2, sp, #12
 8006c74:	4621      	mov	r1, r4
 8006c76:	4640      	mov	r0, r8
 8006c78:	f7ff fee2 	bl	8006a40 <_printf_common>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d14c      	bne.n	8006d1a <_printf_i+0x1fe>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	b004      	add	sp, #16
 8006c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8a:	4835      	ldr	r0, [pc, #212]	; (8006d60 <_printf_i+0x244>)
 8006c8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	680e      	ldr	r6, [r1, #0]
 8006c94:	061f      	lsls	r7, r3, #24
 8006c96:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c9a:	600e      	str	r6, [r1, #0]
 8006c9c:	d514      	bpl.n	8006cc8 <_printf_i+0x1ac>
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	bf44      	itt	mi
 8006ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ca6:	6023      	strmi	r3, [r4, #0]
 8006ca8:	b91d      	cbnz	r5, 8006cb2 <_printf_i+0x196>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f023 0320 	bic.w	r3, r3, #32
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	2310      	movs	r3, #16
 8006cb4:	e7b0      	b.n	8006c18 <_printf_i+0xfc>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	f043 0320 	orr.w	r3, r3, #32
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	2378      	movs	r3, #120	; 0x78
 8006cc0:	4828      	ldr	r0, [pc, #160]	; (8006d64 <_printf_i+0x248>)
 8006cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cc6:	e7e3      	b.n	8006c90 <_printf_i+0x174>
 8006cc8:	065e      	lsls	r6, r3, #25
 8006cca:	bf48      	it	mi
 8006ccc:	b2ad      	uxthmi	r5, r5
 8006cce:	e7e6      	b.n	8006c9e <_printf_i+0x182>
 8006cd0:	4616      	mov	r6, r2
 8006cd2:	e7bb      	b.n	8006c4c <_printf_i+0x130>
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	6826      	ldr	r6, [r4, #0]
 8006cd8:	6960      	ldr	r0, [r4, #20]
 8006cda:	1d1d      	adds	r5, r3, #4
 8006cdc:	600d      	str	r5, [r1, #0]
 8006cde:	0635      	lsls	r5, r6, #24
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0x1cc>
 8006ce4:	6018      	str	r0, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <_printf_i+0x1d2>
 8006ce8:	0671      	lsls	r1, r6, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0x1c8>
 8006cec:	8018      	strh	r0, [r3, #0]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	4616      	mov	r6, r2
 8006cf4:	e7ba      	b.n	8006c6c <_printf_i+0x150>
 8006cf6:	680b      	ldr	r3, [r1, #0]
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	600a      	str	r2, [r1, #0]
 8006cfc:	681e      	ldr	r6, [r3, #0]
 8006cfe:	6862      	ldr	r2, [r4, #4]
 8006d00:	2100      	movs	r1, #0
 8006d02:	4630      	mov	r0, r6
 8006d04:	f7f9 fa6c 	bl	80001e0 <memchr>
 8006d08:	b108      	cbz	r0, 8006d0e <_printf_i+0x1f2>
 8006d0a:	1b80      	subs	r0, r0, r6
 8006d0c:	6060      	str	r0, [r4, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	2300      	movs	r3, #0
 8006d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d18:	e7a8      	b.n	8006c6c <_printf_i+0x150>
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	47d0      	blx	sl
 8006d24:	3001      	adds	r0, #1
 8006d26:	d0ab      	beq.n	8006c80 <_printf_i+0x164>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	079b      	lsls	r3, r3, #30
 8006d2c:	d413      	bmi.n	8006d56 <_printf_i+0x23a>
 8006d2e:	68e0      	ldr	r0, [r4, #12]
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	4298      	cmp	r0, r3
 8006d34:	bfb8      	it	lt
 8006d36:	4618      	movlt	r0, r3
 8006d38:	e7a4      	b.n	8006c84 <_printf_i+0x168>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4632      	mov	r2, r6
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4640      	mov	r0, r8
 8006d42:	47d0      	blx	sl
 8006d44:	3001      	adds	r0, #1
 8006d46:	d09b      	beq.n	8006c80 <_printf_i+0x164>
 8006d48:	3501      	adds	r5, #1
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	9903      	ldr	r1, [sp, #12]
 8006d4e:	1a5b      	subs	r3, r3, r1
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dcf2      	bgt.n	8006d3a <_printf_i+0x21e>
 8006d54:	e7eb      	b.n	8006d2e <_printf_i+0x212>
 8006d56:	2500      	movs	r5, #0
 8006d58:	f104 0619 	add.w	r6, r4, #25
 8006d5c:	e7f5      	b.n	8006d4a <_printf_i+0x22e>
 8006d5e:	bf00      	nop
 8006d60:	08006ff9 	.word	0x08006ff9
 8006d64:	0800700a 	.word	0x0800700a

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <memmove>:
 8006d84:	4288      	cmp	r0, r1
 8006d86:	b510      	push	{r4, lr}
 8006d88:	eb01 0402 	add.w	r4, r1, r2
 8006d8c:	d902      	bls.n	8006d94 <memmove+0x10>
 8006d8e:	4284      	cmp	r4, r0
 8006d90:	4623      	mov	r3, r4
 8006d92:	d807      	bhi.n	8006da4 <memmove+0x20>
 8006d94:	1e43      	subs	r3, r0, #1
 8006d96:	42a1      	cmp	r1, r4
 8006d98:	d008      	beq.n	8006dac <memmove+0x28>
 8006d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006da2:	e7f8      	b.n	8006d96 <memmove+0x12>
 8006da4:	4402      	add	r2, r0
 8006da6:	4601      	mov	r1, r0
 8006da8:	428a      	cmp	r2, r1
 8006daa:	d100      	bne.n	8006dae <memmove+0x2a>
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006db6:	e7f7      	b.n	8006da8 <memmove+0x24>

08006db8 <_free_r>:
 8006db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	d048      	beq.n	8006e50 <_free_r+0x98>
 8006dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc2:	9001      	str	r0, [sp, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dca:	bfb8      	it	lt
 8006dcc:	18e4      	addlt	r4, r4, r3
 8006dce:	f000 f8d3 	bl	8006f78 <__malloc_lock>
 8006dd2:	4a20      	ldr	r2, [pc, #128]	; (8006e54 <_free_r+0x9c>)
 8006dd4:	9801      	ldr	r0, [sp, #4]
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	4615      	mov	r5, r2
 8006dda:	b933      	cbnz	r3, 8006dea <_free_r+0x32>
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	6014      	str	r4, [r2, #0]
 8006de0:	b003      	add	sp, #12
 8006de2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006de6:	f000 b8cd 	b.w	8006f84 <__malloc_unlock>
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	d90b      	bls.n	8006e06 <_free_r+0x4e>
 8006dee:	6821      	ldr	r1, [r4, #0]
 8006df0:	1862      	adds	r2, r4, r1
 8006df2:	4293      	cmp	r3, r2
 8006df4:	bf04      	itt	eq
 8006df6:	681a      	ldreq	r2, [r3, #0]
 8006df8:	685b      	ldreq	r3, [r3, #4]
 8006dfa:	6063      	str	r3, [r4, #4]
 8006dfc:	bf04      	itt	eq
 8006dfe:	1852      	addeq	r2, r2, r1
 8006e00:	6022      	streq	r2, [r4, #0]
 8006e02:	602c      	str	r4, [r5, #0]
 8006e04:	e7ec      	b.n	8006de0 <_free_r+0x28>
 8006e06:	461a      	mov	r2, r3
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	b10b      	cbz	r3, 8006e10 <_free_r+0x58>
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	d9fa      	bls.n	8006e06 <_free_r+0x4e>
 8006e10:	6811      	ldr	r1, [r2, #0]
 8006e12:	1855      	adds	r5, r2, r1
 8006e14:	42a5      	cmp	r5, r4
 8006e16:	d10b      	bne.n	8006e30 <_free_r+0x78>
 8006e18:	6824      	ldr	r4, [r4, #0]
 8006e1a:	4421      	add	r1, r4
 8006e1c:	1854      	adds	r4, r2, r1
 8006e1e:	42a3      	cmp	r3, r4
 8006e20:	6011      	str	r1, [r2, #0]
 8006e22:	d1dd      	bne.n	8006de0 <_free_r+0x28>
 8006e24:	681c      	ldr	r4, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	6053      	str	r3, [r2, #4]
 8006e2a:	4421      	add	r1, r4
 8006e2c:	6011      	str	r1, [r2, #0]
 8006e2e:	e7d7      	b.n	8006de0 <_free_r+0x28>
 8006e30:	d902      	bls.n	8006e38 <_free_r+0x80>
 8006e32:	230c      	movs	r3, #12
 8006e34:	6003      	str	r3, [r0, #0]
 8006e36:	e7d3      	b.n	8006de0 <_free_r+0x28>
 8006e38:	6825      	ldr	r5, [r4, #0]
 8006e3a:	1961      	adds	r1, r4, r5
 8006e3c:	428b      	cmp	r3, r1
 8006e3e:	bf04      	itt	eq
 8006e40:	6819      	ldreq	r1, [r3, #0]
 8006e42:	685b      	ldreq	r3, [r3, #4]
 8006e44:	6063      	str	r3, [r4, #4]
 8006e46:	bf04      	itt	eq
 8006e48:	1949      	addeq	r1, r1, r5
 8006e4a:	6021      	streq	r1, [r4, #0]
 8006e4c:	6054      	str	r4, [r2, #4]
 8006e4e:	e7c7      	b.n	8006de0 <_free_r+0x28>
 8006e50:	b003      	add	sp, #12
 8006e52:	bd30      	pop	{r4, r5, pc}
 8006e54:	20000100 	.word	0x20000100

08006e58 <_malloc_r>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	1ccd      	adds	r5, r1, #3
 8006e5c:	f025 0503 	bic.w	r5, r5, #3
 8006e60:	3508      	adds	r5, #8
 8006e62:	2d0c      	cmp	r5, #12
 8006e64:	bf38      	it	cc
 8006e66:	250c      	movcc	r5, #12
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	db01      	blt.n	8006e72 <_malloc_r+0x1a>
 8006e6e:	42a9      	cmp	r1, r5
 8006e70:	d903      	bls.n	8006e7a <_malloc_r+0x22>
 8006e72:	230c      	movs	r3, #12
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	2000      	movs	r0, #0
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7a:	f000 f87d 	bl	8006f78 <__malloc_lock>
 8006e7e:	4921      	ldr	r1, [pc, #132]	; (8006f04 <_malloc_r+0xac>)
 8006e80:	680a      	ldr	r2, [r1, #0]
 8006e82:	4614      	mov	r4, r2
 8006e84:	b99c      	cbnz	r4, 8006eae <_malloc_r+0x56>
 8006e86:	4f20      	ldr	r7, [pc, #128]	; (8006f08 <_malloc_r+0xb0>)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	b923      	cbnz	r3, 8006e96 <_malloc_r+0x3e>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f000 f862 	bl	8006f58 <_sbrk_r>
 8006e94:	6038      	str	r0, [r7, #0]
 8006e96:	4629      	mov	r1, r5
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f000 f85d 	bl	8006f58 <_sbrk_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d123      	bne.n	8006eea <_malloc_r+0x92>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f000 f86c 	bl	8006f84 <__malloc_unlock>
 8006eac:	e7e3      	b.n	8006e76 <_malloc_r+0x1e>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	1b5b      	subs	r3, r3, r5
 8006eb2:	d417      	bmi.n	8006ee4 <_malloc_r+0x8c>
 8006eb4:	2b0b      	cmp	r3, #11
 8006eb6:	d903      	bls.n	8006ec0 <_malloc_r+0x68>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	441c      	add	r4, r3
 8006ebc:	6025      	str	r5, [r4, #0]
 8006ebe:	e004      	b.n	8006eca <_malloc_r+0x72>
 8006ec0:	6863      	ldr	r3, [r4, #4]
 8006ec2:	42a2      	cmp	r2, r4
 8006ec4:	bf0c      	ite	eq
 8006ec6:	600b      	streq	r3, [r1, #0]
 8006ec8:	6053      	strne	r3, [r2, #4]
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f000 f85a 	bl	8006f84 <__malloc_unlock>
 8006ed0:	f104 000b 	add.w	r0, r4, #11
 8006ed4:	1d23      	adds	r3, r4, #4
 8006ed6:	f020 0007 	bic.w	r0, r0, #7
 8006eda:	1ac2      	subs	r2, r0, r3
 8006edc:	d0cc      	beq.n	8006e78 <_malloc_r+0x20>
 8006ede:	1a1b      	subs	r3, r3, r0
 8006ee0:	50a3      	str	r3, [r4, r2]
 8006ee2:	e7c9      	b.n	8006e78 <_malloc_r+0x20>
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	6864      	ldr	r4, [r4, #4]
 8006ee8:	e7cc      	b.n	8006e84 <_malloc_r+0x2c>
 8006eea:	1cc4      	adds	r4, r0, #3
 8006eec:	f024 0403 	bic.w	r4, r4, #3
 8006ef0:	42a0      	cmp	r0, r4
 8006ef2:	d0e3      	beq.n	8006ebc <_malloc_r+0x64>
 8006ef4:	1a21      	subs	r1, r4, r0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 f82e 	bl	8006f58 <_sbrk_r>
 8006efc:	3001      	adds	r0, #1
 8006efe:	d1dd      	bne.n	8006ebc <_malloc_r+0x64>
 8006f00:	e7cf      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f02:	bf00      	nop
 8006f04:	20000100 	.word	0x20000100
 8006f08:	20000104 	.word	0x20000104

08006f0c <_realloc_r>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	4607      	mov	r7, r0
 8006f10:	4614      	mov	r4, r2
 8006f12:	460e      	mov	r6, r1
 8006f14:	b921      	cbnz	r1, 8006f20 <_realloc_r+0x14>
 8006f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	f7ff bf9c 	b.w	8006e58 <_malloc_r>
 8006f20:	b922      	cbnz	r2, 8006f2c <_realloc_r+0x20>
 8006f22:	f7ff ff49 	bl	8006db8 <_free_r>
 8006f26:	4625      	mov	r5, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2c:	f000 f830 	bl	8006f90 <_malloc_usable_size_r>
 8006f30:	42a0      	cmp	r0, r4
 8006f32:	d20f      	bcs.n	8006f54 <_realloc_r+0x48>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4638      	mov	r0, r7
 8006f38:	f7ff ff8e 	bl	8006e58 <_malloc_r>
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0f2      	beq.n	8006f28 <_realloc_r+0x1c>
 8006f42:	4631      	mov	r1, r6
 8006f44:	4622      	mov	r2, r4
 8006f46:	f7ff ff0f 	bl	8006d68 <memcpy>
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f7ff ff33 	bl	8006db8 <_free_r>
 8006f52:	e7e9      	b.n	8006f28 <_realloc_r+0x1c>
 8006f54:	4635      	mov	r5, r6
 8006f56:	e7e7      	b.n	8006f28 <_realloc_r+0x1c>

08006f58 <_sbrk_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4d06      	ldr	r5, [pc, #24]	; (8006f74 <_sbrk_r+0x1c>)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	f7fa f9ae 	bl	80012c4 <_sbrk>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_sbrk_r+0x1a>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_sbrk_r+0x1a>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	2000035c 	.word	0x2000035c

08006f78 <__malloc_lock>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__malloc_lock+0x8>)
 8006f7a:	f000 b811 	b.w	8006fa0 <__retarget_lock_acquire_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20000364 	.word	0x20000364

08006f84 <__malloc_unlock>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__malloc_unlock+0x8>)
 8006f86:	f000 b80c 	b.w	8006fa2 <__retarget_lock_release_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	20000364 	.word	0x20000364

08006f90 <_malloc_usable_size_r>:
 8006f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f94:	1f18      	subs	r0, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfbc      	itt	lt
 8006f9a:	580b      	ldrlt	r3, [r1, r0]
 8006f9c:	18c0      	addlt	r0, r0, r3
 8006f9e:	4770      	bx	lr

08006fa0 <__retarget_lock_acquire_recursive>:
 8006fa0:	4770      	bx	lr

08006fa2 <__retarget_lock_release_recursive>:
 8006fa2:	4770      	bx	lr

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
