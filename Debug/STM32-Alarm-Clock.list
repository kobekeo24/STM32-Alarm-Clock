
STM32-Alarm-Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800755c  0800755c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007564  08007564  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000014c  080076b8  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080076b8  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee55  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da1  00000000  00000000  0002efd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000317e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ced  00000000  00000000  000321c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d56c  00000000  00000000  00052eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5d4a  00000000  00000000  00060421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012616b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eac  00000000  00000000  001261c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007474 	.word	0x08007474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08007474 	.word	0x08007474

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <RTC_INIT_TIME>:

/* variables -----------------------------------------------------------------*/

/* funtions -----------------------------------------------------------------*/
void RTC_INIT_TIME(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	RTC_map.seconds_reg = TIME_SECONDS_REG;
 800059c:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <RTC_INIT_TIME+0x70>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	RTC_map.minutes_reg = TIME_MINUTES_REG;
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	705a      	strb	r2, [r3, #1]
	RTC_map.hours_reg   = TIME_HOURS_REG;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	709a      	strb	r2, [r3, #2]
	RTC_map.day_reg     = TIME_DAY_REG;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	70da      	strb	r2, [r3, #3]
	RTC_map.date_reg    = TIME_DATE_REG;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	711a      	strb	r2, [r3, #4]
	RTC_map.month_reg 	= TIME_MONTH_REG;
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005bc:	2205      	movs	r2, #5
 80005be:	715a      	strb	r2, [r3, #5]
	RTC_map.year_reg 	= TIME_YEAR_REG;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005c2:	2206      	movs	r2, #6
 80005c4:	719a      	strb	r2, [r3, #6]
	RTC_map.A1s_reg		= ALARM1_SECONDS_REG;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	71da      	strb	r2, [r3, #7]
	RTC_map.A1m_reg		= ALARM1_MINUTES_REG;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	721a      	strb	r2, [r3, #8]
	RTC_map.A1h_reg		= ALARM1_HOURS_REG;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	725a      	strb	r2, [r3, #9]
	RTC_map.A1dd_reg	= ALARM1_DAY_DATE_REG;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005da:	220a      	movs	r2, #10
 80005dc:	729a      	strb	r2, [r3, #10]
	RTC_map.A2m_reg		= ALARM2_MINUTES_REG;
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005e0:	220b      	movs	r2, #11
 80005e2:	72da      	strb	r2, [r3, #11]
	RTC_map.A2h_reg		= ALARM2_HOURS_REG;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	731a      	strb	r2, [r3, #12]
	RTC_map.A2dd_reg	= ALARM2_DAY_DATE_REG;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005ec:	220d      	movs	r2, #13
 80005ee:	735a      	strb	r2, [r3, #13]
	RTC_map.control_reg	= CONTROL_REG;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005f2:	220e      	movs	r2, #14
 80005f4:	739a      	strb	r2, [r3, #14]
	RTC_map.status_reg	= STATUS_REG;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <RTC_INIT_TIME+0x70>)
 80005f8:	220f      	movs	r2, #15
 80005fa:	73da      	strb	r2, [r3, #15]
	for(uint8_t i = 0; i < STATUS_REG + 1; i++)
	{
		RTC_Read(i, (&RTC_mem.byte) + i);
	}
*/
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000298 	.word	0x20000298

0800060c <RTC_Write>:

void RTC_Write(uint8_t reg, uint8_t data)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
	  static uint8_t payload[2];
	  payload[0] = reg;
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <RTC_Write+0x3c>)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	7013      	strb	r3, [r2, #0]
	  payload[1] = data;
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <RTC_Write+0x3c>)
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	7053      	strb	r3, [r2, #1]
	  HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS,payload,2,10);
 8000628:	230a      	movs	r3, #10
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	4a06      	ldr	r2, [pc, #24]	; (8000648 <RTC_Write+0x3c>)
 8000630:	21d0      	movs	r1, #208	; 0xd0
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <RTC_Write+0x40>)
 8000634:	f002 fa02 	bl	8002a3c <HAL_I2C_Master_Transmit>
	  HAL_Delay(30);
 8000638:	201e      	movs	r0, #30
 800063a:	f001 f98f 	bl	800195c <HAL_Delay>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000016c 	.word	0x2000016c
 800064c:	200001fc 	.word	0x200001fc

08000650 <RTC_Read>:

void RTC_Read(uint8_t* p_reg, uint8_t *p_data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	//Ask slave to read data from register
	HAL_I2C_Master_Transmit(&hi2c1,RTC_ADDRESS+1,p_reg,1,10);
 800065a:	230a      	movs	r3, #10
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	21d1      	movs	r1, #209	; 0xd1
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <RTC_Read+0x38>)
 8000666:	f002 f9e9 	bl	8002a3c <HAL_I2C_Master_Transmit>
	//Store data
	HAL_I2C_Master_Receive(&hi2c1,RTC_ADDRESS,p_data,1,10);
 800066a:	230a      	movs	r3, #10
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	21d0      	movs	r1, #208	; 0xd0
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <RTC_Read+0x38>)
 8000676:	f002 fadf 	bl	8002c38 <HAL_I2C_Master_Receive>
	HAL_Delay(30);
 800067a:	201e      	movs	r0, #30
 800067c:	f001 f96e 	bl	800195c <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001fc 	.word	0x200001fc

0800068c <RTC_Enable_Alarm_IT>:

void RTC_Enable_Alarm_IT(uint8_t alarm)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&RTC_map.control_reg, (&RTC_mem.byte) +  RTC_map.control_reg);
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 8000698:	7b9b      	ldrb	r3, [r3, #14]
 800069a:	461a      	mov	r2, r3
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 800069e:	4413      	add	r3, r2
 80006a0:	4619      	mov	r1, r3
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <RTC_Enable_Alarm_IT+0x6c>)
 80006a4:	f7ff ffd4 	bl	8000650 <RTC_Read>
	//Enable Alarm 1 interrupt
	if(alarm == 1)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d108      	bne.n	80006c0 <RTC_Enable_Alarm_IT+0x34>
	{
		RTC_mem.mem.control_A1IE = 0x01;
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006b0:	7b93      	ldrb	r3, [r2, #14]
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm1_set = true;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	749a      	strb	r2, [r3, #18]
 80006be:	e007      	b.n	80006d0 <RTC_Enable_Alarm_IT+0x44>
	}
	//Enable Alarm 2 interrupt
	else
	{
		RTC_mem.mem.control_A2IE = 0x01;
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006c2:	7b93      	ldrb	r3, [r2, #14]
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm2_set = true;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	74da      	strb	r2, [r3, #19]
	}



	RTC_Write(RTC_map.control_reg, (&RTC_mem.byte)[RTC_map.control_reg]);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006d2:	7b9a      	ldrb	r2, [r3, #14]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <RTC_Enable_Alarm_IT+0x64>)
 80006d6:	7b9b      	ldrb	r3, [r3, #14]
 80006d8:	4619      	mov	r1, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <RTC_Enable_Alarm_IT+0x68>)
 80006dc:	440b      	add	r3, r1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f7ff ff92 	bl	800060c <RTC_Write>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000298 	.word	0x20000298
 80006f4:	200001b8 	.word	0x200001b8
 80006f8:	200002a6 	.word	0x200002a6

080006fc <RTC_Clear_Alarm_IT>:

void RTC_Clear_Alarm_IT(uint8_t alarm)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	RTC_Read(&RTC_map.status_reg, (&RTC_mem.byte) + RTC_map.status_reg);
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000708:	7bdb      	ldrb	r3, [r3, #15]
 800070a:	461a      	mov	r2, r3
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800070e:	4413      	add	r3, r2
 8000710:	4619      	mov	r1, r3
 8000712:	4829      	ldr	r0, [pc, #164]	; (80007b8 <RTC_Clear_Alarm_IT+0xbc>)
 8000714:	f7ff ff9c 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.control_reg, (&RTC_mem.byte) +  RTC_map.control_reg);
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800071a:	7b9b      	ldrb	r3, [r3, #14]
 800071c:	461a      	mov	r2, r3
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000720:	4413      	add	r3, r2
 8000722:	4619      	mov	r1, r3
 8000724:	4825      	ldr	r0, [pc, #148]	; (80007bc <RTC_Clear_Alarm_IT+0xc0>)
 8000726:	f7ff ff93 	bl	8000650 <RTC_Read>

	//Clear Alarm 1 interrupt
	if(alarm == 1)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d110      	bne.n	8000752 <RTC_Clear_Alarm_IT+0x56>
	{
		RTC_mem.mem.status_A1F = 0;
 8000730:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000732:	7bd3      	ldrb	r3, [r2, #15]
 8000734:	f36f 0300 	bfc	r3, #0, #1
 8000738:	73d3      	strb	r3, [r2, #15]
		RTC_mem.mem.control_A1IE = 0;
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800073c:	7b93      	ldrb	r3, [r2, #14]
 800073e:	f36f 0300 	bfc	r3, #0, #1
 8000742:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm1_triggered = false;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000746:	2200      	movs	r2, #0
 8000748:	741a      	strb	r2, [r3, #16]

		RTC_map.b_alarm1_set = false;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800074c:	2200      	movs	r2, #0
 800074e:	749a      	strb	r2, [r3, #18]
 8000750:	e00f      	b.n	8000772 <RTC_Clear_Alarm_IT+0x76>
	}
	//Clear Alarm 2 interrupt
	else
	{
		RTC_mem.mem.status_A2F = 0;
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000754:	7bd3      	ldrb	r3, [r2, #15]
 8000756:	f36f 0341 	bfc	r3, #1, #1
 800075a:	73d3      	strb	r3, [r2, #15]
		RTC_mem.mem.control_A2IE = 0;
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800075e:	7b93      	ldrb	r3, [r2, #14]
 8000760:	f36f 0341 	bfc	r3, #1, #1
 8000764:	7393      	strb	r3, [r2, #14]
		RTC_map.b_alarm2_triggered = false;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000768:	2200      	movs	r2, #0
 800076a:	745a      	strb	r2, [r3, #17]

		RTC_map.b_alarm2_set = false;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800076e:	2200      	movs	r2, #0
 8000770:	74da      	strb	r2, [r3, #19]
	}

	RTC_Write(RTC_map.control_reg, (&RTC_mem.byte)[RTC_map.control_reg]);
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000774:	7b9a      	ldrb	r2, [r3, #14]
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000778:	7b9b      	ldrb	r3, [r3, #14]
 800077a:	4619      	mov	r1, r3
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 800077e:	440b      	add	r3, r1
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	4610      	mov	r0, r2
 8000786:	f7ff ff41 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.status_reg, (&RTC_mem.byte)[RTC_map.status_reg]);
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 800078c:	7bda      	ldrb	r2, [r3, #15]
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <RTC_Clear_Alarm_IT+0xb4>)
 8000790:	7bdb      	ldrb	r3, [r3, #15]
 8000792:	4619      	mov	r1, r3
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <RTC_Clear_Alarm_IT+0xb8>)
 8000796:	440b      	add	r3, r1
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	4610      	mov	r0, r2
 800079e:	f7ff ff35 	bl	800060c <RTC_Write>
	HAL_Delay(30);
 80007a2:	201e      	movs	r0, #30
 80007a4:	f001 f8da 	bl	800195c <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000298 	.word	0x20000298
 80007b4:	200001b8 	.word	0x200001b8
 80007b8:	200002a7 	.word	0x200002a7
 80007bc:	200002a6 	.word	0x200002a6

080007c0 <RTC_Display_Time>:

void RTC_Display_Time(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af02      	add	r7, sp, #8
	static uint8_t seconds, minutes, hours, day;
	RTC_Read(&RTC_map.seconds_reg, (&RTC_mem.byte) + RTC_map.seconds_reg);
 80007c6:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <RTC_Display_Time+0x110>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <RTC_Display_Time+0x114>)
 80007ce:	4413      	add	r3, r2
 80007d0:	4619      	mov	r1, r3
 80007d2:	483f      	ldr	r0, [pc, #252]	; (80008d0 <RTC_Display_Time+0x110>)
 80007d4:	f7ff ff3c 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.minutes_reg, (&RTC_mem.byte) + RTC_map.minutes_reg);
 80007d8:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <RTC_Display_Time+0x110>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <RTC_Display_Time+0x114>)
 80007e0:	4413      	add	r3, r2
 80007e2:	4619      	mov	r1, r3
 80007e4:	483c      	ldr	r0, [pc, #240]	; (80008d8 <RTC_Display_Time+0x118>)
 80007e6:	f7ff ff33 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.hours_reg, (&RTC_mem.byte) + RTC_map.hours_reg);
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <RTC_Display_Time+0x110>)
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <RTC_Display_Time+0x114>)
 80007f2:	4413      	add	r3, r2
 80007f4:	4619      	mov	r1, r3
 80007f6:	4839      	ldr	r0, [pc, #228]	; (80008dc <RTC_Display_Time+0x11c>)
 80007f8:	f7ff ff2a 	bl	8000650 <RTC_Read>
	RTC_Read(&RTC_map.day_reg, (&RTC_mem.byte) + RTC_map.day_reg);
 80007fc:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <RTC_Display_Time+0x110>)
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	461a      	mov	r2, r3
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <RTC_Display_Time+0x114>)
 8000804:	4413      	add	r3, r2
 8000806:	4619      	mov	r1, r3
 8000808:	4835      	ldr	r0, [pc, #212]	; (80008e0 <RTC_Display_Time+0x120>)
 800080a:	f7ff ff21 	bl	8000650 <RTC_Read>

	seconds = (&RTC_mem.byte)[RTC_map.seconds_reg];
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <RTC_Display_Time+0x110>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <RTC_Display_Time+0x114>)
 8000816:	4413      	add	r3, r2
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <RTC_Display_Time+0x124>)
 800081c:	701a      	strb	r2, [r3, #0]
	minutes = (&RTC_mem.byte)[RTC_map.minutes_reg];
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <RTC_Display_Time+0x110>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	461a      	mov	r2, r3
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <RTC_Display_Time+0x114>)
 8000826:	4413      	add	r3, r2
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <RTC_Display_Time+0x128>)
 800082c:	701a      	strb	r2, [r3, #0]
	hours   = RTC_mem.mem.hours_10s + RTC_mem.mem.hours_1s;
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <RTC_Display_Time+0x114>)
 8000830:	789b      	ldrb	r3, [r3, #2]
 8000832:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <RTC_Display_Time+0x114>)
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4413      	add	r3, r2
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <RTC_Display_Time+0x12c>)
 800084a:	701a      	strb	r2, [r3, #0]
	day     = (&RTC_mem.byte)[RTC_map.day_reg];
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <RTC_Display_Time+0x110>)
 800084e:	78db      	ldrb	r3, [r3, #3]
 8000850:	461a      	mov	r2, r3
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <RTC_Display_Time+0x114>)
 8000854:	4413      	add	r3, r2
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <RTC_Display_Time+0x130>)
 800085a:	701a      	strb	r2, [r3, #0]

	if(last_second != seconds || last_minute != minutes || last_hour != hours)
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <RTC_Display_Time+0x134>)
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <RTC_Display_Time+0x124>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d10b      	bne.n	8000880 <RTC_Display_Time+0xc0>
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <RTC_Display_Time+0x138>)
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <RTC_Display_Time+0x128>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	d105      	bne.n	8000880 <RTC_Display_Time+0xc0>
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <RTC_Display_Time+0x13c>)
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <RTC_Display_Time+0x12c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d017      	beq.n	80008b0 <RTC_Display_Time+0xf0>
	{
		sprintf(txData, "%x:%x:%x\n",hours, minutes, seconds);
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <RTC_Display_Time+0x12c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <RTC_Display_Time+0x128>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <RTC_Display_Time+0x124>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	460b      	mov	r3, r1
 8000894:	491a      	ldr	r1, [pc, #104]	; (8000900 <RTC_Display_Time+0x140>)
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <RTC_Display_Time+0x144>)
 8000898:	f006 f9be 	bl	8006c18 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 10);
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <RTC_Display_Time+0x144>)
 800089e:	f7ff fca1 	bl	80001e4 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	230a      	movs	r3, #10
 80008a8:	4916      	ldr	r1, [pc, #88]	; (8000904 <RTC_Display_Time+0x144>)
 80008aa:	4817      	ldr	r0, [pc, #92]	; (8000908 <RTC_Display_Time+0x148>)
 80008ac:	f005 f87d 	bl	80059aa <HAL_UART_Transmit>
	}
	last_second = seconds;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <RTC_Display_Time+0x124>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <RTC_Display_Time+0x134>)
 80008b6:	701a      	strb	r2, [r3, #0]
	last_minute = minutes;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <RTC_Display_Time+0x128>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <RTC_Display_Time+0x138>)
 80008be:	701a      	strb	r2, [r3, #0]
	last_hour	= hours;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <RTC_Display_Time+0x12c>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <RTC_Display_Time+0x13c>)
 80008c6:	701a      	strb	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000298 	.word	0x20000298
 80008d4:	200001b8 	.word	0x200001b8
 80008d8:	20000299 	.word	0x20000299
 80008dc:	2000029a 	.word	0x2000029a
 80008e0:	2000029b 	.word	0x2000029b
 80008e4:	2000016e 	.word	0x2000016e
 80008e8:	2000016f 	.word	0x2000016f
 80008ec:	20000170 	.word	0x20000170
 80008f0:	20000171 	.word	0x20000171
 80008f4:	20000168 	.word	0x20000168
 80008f8:	20000169 	.word	0x20000169
 80008fc:	2000016a 	.word	0x2000016a
 8000900:	0800748c 	.word	0x0800748c
 8000904:	200001c8 	.word	0x200001c8
 8000908:	20000254 	.word	0x20000254

0800090c <RTC_Set_Time>:
	(&RTC_mem.byte)[RTC_map.hours_reg] = hours;
	RTC_Write(RTC_map.hours_reg, hours);
}

void RTC_Set_Time(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
 8000916:	460b      	mov	r3, r1
 8000918:	71bb      	strb	r3, [r7, #6]
 800091a:	4613      	mov	r3, r2
 800091c:	717b      	strb	r3, [r7, #5]
	(&RTC_mem.byte)[RTC_map.seconds_reg] = seconds;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <RTC_Set_Time+0x70>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <RTC_Set_Time+0x74>)
 8000926:	4413      	add	r3, r2
 8000928:	797a      	ldrb	r2, [r7, #5]
 800092a:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.minutes_reg] = minutes;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <RTC_Set_Time+0x70>)
 800092e:	785b      	ldrb	r3, [r3, #1]
 8000930:	461a      	mov	r2, r3
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <RTC_Set_Time+0x74>)
 8000934:	4413      	add	r3, r2
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.hours_reg]   = hours;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <RTC_Set_Time+0x70>)
 800093c:	789b      	ldrb	r3, [r3, #2]
 800093e:	461a      	mov	r2, r3
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <RTC_Set_Time+0x74>)
 8000942:	4413      	add	r3, r2
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	701a      	strb	r2, [r3, #0]

	RTC_Write(RTC_map.seconds_reg, seconds);
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <RTC_Set_Time+0x70>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	797a      	ldrb	r2, [r7, #5]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe5b 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.minutes_reg, minutes);
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <RTC_Set_Time+0x70>)
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	79ba      	ldrb	r2, [r7, #6]
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe54 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.hours_reg, hours);
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <RTC_Set_Time+0x70>)
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	79fa      	ldrb	r2, [r7, #7]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe4d 	bl	800060c <RTC_Write>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000298 	.word	0x20000298
 8000980:	200001b8 	.word	0x200001b8

08000984 <RTC_Day_Date>:

void RTC_Day_Date(uint8_t day, uint8_t date)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
	(&RTC_mem.byte)[RTC_map.day_reg] = day;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <RTC_Day_Date+0x50>)
 8000996:	78db      	ldrb	r3, [r3, #3]
 8000998:	461a      	mov	r2, r3
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <RTC_Day_Date+0x54>)
 800099c:	4413      	add	r3, r2
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	701a      	strb	r2, [r3, #0]
	(&RTC_mem.byte)[RTC_map.date_reg] = date;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <RTC_Day_Date+0x50>)
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <RTC_Day_Date+0x54>)
 80009aa:	4413      	add	r3, r2
 80009ac:	79ba      	ldrb	r2, [r7, #6]
 80009ae:	701a      	strb	r2, [r3, #0]

	RTC_Write(RTC_map.day_reg, day);
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <RTC_Day_Date+0x50>)
 80009b2:	78db      	ldrb	r3, [r3, #3]
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe27 	bl	800060c <RTC_Write>
	RTC_Write(RTC_map.date_reg, date);
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <RTC_Day_Date+0x50>)
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fe20 	bl	800060c <RTC_Write>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000298 	.word	0x20000298
 80009d8:	200001b8 	.word	0x200001b8

080009dc <RTC_Set_Alarm>:

void RTC_Set_Alarm(uint8_t alarm, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4623      	mov	r3, r4
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	4603      	mov	r3, r0
 80009f0:	71bb      	strb	r3, [r7, #6]
 80009f2:	460b      	mov	r3, r1
 80009f4:	717b      	strb	r3, [r7, #5]
 80009f6:	4613      	mov	r3, r2
 80009f8:	713b      	strb	r3, [r7, #4]
	if(alarm == 0x01)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d152      	bne.n	8000aa6 <RTC_Set_Alarm+0xca>
	{
		(&RTC_mem.byte)[RTC_map.A1s_reg] = seconds;
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a02:	79db      	ldrb	r3, [r3, #7]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	793a      	ldrb	r2, [r7, #4]
 8000a0c:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A1m_reg] = minutes;
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a10:	7a1b      	ldrb	r3, [r3, #8]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a16:	4413      	add	r3, r2
 8000a18:	797a      	ldrb	r2, [r7, #5]
 8000a1a:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A1h_reg]   = hours;
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a1e:	7a5b      	ldrb	r3, [r3, #9]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a24:	4413      	add	r3, r2
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	701a      	strb	r2, [r3, #0]
		RTC_mem.mem.A1_day_date_sel = 0x01;
 8000a2a:	4a42      	ldr	r2, [pc, #264]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a2c:	7a93      	ldrb	r3, [r2, #10]
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	7293      	strb	r3, [r2, #10]
		RTC_mem.mem.A1_day_date =  RTC_mem.mem.day;
 8000a34:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a36:	78db      	ldrb	r3, [r3, #3]
 8000a38:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	4a3b      	ldr	r2, [pc, #236]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a46:	7a93      	ldrb	r3, [r2, #10]
 8000a48:	f361 0303 	bfi	r3, r1, #0, #4
 8000a4c:	7293      	strb	r3, [r2, #10]


		RTC_Write(RTC_map.A1s_reg, seconds);
 8000a4e:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a50:	79db      	ldrb	r3, [r3, #7]
 8000a52:	793a      	ldrb	r2, [r7, #4]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fdd8 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A1m_reg, minutes);
 8000a5c:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a5e:	7a1b      	ldrb	r3, [r3, #8]
 8000a60:	797a      	ldrb	r2, [r7, #5]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fdd1 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A1h_reg, hours);
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a6c:	7a5b      	ldrb	r3, [r3, #9]
 8000a6e:	79ba      	ldrb	r2, [r7, #6]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fdca 	bl	800060c <RTC_Write>
		RTC_Read(&RTC_map.A1dd_reg, (&RTC_mem.byte)[RTC_map.A1dd_reg]);
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a7a:	7a9b      	ldrb	r3, [r3, #10]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	482c      	ldr	r0, [pc, #176]	; (8000b38 <RTC_Set_Alarm+0x15c>)
 8000a88:	f7ff fde2 	bl	8000650 <RTC_Read>
		RTC_Write(RTC_map.A1dd_reg, (&RTC_mem.byte)[RTC_map.A1dd_reg]);
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a8e:	7a9a      	ldrb	r2, [r3, #10]
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000a92:	7a9b      	ldrb	r3, [r3, #10]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000a98:	440b      	add	r3, r1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	f7ff fdb4 	bl	800060c <RTC_Write>
 8000aa4:	e038      	b.n	8000b18 <RTC_Set_Alarm+0x13c>
	}

	else if(alarm == 0x02)
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d135      	bne.n	8000b18 <RTC_Set_Alarm+0x13c>
	{
		(&RTC_mem.byte)[RTC_map.A2m_reg] = minutes;
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000aae:	7adb      	ldrb	r3, [r3, #11]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000ab4:	4413      	add	r3, r2
 8000ab6:	797a      	ldrb	r2, [r7, #5]
 8000ab8:	701a      	strb	r2, [r3, #0]
		(&RTC_mem.byte)[RTC_map.A2h_reg]   = hours;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000abc:	7b1b      	ldrb	r3, [r3, #12]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	79ba      	ldrb	r2, [r7, #6]
 8000ac6:	701a      	strb	r2, [r3, #0]
		RTC_mem.mem.A2_day_date_sel = 0x01;
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000aca:	7b53      	ldrb	r3, [r2, #13]
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	7353      	strb	r3, [r2, #13]

		RTC_Write(RTC_map.A2m_reg, minutes);
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000ad4:	7adb      	ldrb	r3, [r3, #11]
 8000ad6:	797a      	ldrb	r2, [r7, #5]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fd96 	bl	800060c <RTC_Write>
		RTC_Write(RTC_map.A2h_reg, hours);
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000ae2:	7b1b      	ldrb	r3, [r3, #12]
 8000ae4:	79ba      	ldrb	r2, [r7, #6]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd8f 	bl	800060c <RTC_Write>
		RTC_Read(&RTC_map.A2dd_reg, (&RTC_mem.byte)+ RTC_map.A2dd_reg);
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000af0:	7b5b      	ldrb	r3, [r3, #13]
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000af6:	4413      	add	r3, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <RTC_Set_Alarm+0x160>)
 8000afc:	f7ff fda8 	bl	8000650 <RTC_Read>
		RTC_Write(RTC_map.A2dd_reg, (&RTC_mem.byte) + RTC_map.A2dd_reg);
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000b02:	7b5b      	ldrb	r3, [r3, #13]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <RTC_Set_Alarm+0x154>)
 8000b06:	7b52      	ldrb	r2, [r2, #13]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <RTC_Set_Alarm+0x158>)
 8000b0c:	440a      	add	r2, r1
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd7a 	bl	800060c <RTC_Write>
	}
	RTC_Clear_Alarm_IT(alarm);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fdee 	bl	80006fc <RTC_Clear_Alarm_IT>
	RTC_Enable_Alarm_IT(alarm);
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fdb2 	bl	800068c <RTC_Enable_Alarm_IT>
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	20000298 	.word	0x20000298
 8000b34:	200001b8 	.word	0x200001b8
 8000b38:	200002a2 	.word	0x200002a2
 8000b3c:	200002a5 	.word	0x200002a5

08000b40 <RTC_Alarm_triggered>:

bool RTC_Alarm_triggered(uint8_t alarm)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	if(RTC_is_Alarm_triggered())
 8000b4a:	f000 f817 	bl	8000b7c <RTC_is_Alarm_triggered>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <RTC_Alarm_triggered+0x2c>
	{
		if(alarm == 0x01)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d102      	bne.n	8000b60 <RTC_Alarm_triggered+0x20>
		{
			return RTC_map.b_alarm1_triggered;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <RTC_Alarm_triggered+0x38>)
 8000b5c:	7c1b      	ldrb	r3, [r3, #16]
 8000b5e:	e007      	b.n	8000b70 <RTC_Alarm_triggered+0x30>
		}
		else if(alarm == 0x02)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d104      	bne.n	8000b70 <RTC_Alarm_triggered+0x30>
		{
			return RTC_map.b_alarm2_triggered;
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <RTC_Alarm_triggered+0x38>)
 8000b68:	7c5b      	ldrb	r3, [r3, #17]
 8000b6a:	e001      	b.n	8000b70 <RTC_Alarm_triggered+0x30>
		}
	}
	else
	{
		return false;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e7ff      	b.n	8000b70 <RTC_Alarm_triggered+0x30>
	}
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000298 	.word	0x20000298

08000b7c <RTC_is_Alarm_triggered>:

bool RTC_is_Alarm_triggered(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	RTC_Read(&RTC_map.status_reg, (&RTC_mem.byte) + RTC_map.status_reg);
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <RTC_is_Alarm_triggered+0x50>)
 8000b82:	7bdb      	ldrb	r3, [r3, #15]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <RTC_is_Alarm_triggered+0x54>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <RTC_is_Alarm_triggered+0x58>)
 8000b8e:	f7ff fd5f 	bl	8000650 <RTC_Read>
	if(b_alarm_triggered)
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <RTC_is_Alarm_triggered+0x5c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d014      	beq.n	8000bc4 <RTC_is_Alarm_triggered+0x48>
	{
		if(RTC_mem.mem.status_A1F == 1)
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <RTC_is_Alarm_triggered+0x54>)
 8000b9c:	7bdb      	ldrb	r3, [r3, #15]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <RTC_is_Alarm_triggered+0x34>
		{
			RTC_map.b_alarm1_triggered = true;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <RTC_is_Alarm_triggered+0x50>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	741a      	strb	r2, [r3, #16]
 8000bae:	e009      	b.n	8000bc4 <RTC_is_Alarm_triggered+0x48>
		}
		else if(RTC_mem.mem.status_A2F == 1)
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <RTC_is_Alarm_triggered+0x54>)
 8000bb2:	7bdb      	ldrb	r3, [r3, #15]
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <RTC_is_Alarm_triggered+0x48>
		{
			RTC_map.b_alarm2_triggered = true;
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <RTC_is_Alarm_triggered+0x50>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	745a      	strb	r2, [r3, #17]
		}
	}
	return b_alarm_triggered;
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <RTC_is_Alarm_triggered+0x5c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000298 	.word	0x20000298
 8000bd0:	200001b8 	.word	0x200001b8
 8000bd4:	200002a7 	.word	0x200002a7
 8000bd8:	2000016b 	.word	0x2000016b

08000bdc <RTC_User_Set_Time>:

void RTC_User_Set_Time(bool b_set_alarm)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	static uint8_t user_seconds;
	static uint8_t user_minutes;
	static uint8_t user_hours;

	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_seconds,strlen(Ask_seconds), 50);
 8000be6:	4861      	ldr	r0, [pc, #388]	; (8000d6c <RTC_User_Set_Time+0x190>)
 8000be8:	f7ff fafc 	bl	80001e4 <strlen>
 8000bec:	4603      	mov	r3, r0
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	2332      	movs	r3, #50	; 0x32
 8000bf2:	495e      	ldr	r1, [pc, #376]	; (8000d6c <RTC_User_Set_Time+0x190>)
 8000bf4:	485e      	ldr	r0, [pc, #376]	; (8000d70 <RTC_User_Set_Time+0x194>)
 8000bf6:	f004 fed8 	bl	80059aa <HAL_UART_Transmit>
	HAL_Delay(200);
 8000bfa:	20c8      	movs	r0, #200	; 0xc8
 8000bfc:	f000 feae 	bl	800195c <HAL_Delay>
	while(!b_message_received);
 8000c00:	bf00      	nop
 8000c02:	4b5c      	ldr	r3, [pc, #368]	; (8000d74 <RTC_User_Set_Time+0x198>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f8      	bne.n	8000c02 <RTC_User_Set_Time+0x26>
	user_seconds = HEX_LUT[ *rxData ];
 8000c10:	4b59      	ldr	r3, [pc, #356]	; (8000d78 <RTC_User_Set_Time+0x19c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <RTC_User_Set_Time+0x1a0>)
 8000c18:	5c9a      	ldrb	r2, [r3, r2]
 8000c1a:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <RTC_User_Set_Time+0x1a4>)
 8000c1c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_minutes,strlen(Ask_minutes), 50);
 8000c1e:	4859      	ldr	r0, [pc, #356]	; (8000d84 <RTC_User_Set_Time+0x1a8>)
 8000c20:	f7ff fae0 	bl	80001e4 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	4956      	ldr	r1, [pc, #344]	; (8000d84 <RTC_User_Set_Time+0x1a8>)
 8000c2c:	4850      	ldr	r0, [pc, #320]	; (8000d70 <RTC_User_Set_Time+0x194>)
 8000c2e:	f004 febc 	bl	80059aa <HAL_UART_Transmit>
	b_message_received = false;
 8000c32:	4b50      	ldr	r3, [pc, #320]	; (8000d74 <RTC_User_Set_Time+0x198>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8000c38:	20c8      	movs	r0, #200	; 0xc8
 8000c3a:	f000 fe8f 	bl	800195c <HAL_Delay>
	while(!b_message_received);
 8000c3e:	bf00      	nop
 8000c40:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <RTC_User_Set_Time+0x198>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	f083 0301 	eor.w	r3, r3, #1
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f8      	bne.n	8000c40 <RTC_User_Set_Time+0x64>
	user_minutes = HEX_LUT[ *rxData ];
 8000c4e:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <RTC_User_Set_Time+0x19c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <RTC_User_Set_Time+0x1a0>)
 8000c56:	5c9a      	ldrb	r2, [r3, r2]
 8000c58:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <RTC_User_Set_Time+0x1ac>)
 8000c5a:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2,(uint8_t*) Ask_minutes,strlen(Ask_hours), 50);
 8000c5c:	484b      	ldr	r0, [pc, #300]	; (8000d8c <RTC_User_Set_Time+0x1b0>)
 8000c5e:	f7ff fac1 	bl	80001e4 <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	2332      	movs	r3, #50	; 0x32
 8000c68:	4946      	ldr	r1, [pc, #280]	; (8000d84 <RTC_User_Set_Time+0x1a8>)
 8000c6a:	4841      	ldr	r0, [pc, #260]	; (8000d70 <RTC_User_Set_Time+0x194>)
 8000c6c:	f004 fe9d 	bl	80059aa <HAL_UART_Transmit>
	b_message_received = false;
 8000c70:	4b40      	ldr	r3, [pc, #256]	; (8000d74 <RTC_User_Set_Time+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 8000c76:	20c8      	movs	r0, #200	; 0xc8
 8000c78:	f000 fe70 	bl	800195c <HAL_Delay>
	while(!b_message_received);
 8000c7c:	bf00      	nop
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <RTC_User_Set_Time+0x198>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f8      	bne.n	8000c7e <RTC_User_Set_Time+0xa2>
	user_hours = HEX_LUT[ *rxData ];
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	; (8000d78 <RTC_User_Set_Time+0x19c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <RTC_User_Set_Time+0x1a0>)
 8000c94:	5c9a      	ldrb	r2, [r3, r2]
 8000c96:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <RTC_User_Set_Time+0x1b4>)
 8000c98:	701a      	strb	r2, [r3, #0]


	b_message_received = false;
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <RTC_User_Set_Time+0x198>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
	if(b_set_alarm)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d03b      	beq.n	8000d1e <RTC_User_Set_Time+0x142>
	{
		RTC_mem.mem.A1_hours_1s = user_hours;
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <RTC_User_Set_Time+0x1b4>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	b2d9      	uxtb	r1, r3
 8000cb0:	4a38      	ldr	r2, [pc, #224]	; (8000d94 <RTC_User_Set_Time+0x1b8>)
 8000cb2:	7a53      	ldrb	r3, [r2, #9]
 8000cb4:	f361 0303 	bfi	r3, r1, #0, #4
 8000cb8:	7253      	strb	r3, [r2, #9]
		RTC_mem.mem.A1_hours_10s = user_hours >> 4;
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <RTC_User_Set_Time+0x1b4>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2d9      	uxtb	r1, r3
 8000cc8:	4a32      	ldr	r2, [pc, #200]	; (8000d94 <RTC_User_Set_Time+0x1b8>)
 8000cca:	7a53      	ldrb	r3, [r2, #9]
 8000ccc:	f361 1304 	bfi	r3, r1, #4, #1
 8000cd0:	7253      	strb	r3, [r2, #9]

		RTC_Set_Alarm(0x01, (&RTC_mem.byte)[RTC_map.A1h_reg], user_minutes, user_seconds);
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <RTC_User_Set_Time+0x1bc>)
 8000cd4:	7a5b      	ldrb	r3, [r3, #9]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <RTC_User_Set_Time+0x1b8>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	7819      	ldrb	r1, [r3, #0]
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <RTC_User_Set_Time+0x1ac>)
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <RTC_User_Set_Time+0x1a4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fe78 	bl	80009dc <RTC_Set_Alarm>

		sprintf(txData,"Alarm Set: %d:%d:d",user_hours,user_minutes,user_seconds);
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <RTC_User_Set_Time+0x1b4>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <RTC_User_Set_Time+0x1ac>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <RTC_User_Set_Time+0x1a4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4926      	ldr	r1, [pc, #152]	; (8000d9c <RTC_User_Set_Time+0x1c0>)
 8000d02:	4827      	ldr	r0, [pc, #156]	; (8000da0 <RTC_User_Set_Time+0x1c4>)
 8000d04:	f005 ff88 	bl	8006c18 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <RTC_User_Set_Time+0x1c4>)
 8000d0a:	f7ff fa6b 	bl	80001e4 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	2332      	movs	r3, #50	; 0x32
 8000d14:	4922      	ldr	r1, [pc, #136]	; (8000da0 <RTC_User_Set_Time+0x1c4>)
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <RTC_User_Set_Time+0x194>)
 8000d18:	f004 fe47 	bl	80059aa <HAL_UART_Transmit>
		RTC_mem.mem.hours_1s = user_hours;
		RTC_mem.mem.hours_10s = user_hours >> 4;

		RTC_Set_Time( (&RTC_mem.byte)[RTC_map.hours_reg], user_minutes, user_seconds);
	}
}
 8000d1c:	e022      	b.n	8000d64 <RTC_User_Set_Time+0x188>
		RTC_mem.mem.hours_1s = user_hours;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <RTC_User_Set_Time+0x1b4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	b2d9      	uxtb	r1, r3
 8000d28:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <RTC_User_Set_Time+0x1b8>)
 8000d2a:	7893      	ldrb	r3, [r2, #2]
 8000d2c:	f361 0303 	bfi	r3, r1, #0, #4
 8000d30:	7093      	strb	r3, [r2, #2]
		RTC_mem.mem.hours_10s = user_hours >> 4;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <RTC_User_Set_Time+0x1b4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	b2d9      	uxtb	r1, r3
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <RTC_User_Set_Time+0x1b8>)
 8000d42:	7893      	ldrb	r3, [r2, #2]
 8000d44:	f361 1304 	bfi	r3, r1, #4, #1
 8000d48:	7093      	strb	r3, [r2, #2]
		RTC_Set_Time( (&RTC_mem.byte)[RTC_map.hours_reg], user_minutes, user_seconds);
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <RTC_User_Set_Time+0x1bc>)
 8000d4c:	789b      	ldrb	r3, [r3, #2]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <RTC_User_Set_Time+0x1b8>)
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <RTC_User_Set_Time+0x1ac>)
 8000d58:	7811      	ldrb	r1, [r2, #0]
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <RTC_User_Set_Time+0x1a4>)
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fdd4 	bl	800090c <RTC_Set_Time>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000254 	.word	0x20000254
 8000d74:	20000251 	.word	0x20000251
 8000d78:	20000184 	.word	0x20000184
 8000d7c:	2000009c 	.word	0x2000009c
 8000d80:	20000172 	.word	0x20000172
 8000d84:	20000034 	.word	0x20000034
 8000d88:	20000173 	.word	0x20000173
 8000d8c:	20000068 	.word	0x20000068
 8000d90:	20000174 	.word	0x20000174
 8000d94:	200001b8 	.word	0x200001b8
 8000d98:	20000298 	.word	0x20000298
 8000d9c:	08007498 	.word	0x08007498
 8000da0:	200001c8 	.word	0x200001c8

08000da4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000dae:	2102      	movs	r1, #2
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000db2:	f001 fcb5 	bl	8002720 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	  b_alarm_triggered = true;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x40>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000dc6:	f001 fcab 	bl	8002720 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x32>
  {
	  b_button_pressed = true;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_GPIO_EXTI_Callback+0x48>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40020800 	.word	0x40020800
 8000de4:	2000016b 	.word	0x2000016b
 8000de8:	40020000 	.word	0x40020000
 8000dec:	20000250 	.word	0x20000250

08000df0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

  HAL_UART_Transmit(&huart2,(uint8_t*) rxData,strlen(rxData), 50);
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <HAL_UART_RxCpltCallback+0x2c>)
 8000dfa:	f7ff f9f3 	bl	80001e4 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	2332      	movs	r3, #50	; 0x32
 8000e04:	4905      	ldr	r1, [pc, #20]	; (8000e1c <HAL_UART_RxCpltCallback+0x2c>)
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <HAL_UART_RxCpltCallback+0x30>)
 8000e08:	f004 fdcf 	bl	80059aa <HAL_UART_Transmit>

  b_message_received = true;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_UART_RxCpltCallback+0x34>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000184 	.word	0x20000184
 8000e20:	20000254 	.word	0x20000254
 8000e24:	20000251 	.word	0x20000251

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 fd1c 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f8c0 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f000 f9dc 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e48:	f000 f99c 	bl	8001184 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e4c:	f000 f918 	bl	8001080 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e50:	f000 f944 	bl	80010dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 f96c 	bl	8001130 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  *txData = "Hello \n";
 8000e58:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <main+0x16c>)
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <main+0x170>)
 8000e5e:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxData, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	494e      	ldr	r1, [pc, #312]	; (8000f9c <main+0x174>)
 8000e64:	484e      	ldr	r0, [pc, #312]	; (8000fa0 <main+0x178>)
 8000e66:	f004 fe32 	bl	8005ace <HAL_UART_Receive_DMA>

  HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000e6a:	484b      	ldr	r0, [pc, #300]	; (8000f98 <main+0x170>)
 8000e6c:	f7ff f9ba 	bl	80001e4 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	2332      	movs	r3, #50	; 0x32
 8000e76:	4948      	ldr	r1, [pc, #288]	; (8000f98 <main+0x170>)
 8000e78:	4849      	ldr	r0, [pc, #292]	; (8000fa0 <main+0x178>)
 8000e7a:	f004 fd96 	bl	80059aa <HAL_UART_Transmit>



  //Time settings
  RTC_INIT_TIME();
 8000e7e:	f7ff fb8b 	bl	8000598 <RTC_INIT_TIME>

  RTC_Clear_Alarm_IT(alarm[0]);
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <main+0x17c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc38 	bl	80006fc <RTC_Clear_Alarm_IT>

  //Set time
  RTC_Set_Time(0x65, 0x00, 0x00);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2065      	movs	r0, #101	; 0x65
 8000e92:	f7ff fd3b 	bl	800090c <RTC_Set_Time>
  RTC_Day_Date(0x01, 0x20);
 8000e96:	2120      	movs	r1, #32
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff fd73 	bl	8000984 <RTC_Day_Date>

  //Alarm settings
  RTC_Set_Alarm(alarm[0], 0x65, 0x00, 0x10);
 8000e9e:	4b41      	ldr	r3, [pc, #260]	; (8000fa4 <main+0x17c>)
 8000ea0:	7818      	ldrb	r0, [r3, #0]
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2165      	movs	r1, #101	; 0x65
 8000ea8:	f7ff fd98 	bl	80009dc <RTC_Set_Alarm>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Read time
	  RTC_Display_Time();
 8000eac:	f7ff fc88 	bl	80007c0 <RTC_Display_Time>

	HAL_Delay(30);
 8000eb0:	201e      	movs	r0, #30
 8000eb2:	f000 fd53 	bl	800195c <HAL_Delay>

	if(b_button_pressed)
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <main+0x180>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d04a      	beq.n	8000f54 <main+0x12c>
	{
		HAL_Delay(500);
 8000ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec2:	f000 fd4b 	bl	800195c <HAL_Delay>
		b_button_pressed = false;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <main+0x180>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]

		sprintf(txData,"Would you like to set alarm (1 = Yes/0 = No)?");
 8000ecc:	4937      	ldr	r1, [pc, #220]	; (8000fac <main+0x184>)
 8000ece:	4832      	ldr	r0, [pc, #200]	; (8000f98 <main+0x170>)
 8000ed0:	f005 fea2 	bl	8006c18 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000ed4:	4830      	ldr	r0, [pc, #192]	; (8000f98 <main+0x170>)
 8000ed6:	f7ff f985 	bl	80001e4 <strlen>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	2332      	movs	r3, #50	; 0x32
 8000ee0:	492d      	ldr	r1, [pc, #180]	; (8000f98 <main+0x170>)
 8000ee2:	482f      	ldr	r0, [pc, #188]	; (8000fa0 <main+0x178>)
 8000ee4:	f004 fd61 	bl	80059aa <HAL_UART_Transmit>
		while(!b_message_received);
 8000ee8:	bf00      	nop
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <main+0x188>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f083 0301 	eor.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f8      	bne.n	8000eea <main+0xc2>
		b_message_received = false;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <main+0x188>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
		if(strcmp(rxData,"0") != 0)
 8000efe:	492d      	ldr	r1, [pc, #180]	; (8000fb4 <main+0x18c>)
 8000f00:	4826      	ldr	r0, [pc, #152]	; (8000f9c <main+0x174>)
 8000f02:	f7ff f965 	bl	80001d0 <strcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d011      	beq.n	8000f30 <main+0x108>
		{
			sprintf(txData,"Setting Alarm\n");
 8000f0c:	492a      	ldr	r1, [pc, #168]	; (8000fb8 <main+0x190>)
 8000f0e:	4822      	ldr	r0, [pc, #136]	; (8000f98 <main+0x170>)
 8000f10:	f005 fe82 	bl	8006c18 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <main+0x170>)
 8000f16:	f7ff f965 	bl	80001e4 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	2332      	movs	r3, #50	; 0x32
 8000f20:	491d      	ldr	r1, [pc, #116]	; (8000f98 <main+0x170>)
 8000f22:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <main+0x178>)
 8000f24:	f004 fd41 	bl	80059aa <HAL_UART_Transmit>
			RTC_User_Set_Time(true);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fe57 	bl	8000bdc <RTC_User_Set_Time>
 8000f2e:	e017      	b.n	8000f60 <main+0x138>
		}
		else
		{
			sprintf(txData,"Setting Time\n");
 8000f30:	4922      	ldr	r1, [pc, #136]	; (8000fbc <main+0x194>)
 8000f32:	4819      	ldr	r0, [pc, #100]	; (8000f98 <main+0x170>)
 8000f34:	f005 fe70 	bl	8006c18 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) txData,strlen(txData), 50);
 8000f38:	4817      	ldr	r0, [pc, #92]	; (8000f98 <main+0x170>)
 8000f3a:	f7ff f953 	bl	80001e4 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	2332      	movs	r3, #50	; 0x32
 8000f44:	4914      	ldr	r1, [pc, #80]	; (8000f98 <main+0x170>)
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <main+0x178>)
 8000f48:	f004 fd2f 	bl	80059aa <HAL_UART_Transmit>
			RTC_User_Set_Time(false);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fe45 	bl	8000bdc <RTC_User_Set_Time>
 8000f52:	e005      	b.n	8000f60 <main+0x138>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5a:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <main+0x198>)
 8000f5c:	f001 fbf8 	bl	8002750 <HAL_GPIO_WritePin>
	}


	if(RTC_Alarm_triggered(alarm[0]))
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <main+0x17c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fdeb 	bl	8000b40 <RTC_Alarm_triggered>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d09d      	beq.n	8000eac <main+0x84>
	{
		RTC_Display_Time();
 8000f70:	f7ff fc26 	bl	80007c0 <RTC_Display_Time>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <main+0x198>)
 8000f7c:	f001 fbe8 	bl	8002750 <HAL_GPIO_WritePin>
		RTC_Clear_Alarm_IT(alarm[0]);
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <main+0x17c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fbb9 	bl	80006fc <RTC_Clear_Alarm_IT>
		HAL_Delay(1000);
 8000f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8e:	f000 fce5 	bl	800195c <HAL_Delay>
	  RTC_Display_Time();
 8000f92:	e78b      	b.n	8000eac <main+0x84>
 8000f94:	080074ac 	.word	0x080074ac
 8000f98:	200001c8 	.word	0x200001c8
 8000f9c:	20000184 	.word	0x20000184
 8000fa0:	20000254 	.word	0x20000254
 8000fa4:	200000d8 	.word	0x200000d8
 8000fa8:	20000250 	.word	0x20000250
 8000fac:	080074b4 	.word	0x080074b4
 8000fb0:	20000251 	.word	0x20000251
 8000fb4:	080074e4 	.word	0x080074e4
 8000fb8:	080074e8 	.word	0x080074e8
 8000fbc:	080074f8 	.word	0x080074f8
 8000fc0:	40020c00 	.word	0x40020c00

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fe18 	bl	8006c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xb4>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xb4>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xb4>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <SystemClock_Config+0xb8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <SystemClock_Config+0xb8>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <SystemClock_Config+0xb8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f823 	bl	8005080 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001040:	f000 f980 	bl	8001344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fa86 	bl	8005570 <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800106a:	f000 f96b 	bl	8001344 <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3750      	adds	r7, #80	; 0x50
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C1_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_I2C1_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010be:	f001 fb79 	bl	80027b4 <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 f93c 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200001fc 	.word	0x200001fc
 80010d4:	40005400 	.word	0x40005400
 80010d8:	000186a0 	.word	0x000186a0

080010dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_USART1_UART_Init+0x50>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART1_UART_Init+0x4c>)
 8001114:	f004 fbfc 	bl	8005910 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111e:	f000 f911 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000036c 	.word	0x2000036c
 800112c:	40011000 	.word	0x40011000

08001130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_USART2_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_USART2_UART_Init+0x4c>)
 800113c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USART2_UART_Init+0x4c>)
 8001168:	f004 fbd2 	bl	8005910 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 f8e7 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000254 	.word	0x20000254
 8001180:	40004400 	.word	0x40004400

08001184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_DMA_Init+0x78>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <MX_DMA_Init+0x78>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_DMA_Init+0x78>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_DMA_Init+0x78>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MX_DMA_Init+0x78>)
 80011b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_DMA_Init+0x78>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	200b      	movs	r0, #11
 80011c8:	f000 fcc7 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011cc:	200b      	movs	r0, #11
 80011ce:	f000 fce0 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2010      	movs	r0, #16
 80011d8:	f000 fcbf 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011dc:	2010      	movs	r0, #16
 80011de:	f000 fcd8 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	203a      	movs	r0, #58	; 0x3a
 80011e8:	f000 fcb7 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011ec:	203a      	movs	r0, #58	; 0x3a
 80011ee:	f000 fcd0 	bl	8001b92 <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b46      	ldr	r3, [pc, #280]	; (8001334 <MX_GPIO_Init+0x134>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a45      	ldr	r2, [pc, #276]	; (8001334 <MX_GPIO_Init+0x134>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b43      	ldr	r3, [pc, #268]	; (8001334 <MX_GPIO_Init+0x134>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <MX_GPIO_Init+0x134>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a3e      	ldr	r2, [pc, #248]	; (8001334 <MX_GPIO_Init+0x134>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <MX_GPIO_Init+0x134>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <MX_GPIO_Init+0x134>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a37      	ldr	r2, [pc, #220]	; (8001334 <MX_GPIO_Init+0x134>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <MX_GPIO_Init+0x134>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <MX_GPIO_Init+0x134>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a30      	ldr	r2, [pc, #192]	; (8001334 <MX_GPIO_Init+0x134>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_GPIO_Init+0x134>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	482b      	ldr	r0, [pc, #172]	; (8001338 <MX_GPIO_Init+0x138>)
 800128c:	f001 fa60 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001296:	4829      	ldr	r0, [pc, #164]	; (800133c <MX_GPIO_Init+0x13c>)
 8001298:	f001 fa5a 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4823      	ldr	r0, [pc, #140]	; (8001340 <MX_GPIO_Init+0x140>)
 80012b2:	f001 f899 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b6:	2301      	movs	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	481b      	ldr	r0, [pc, #108]	; (8001338 <MX_GPIO_Init+0x138>)
 80012cc:	f001 f88c 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012d0:	2320      	movs	r3, #32
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <MX_GPIO_Init+0x138>)
 80012e8:	f001 f87e 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_GPIO_Init+0x13c>)
 8001306:	f001 f86f 	bl	80023e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2006      	movs	r0, #6
 8001310:	f000 fc23 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001314:	2006      	movs	r0, #6
 8001316:	f000 fc3c 	bl	8001b92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2007      	movs	r0, #7
 8001320:	f000 fc1b 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001324:	2007      	movs	r0, #7
 8001326:	f000 fc34 	bl	8001b92 <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020c00 	.word	0x40020c00
 8001340:	40020800 	.word	0x40020800

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_MspInit+0x4c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <HAL_I2C_MspInit+0x100>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d16a      	bne.n	8001498 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_I2C_MspInit+0x104>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a36      	ldr	r2, [pc, #216]	; (80014a4 <HAL_I2C_MspInit+0x104>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_I2C_MspInit+0x104>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013de:	23c0      	movs	r3, #192	; 0xc0
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	2312      	movs	r3, #18
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ee:	2304      	movs	r3, #4
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	482b      	ldr	r0, [pc, #172]	; (80014a8 <HAL_I2C_MspInit+0x108>)
 80013fa:	f000 fff5 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_I2C_MspInit+0x104>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <HAL_I2C_MspInit+0x104>)
 8001408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <HAL_I2C_MspInit+0x104>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_I2C_MspInit+0x110>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001426:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 800144a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 800145e:	f000 fbb3 	bl	8001bc8 <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001468:	f7ff ff6c 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_I2C_MspInit+0x10c>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	201f      	movs	r0, #31
 800147e:	f000 fb6c 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001482:	201f      	movs	r0, #31
 8001484:	f000 fb85 	bl	8001b92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2020      	movs	r0, #32
 800148e:	f000 fb64 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001492:	2020      	movs	r0, #32
 8001494:	f000 fb7d 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400
 80014ac:	200003b0 	.word	0x200003b0
 80014b0:	40026010 	.word	0x40026010

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a69      	ldr	r2, [pc, #420]	; (8001678 <HAL_UART_MspInit+0x1c4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d164      	bne.n	80015a0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a67      	ldr	r2, [pc, #412]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80014e0:	f043 0310 	orr.w	r3, r3, #16
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a60      	ldr	r2, [pc, #384]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b5e      	ldr	r3, [pc, #376]	; (800167c <HAL_UART_MspInit+0x1c8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800150e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001520:	2307      	movs	r3, #7
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4855      	ldr	r0, [pc, #340]	; (8001680 <HAL_UART_MspInit+0x1cc>)
 800152c:	f000 ff5c 	bl	80023e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001530:	4b54      	ldr	r3, [pc, #336]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001532:	4a55      	ldr	r2, [pc, #340]	; (8001688 <HAL_UART_MspInit+0x1d4>)
 8001534:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001536:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800153c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153e:	4b51      	ldr	r3, [pc, #324]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154a:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 800154c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001550:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001558:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156c:	4b45      	ldr	r3, [pc, #276]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001572:	4844      	ldr	r0, [pc, #272]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001574:	f000 fb28 	bl	8001bc8 <HAL_DMA_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800157e:	f7ff fee1 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 8001586:	639a      	str	r2, [r3, #56]	; 0x38
 8001588:	4a3e      	ldr	r2, [pc, #248]	; (8001684 <HAL_UART_MspInit+0x1d0>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2025      	movs	r0, #37	; 0x25
 8001594:	f000 fae1 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001598:	2025      	movs	r0, #37	; 0x25
 800159a:	f000 fafa 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800159e:	e067      	b.n	8001670 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a39      	ldr	r2, [pc, #228]	; (800168c <HAL_UART_MspInit+0x1d8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d162      	bne.n	8001670 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a2b      	ldr	r2, [pc, #172]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_UART_MspInit+0x1c8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e2:	230c      	movs	r3, #12
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f2:	2307      	movs	r3, #7
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4820      	ldr	r0, [pc, #128]	; (8001680 <HAL_UART_MspInit+0x1cc>)
 80015fe:	f000 fef3 	bl	80023e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001604:	4a23      	ldr	r2, [pc, #140]	; (8001694 <HAL_UART_MspInit+0x1e0>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 800160a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 800161e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001622:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001636:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001644:	4812      	ldr	r0, [pc, #72]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001646:	f000 fabf 	bl	8001bc8 <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001650:	f7ff fe78 	bl	8001344 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
 800165a:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_UART_MspInit+0x1dc>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2026      	movs	r0, #38	; 0x26
 8001666:	f000 fa78 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800166a:	2026      	movs	r0, #38	; 0x26
 800166c:	f000 fa91 	bl	8001b92 <HAL_NVIC_EnableIRQ>
}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	; 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40011000 	.word	0x40011000
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	2000030c 	.word	0x2000030c
 8001688:	40026440 	.word	0x40026440
 800168c:	40004400 	.word	0x40004400
 8001690:	200002ac 	.word	0x200002ac
 8001694:	40026088 	.word	0x40026088

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800169c:	e7fe      	b.n	800169c <NMI_Handler+0x4>

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 f91a 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f001 f847 	bl	8002784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}

080016fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80016fe:	2002      	movs	r0, #2
 8001700:	f001 f840 	bl	8002784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA1_Stream0_IRQHandler+0x10>)
 800170e:	f000 fbf3 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200003b0 	.word	0x200003b0

0800171c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Stream5_IRQHandler+0x10>)
 8001722:	f000 fbe9 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002ac 	.word	0x200002ac

08001730 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <I2C1_EV_IRQHandler+0x10>)
 8001736:	f001 fca5 	bl	8003084 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200001fc 	.word	0x200001fc

08001744 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <I2C1_ER_IRQHandler+0x10>)
 800174a:	f001 fe0c 	bl	8003366 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001fc 	.word	0x200001fc

08001758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <USART1_IRQHandler+0x10>)
 800175e:	f004 f9e7 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000036c 	.word	0x2000036c

0800176c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <USART2_IRQHandler+0x10>)
 8001772:	f004 f9dd 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000254 	.word	0x20000254

08001780 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA2_Stream2_IRQHandler+0x10>)
 8001786:	f000 fbb7 	bl	8001ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000030c 	.word	0x2000030c

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f005 f9f6 	bl	8006bb4 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20020000 	.word	0x20020000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	20000178 	.word	0x20000178
 80017fc:	20000428 	.word	0x20000428

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001840:	4c0b      	ldr	r4, [pc, #44]	; (8001870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd7 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f005 f9b5 	bl	8006bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fae7 	bl	8000e28 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800185c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001868:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 800186c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001870:	20000424 	.word	0x20000424

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f94f 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fd50 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f967 	bl	8001bae <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f000 f92f 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200000dc 	.word	0x200000dc
 8001914:	200000e4 	.word	0x200000e4
 8001918:	200000e0 	.word	0x200000e0

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200000e4 	.word	0x200000e4
 8001940:	20000410 	.word	0x20000410

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000410 	.word	0x20000410

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff ffee 	bl	8001944 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffde 	bl	8001944 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000e4 	.word	0x200000e4

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff29 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff3e 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff31 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff feb6 	bl	8001944 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e099      	b.n	8001d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c04:	e00f      	b.n	8001c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c06:	f7ff fe9d 	bl	8001944 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d908      	bls.n	8001c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e078      	b.n	8001d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e8      	bne.n	8001c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <HAL_DMA_Init+0x158>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d107      	bne.n	8001c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f023 0307 	bic.w	r3, r3, #7
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d117      	bne.n	8001cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fb0f 	bl	80022f0 <DMA_CheckFifoParam>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e016      	b.n	8001d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fac6 	bl	8002284 <DMA_CalcBaseAndBitshift>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	223f      	movs	r2, #63	; 0x3f
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	f010803f 	.word	0xf010803f

08001d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_DMA_Start_IT+0x26>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e040      	b.n	8001dcc <HAL_DMA_Start_IT+0xa8>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12f      	bne.n	8001dbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fa58 	bl	8002228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0216 	orr.w	r2, r2, #22
 8001d92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0208 	orr.w	r2, r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e005      	b.n	8001dca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001de2:	f7ff fdaf 	bl	8001944 <HAL_GetTick>
 8001de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d008      	beq.n	8001e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e052      	b.n	8001eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0216 	bic.w	r2, r2, #22
 8001e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_DMA_Abort+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0208 	bic.w	r2, r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e56:	e013      	b.n	8001e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e58:	f7ff fd74 	bl	8001944 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d90c      	bls.n	8001e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e015      	b.n	8001eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e4      	bne.n	8001e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	223f      	movs	r2, #63	; 0x3f
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00c      	b.n	8001eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f04:	4b92      	ldr	r3, [pc, #584]	; (8002150 <HAL_DMA_IRQHandler+0x258>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a92      	ldr	r2, [pc, #584]	; (8002154 <HAL_DMA_IRQHandler+0x25c>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2208      	movs	r2, #8
 8001f24:	409a      	lsls	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01a      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f50:	2208      	movs	r2, #8
 8001f52:	409a      	lsls	r2, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	2201      	movs	r2, #1
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2201      	movs	r2, #1
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f043 0202 	orr.w	r2, r3, #2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d043      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d03c      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d018      	beq.n	800203a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d024      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
 8002026:	e01f      	b.n	8002068 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
 8002038:	e016      	b.n	8002068 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0208 	bic.w	r2, r2, #8
 8002056:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2220      	movs	r2, #32
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 808e 	beq.w	8002196 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8086 	beq.w	8002196 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2220      	movs	r2, #32
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d136      	bne.n	8002110 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0216 	bic.w	r2, r2, #22
 80020b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x1da>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0208 	bic.w	r2, r2, #8
 80020e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	223f      	movs	r2, #63	; 0x3f
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002102:	2b00      	cmp	r3, #0
 8002104:	d07d      	beq.n	8002202 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
        }
        return;
 800210e:	e078      	b.n	8002202 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01c      	beq.n	8002158 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d108      	bne.n	800213e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	2b00      	cmp	r3, #0
 8002132:	d030      	beq.n	8002196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
 800213c:	e02b      	b.n	8002196 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d027      	beq.n	8002196 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
 800214e:	e022      	b.n	8002196 <HAL_DMA_IRQHandler+0x29e>
 8002150:	200000dc 	.word	0x200000dc
 8002154:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0210 	bic.w	r2, r2, #16
 8002174:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	2b00      	cmp	r3, #0
 800219c:	d032      	beq.n	8002204 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3301      	adds	r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d307      	bcc.n	80021de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f2      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x2ca>
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021de:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
 8002200:	e000      	b.n	8002204 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002202:	bf00      	nop
    }
  }
}
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop

0800220c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800221a:	b2db      	uxtb	r3, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b40      	cmp	r3, #64	; 0x40
 8002254:	d108      	bne.n	8002268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002266:	e007      	b.n	8002278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3b10      	subs	r3, #16
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800229e:	4a13      	ldr	r2, [pc, #76]	; (80022ec <DMA_CalcBaseAndBitshift+0x68>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d909      	bls.n	80022c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	1d1a      	adds	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	; 0x58
 80022c4:	e007      	b.n	80022d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	aaaaaaab 	.word	0xaaaaaaab
 80022ec:	08007520 	.word	0x08007520

080022f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <DMA_CheckFifoParam+0x5a>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d856      	bhi.n	80023be <DMA_CheckFifoParam+0xce>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <DMA_CheckFifoParam+0x28>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	0800233b 	.word	0x0800233b
 8002320:	08002329 	.word	0x08002329
 8002324:	080023bf 	.word	0x080023bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d046      	beq.n	80023c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e043      	b.n	80023c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002342:	d140      	bne.n	80023c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e03d      	b.n	80023c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002352:	d121      	bne.n	8002398 <DMA_CheckFifoParam+0xa8>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d837      	bhi.n	80023ca <DMA_CheckFifoParam+0xda>
 800235a:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <DMA_CheckFifoParam+0x70>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002371 	.word	0x08002371
 8002364:	08002377 	.word	0x08002377
 8002368:	08002371 	.word	0x08002371
 800236c:	08002389 	.word	0x08002389
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e030      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d025      	beq.n	80023ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002386:	e022      	b.n	80023ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002396:	e01c      	b.n	80023d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d903      	bls.n	80023a6 <DMA_CheckFifoParam+0xb6>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d003      	beq.n	80023ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a4:	e018      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
      break;
 80023aa:	e015      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e00b      	b.n	80023d6 <DMA_CheckFifoParam+0xe6>
      break;
 80023be:	bf00      	nop
 80023c0:	e00a      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c2:	bf00      	nop
 80023c4:	e008      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e006      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e004      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e002      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023d2:	bf00      	nop
 80023d4:	e000      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
    }
  } 
  
  return status; 
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e16b      	b.n	80026dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 815a 	bne.w	80026d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80b4 	beq.w	80026d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b60      	ldr	r3, [pc, #384]	; (80026f4 <HAL_GPIO_Init+0x30c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a5f      	ldr	r2, [pc, #380]	; (80026f4 <HAL_GPIO_Init+0x30c>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <HAL_GPIO_Init+0x30c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a5b      	ldr	r2, [pc, #364]	; (80026f8 <HAL_GPIO_Init+0x310>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x314>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02b      	beq.n	800260e <HAL_GPIO_Init+0x226>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_GPIO_Init+0x318>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d025      	beq.n	800260a <HAL_GPIO_Init+0x222>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_GPIO_Init+0x31c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01f      	beq.n	8002606 <HAL_GPIO_Init+0x21e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4f      	ldr	r2, [pc, #316]	; (8002708 <HAL_GPIO_Init+0x320>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d019      	beq.n	8002602 <HAL_GPIO_Init+0x21a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_GPIO_Init+0x324>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_GPIO_Init+0x216>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <HAL_GPIO_Init+0x328>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00d      	beq.n	80025fa <HAL_GPIO_Init+0x212>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <HAL_GPIO_Init+0x32c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <HAL_GPIO_Init+0x20e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4b      	ldr	r2, [pc, #300]	; (8002718 <HAL_GPIO_Init+0x330>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_GPIO_Init+0x20a>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00e      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e00c      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00a      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025fa:	2305      	movs	r3, #5
 80025fc:	e008      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025fe:	2304      	movs	r3, #4
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x228>
 8002602:	2303      	movs	r3, #3
 8002604:	e004      	b.n	8002610 <HAL_GPIO_Init+0x228>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <HAL_GPIO_Init+0x228>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_GPIO_Init+0x228>
 800260e:	2300      	movs	r3, #0
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f002 0203 	and.w	r2, r2, #3
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	4093      	lsls	r3, r2
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002620:	4935      	ldr	r1, [pc, #212]	; (80026f8 <HAL_GPIO_Init+0x310>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_GPIO_Init+0x334>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002652:	4a32      	ldr	r2, [pc, #200]	; (800271c <HAL_GPIO_Init+0x334>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002658:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_GPIO_Init+0x334>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_GPIO_Init+0x334>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_GPIO_Init+0x334>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_GPIO_Init+0x334>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_GPIO_Init+0x334>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <HAL_GPIO_Init+0x334>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	f67f ae90 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40013800 	.word	0x40013800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400
 8002704:	40020800 	.word	0x40020800
 8002708:	40020c00 	.word	0x40020c00
 800270c:	40021000 	.word	0x40021000
 8002710:	40021400 	.word	0x40021400
 8002714:	40021800 	.word	0x40021800
 8002718:	40021c00 	.word	0x40021c00
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e001      	b.n	8002742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fafe 	bl	8000da4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40013c00 	.word	0x40013c00

080027b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e12b      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fde0 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002818:	f003 f852 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 800281c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a81      	ldr	r2, [pc, #516]	; (8002a28 <HAL_I2C_Init+0x274>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d807      	bhi.n	8002838 <HAL_I2C_Init+0x84>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a80      	ldr	r2, [pc, #512]	; (8002a2c <HAL_I2C_Init+0x278>)
 800282c:	4293      	cmp	r3, r2
 800282e:	bf94      	ite	ls
 8002830:	2301      	movls	r3, #1
 8002832:	2300      	movhi	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e006      	b.n	8002846 <HAL_I2C_Init+0x92>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a7d      	ldr	r2, [pc, #500]	; (8002a30 <HAL_I2C_Init+0x27c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0e7      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a78      	ldr	r2, [pc, #480]	; (8002a34 <HAL_I2C_Init+0x280>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a6a      	ldr	r2, [pc, #424]	; (8002a28 <HAL_I2C_Init+0x274>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d802      	bhi.n	8002888 <HAL_I2C_Init+0xd4>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	e009      	b.n	800289c <HAL_I2C_Init+0xe8>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_I2C_Init+0x284>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	3301      	adds	r3, #1
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	495c      	ldr	r1, [pc, #368]	; (8002a28 <HAL_I2C_Init+0x274>)
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d819      	bhi.n	80028f0 <HAL_I2C_Init+0x13c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e59      	subs	r1, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ca:	1c59      	adds	r1, r3, #1
 80028cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028d0:	400b      	ands	r3, r1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_I2C_Init+0x138>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e59      	subs	r1, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	e051      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e04f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <HAL_I2C_Init+0x168>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e012      	b.n	8002942 <HAL_I2C_Init+0x18e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e58      	subs	r0, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	0099      	lsls	r1, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x196>
 8002946:	2301      	movs	r3, #1
 8002948:	e022      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10e      	bne.n	8002970 <HAL_I2C_Init+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e58      	subs	r0, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	440b      	add	r3, r1
 8002960:	fbb0 f3f3 	udiv	r3, r0, r3
 8002964:	3301      	adds	r3, #1
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	0099      	lsls	r1, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	6809      	ldr	r1, [r1, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6911      	ldr	r1, [r2, #16]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	000186a0 	.word	0x000186a0
 8002a2c:	001e847f 	.word	0x001e847f
 8002a30:	003d08ff 	.word	0x003d08ff
 8002a34:	431bde83 	.word	0x431bde83
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	817b      	strh	r3, [r7, #10]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7fe ff78 	bl	8001944 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	f040 80e0 	bne.w	8002c24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2319      	movs	r3, #25
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4970      	ldr	r1, [pc, #448]	; (8002c30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f002 f8dc 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0d3      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_I2C_Master_Transmit+0x50>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e0cc      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d007      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2210      	movs	r2, #16
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a50      	ldr	r2, [pc, #320]	; (8002c34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f001 fe9e 	bl	800483c <I2C_MasterRequestWrite>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08d      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b20:	e066      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	6a39      	ldr	r1, [r7, #32]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f002 f956 	bl	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d107      	bne.n	8002b4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06b      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_I2C_Master_Transmit+0x188>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d017      	beq.n	8002bc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6a39      	ldr	r1, [r7, #32]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f002 f946 	bl	8004e5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d107      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e01a      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d194      	bne.n	8002b22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	00100002 	.word	0x00100002
 8002c34:	ffff0000 	.word	0xffff0000

08002c38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	; 0x30
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7fe fe7a 	bl	8001944 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	f040 820b 	bne.w	8003076 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2319      	movs	r3, #25
 8002c66:	2201      	movs	r2, #1
 8002c68:	497c      	ldr	r1, [pc, #496]	; (8002e5c <HAL_I2C_Master_Receive+0x224>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f001 ffde 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	e1fe      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_I2C_Master_Receive+0x50>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e1f7      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d007      	beq.n	8002cae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2222      	movs	r2, #34	; 0x22
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	893a      	ldrh	r2, [r7, #8]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a5c      	ldr	r2, [pc, #368]	; (8002e60 <HAL_I2C_Master_Receive+0x228>)
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f001 fe22 	bl	8004940 <I2C_MasterRequestRead>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e1b8      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	623b      	str	r3, [r7, #32]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e18c      	b.n	8003050 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d11b      	bne.n	8002d76 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e16c      	b.n	8003050 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d11b      	bne.n	8002db6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	e14c      	b.n	8003050 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ddc:	e138      	b.n	8003050 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	f200 80f1 	bhi.w	8002fca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d123      	bne.n	8002e38 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f002 f8a3 	bl	8004f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e139      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e36:	e10b      	b.n	8003050 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d14e      	bne.n	8002ede <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	2200      	movs	r2, #0
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <HAL_I2C_Master_Receive+0x22c>)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f001 feee 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e10e      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
 8002e5a:	bf00      	nop
 8002e5c:	00100002 	.word	0x00100002
 8002e60:	ffff0000 	.word	0xffff0000
 8002e64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002edc:	e0b8      	b.n	8003050 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4966      	ldr	r1, [pc, #408]	; (8003080 <HAL_I2C_Master_Receive+0x448>)
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f001 fe9f 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0bf      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	2200      	movs	r2, #0
 8002f42:	494f      	ldr	r1, [pc, #316]	; (8003080 <HAL_I2C_Master_Receive+0x448>)
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f001 fe71 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e091      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc8:	e042      	b.n	8003050 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f001 ffb6 	bl	8004f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e04c      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d118      	bne.n	8003050 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f aec2 	bne.w	8002dde <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	00010004 	.word	0x00010004

08003084 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d003      	beq.n	80030bc <HAL_I2C_EV_IRQHandler+0x38>
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	f040 80c1 	bne.w	800323e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030dc:	d003      	beq.n	80030e6 <HAL_I2C_EV_IRQHandler+0x62>
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_EV_IRQHandler+0x66>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_I2C_EV_IRQHandler+0x68>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f000 8132 	beq.w	8003356 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00c      	beq.n	8003116 <HAL_I2C_EV_IRQHandler+0x92>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	0a5b      	lsrs	r3, r3, #9
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f001 ff9e 	bl	800504a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fd79 	bl	8003c06 <I2C_Master_SB>
 8003114:	e092      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_I2C_EV_IRQHandler+0xb2>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	0a5b      	lsrs	r3, r3, #9
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fdef 	bl	8003d12 <I2C_Master_ADD10>
 8003134:	e082      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0xd2>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	0a5b      	lsrs	r3, r3, #9
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fe09 	bl	8003d66 <I2C_Master_ADDR>
 8003154:	e072      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03b      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003170:	f000 80f3 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	09db      	lsrs	r3, r3, #7
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9f3 	bl	8003584 <I2C_MasterTransmit_TXE>
 800319e:	e04d      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80d6 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	0a5b      	lsrs	r3, r3, #9
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80cf 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	2b21      	cmp	r3, #33	; 0x21
 80031c0:	d103      	bne.n	80031ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa7a 	bl	80036bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c8:	e0c7      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	f040 80c4 	bne.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fae8 	bl	80037a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d8:	e0bf      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e8:	f000 80b7 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00f      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x194>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x194>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fb5d 	bl	80038d0 <I2C_MasterReceive_RXNE>
 8003216:	e011      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 809a 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	0a5b      	lsrs	r3, r3, #9
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8093 	beq.w	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fbfc 	bl	8003a32 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323a:	e08e      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
 800323c:	e08d      	b.n	800335a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	e007      	b.n	8003260 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x20e>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	0a5b      	lsrs	r3, r3, #9
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003288:	69b9      	ldr	r1, [r7, #24]
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 ffba 	bl	8004204 <I2C_Slave_ADDR>
 8003290:	e066      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_I2C_EV_IRQHandler+0x22e>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	0a5b      	lsrs	r3, r3, #9
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fff4 	bl	8004298 <I2C_Slave_STOPF>
 80032b0:	e056      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032b2:	7bbb      	ldrb	r3, [r7, #14]
 80032b4:	2b21      	cmp	r3, #33	; 0x21
 80032b6:	d002      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0x23a>
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	2b29      	cmp	r3, #41	; 0x29
 80032bc:	d125      	bne.n	800330a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	09db      	lsrs	r3, r3, #7
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00f      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x266>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	0a9b      	lsrs	r3, r3, #10
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x266>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fed0 	bl	8004088 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e8:	e039      	b.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d033      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	0a5b      	lsrs	r3, r3, #9
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02d      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fefd 	bl	8004102 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003308:	e029      	b.n	800335e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	0a9b      	lsrs	r3, r3, #10
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ff08 	bl	8004144 <I2C_SlaveReceive_RXNE>
 8003334:	e014      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00e      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	0a5b      	lsrs	r3, r3, #9
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 ff36 	bl	80041c0 <I2C_SlaveReceive_BTF>
 8003354:	e004      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b08a      	sub	sp, #40	; 0x28
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003388:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <HAL_I2C_ER_IRQHandler+0x4e>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <HAL_I2C_ER_IRQHandler+0x78>
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80033dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	0a9b      	lsrs	r3, r3, #10
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d03f      	beq.n	800346a <HAL_I2C_ER_IRQHandler+0x104>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d039      	beq.n	800346a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80033f6:	7efb      	ldrb	r3, [r7, #27]
 80033f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003410:	7ebb      	ldrb	r3, [r7, #26]
 8003412:	2b20      	cmp	r3, #32
 8003414:	d112      	bne.n	800343c <HAL_I2C_ER_IRQHandler+0xd6>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10f      	bne.n	800343c <HAL_I2C_ER_IRQHandler+0xd6>
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b21      	cmp	r3, #33	; 0x21
 8003420:	d008      	beq.n	8003434 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b29      	cmp	r3, #41	; 0x29
 8003426:	d005      	beq.n	8003434 <HAL_I2C_ER_IRQHandler+0xce>
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b28      	cmp	r3, #40	; 0x28
 800342c:	d106      	bne.n	800343c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b21      	cmp	r3, #33	; 0x21
 8003432:	d103      	bne.n	800343c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f001 f85f 	bl	80044f8 <I2C_Slave_AF>
 800343a:	e016      	b.n	800346a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003444:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800344e:	7efb      	ldrb	r3, [r7, #27]
 8003450:	2b10      	cmp	r3, #16
 8003452:	d002      	beq.n	800345a <HAL_I2C_ER_IRQHandler+0xf4>
 8003454:	7efb      	ldrb	r3, [r7, #27]
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d107      	bne.n	800346a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003468:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	0adb      	lsrs	r3, r3, #11
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <HAL_I2C_ER_IRQHandler+0x12e>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003492:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f001 f896 	bl	80045d8 <I2C_ITError>
  }
}
 80034ac:	bf00      	nop
 80034ae:	3728      	adds	r7, #40	; 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	70fb      	strb	r3, [r7, #3]
 8003510:	4613      	mov	r3, r2
 8003512:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800359a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d150      	bne.n	800364c <I2C_MasterTransmit_TXE+0xc8>
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b21      	cmp	r3, #33	; 0x21
 80035ae:	d14d      	bne.n	800364c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d01d      	beq.n	80035f2 <I2C_MasterTransmit_TXE+0x6e>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d01a      	beq.n	80035f2 <I2C_MasterTransmit_TXE+0x6e>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035c2:	d016      	beq.n	80035f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2211      	movs	r2, #17
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff62 	bl	80034b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035f0:	e060      	b.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003600:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003610:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d107      	bne.n	800363c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff7d 	bl	8003534 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800363a:	e03b      	b.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff35 	bl	80034b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800364a:	e033      	b.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2b21      	cmp	r3, #33	; 0x21
 8003650:	d005      	beq.n	800365e <I2C_MasterTransmit_TXE+0xda>
 8003652:	7bbb      	ldrb	r3, [r7, #14]
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d12d      	bne.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b22      	cmp	r3, #34	; 0x22
 800365c:	d12a      	bne.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003678:	e01c      	b.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d103      	bne.n	800368e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f88e 	bl	80037a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800368c:	e012      	b.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036b2:	e7ff      	b.n	80036b4 <I2C_MasterTransmit_TXE+0x130>
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b21      	cmp	r3, #33	; 0x21
 80036d4:	d164      	bne.n	80037a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003704:	e04c      	b.n	80037a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d01d      	beq.n	8003748 <I2C_MasterTransmit_BTF+0x8c>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b20      	cmp	r3, #32
 8003710:	d01a      	beq.n	8003748 <I2C_MasterTransmit_BTF+0x8c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003718:	d016      	beq.n	8003748 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003728:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2211      	movs	r2, #17
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff feb7 	bl	80034b4 <HAL_I2C_MasterTxCpltCallback>
}
 8003746:	e02b      	b.n	80037a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003756:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d107      	bne.n	8003792 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fed2 	bl	8003534 <HAL_I2C_MemTxCpltCallback>
}
 8003790:	e006      	b.n	80037a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fe8a 	bl	80034b4 <HAL_I2C_MasterTxCpltCallback>
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11d      	bne.n	80037fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10b      	bne.n	80037e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80037de:	e073      	b.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	121b      	asrs	r3, r3, #8
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037fa:	e065      	b.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10b      	bne.n	800381c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	b2da      	uxtb	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	651a      	str	r2, [r3, #80]	; 0x50
}
 800381a:	e055      	b.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003820:	2b02      	cmp	r3, #2
 8003822:	d151      	bne.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b22      	cmp	r3, #34	; 0x22
 8003828:	d10d      	bne.n	8003846 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003844:	e040      	b.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b21      	cmp	r3, #33	; 0x21
 8003854:	d112      	bne.n	800387c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800387a:	e025      	b.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d120      	bne.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b21      	cmp	r3, #33	; 0x21
 800388a:	d11d      	bne.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800389a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fe36 	bl	8003534 <HAL_I2C_MemTxCpltCallback>
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b22      	cmp	r3, #34	; 0x22
 80038e2:	f040 80a2 	bne.w	8003a2a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d921      	bls.n	8003938 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b03      	cmp	r3, #3
 8003922:	f040 8082 	bne.w	8003a2a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003936:	e078      	b.n	8003a2a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	2b02      	cmp	r3, #2
 800393e:	d074      	beq.n	8003a2a <I2C_MasterReceive_RXNE+0x15a>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d002      	beq.n	800394c <I2C_MasterReceive_RXNE+0x7c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d16e      	bne.n	8003a2a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f001 fac5 	bl	8004edc <I2C_WaitOnSTOPRequestThroughIT>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d142      	bne.n	80039de <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003976:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d10a      	bne.n	80039c8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fdc1 	bl	8003548 <HAL_I2C_MemRxCpltCallback>
}
 80039c6:	e030      	b.n	8003a2a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2212      	movs	r2, #18
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fd76 	bl	80034c8 <HAL_I2C_MasterRxCpltCallback>
}
 80039dc:	e025      	b.n	8003a2a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fd99 	bl	800355c <HAL_I2C_ErrorCallback>
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d11b      	bne.n	8003a82 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a80:	e0bd      	b.n	8003bfe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d129      	bne.n	8003ae0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d00a      	beq.n	8003ab8 <I2C_MasterReceive_BTF+0x86>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d007      	beq.n	8003ab8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ade:	e08e      	b.n	8003bfe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d176      	bne.n	8003bd8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d002      	beq.n	8003af6 <I2C_MasterReceive_BTF+0xc4>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d108      	bne.n	8003b08 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e019      	b.n	8003b3c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d002      	beq.n	8003b14 <I2C_MasterReceive_BTF+0xe2>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d108      	bne.n	8003b26 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e00a      	b.n	8003b3c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d007      	beq.n	8003b3c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d10a      	bne.n	8003bc2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fcc4 	bl	8003548 <HAL_I2C_MemRxCpltCallback>
}
 8003bc0:	e01d      	b.n	8003bfe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2212      	movs	r2, #18
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fc79 	bl	80034c8 <HAL_I2C_MasterRxCpltCallback>
}
 8003bd6:	e012      	b.n	8003bfe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d117      	bne.n	8003c4a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c32:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c34:	e067      	b.n	8003d06 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]
}
 8003c48:	e05d      	b.n	8003d06 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c52:	d133      	bne.n	8003cbc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b21      	cmp	r3, #33	; 0x21
 8003c5e:	d109      	bne.n	8003c74 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c70:	611a      	str	r2, [r3, #16]
 8003c72:	e008      	b.n	8003c86 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <I2C_Master_SB+0x92>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d108      	bne.n	8003caa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d032      	beq.n	8003d06 <I2C_Master_SB+0x100>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d02d      	beq.n	8003d06 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb8:	605a      	str	r2, [r3, #4]
}
 8003cba:	e024      	b.n	8003d06 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10e      	bne.n	8003ce2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	11db      	asrs	r3, r3, #7
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 0306 	and.w	r3, r3, #6
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f063 030f 	orn	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	611a      	str	r2, [r3, #16]
}
 8003ce0:	e011      	b.n	8003d06 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10d      	bne.n	8003d06 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	11db      	asrs	r3, r3, #7
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 0306 	and.w	r3, r3, #6
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f063 030e 	orn	r3, r3, #14
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	611a      	str	r2, [r3, #16]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <I2C_Master_ADD10+0x26>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d108      	bne.n	8003d4a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <I2C_Master_ADD10+0x48>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d58:	605a      	str	r2, [r3, #4]
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b091      	sub	sp, #68	; 0x44
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b22      	cmp	r3, #34	; 0x22
 8003d8e:	f040 8169 	bne.w	8004064 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <I2C_Master_ADDR+0x54>
 8003d9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d10b      	bne.n	8003dba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	e160      	b.n	800407c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11d      	bne.n	8003dfe <I2C_Master_ADDR+0x98>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dca:	d118      	bne.n	8003dfe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8003dfc:	e13e      	b.n	800407c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d113      	bne.n	8003e30 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e115      	b.n	800405c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	f040 808a 	bne.w	8003f50 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e42:	d137      	bne.n	8003eb4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	d113      	bne.n	8003e8c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e72:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	e0e7      	b.n	800405c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e0d3      	b.n	800405c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d02e      	beq.n	8003f18 <I2C_Master_ADDR+0x1b2>
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d02b      	beq.n	8003f18 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	2b12      	cmp	r3, #18
 8003ec4:	d102      	bne.n	8003ecc <I2C_Master_ADDR+0x166>
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d125      	bne.n	8003f18 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d00e      	beq.n	8003ef0 <I2C_Master_ADDR+0x18a>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d00b      	beq.n	8003ef0 <I2C_Master_ADDR+0x18a>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d008      	beq.n	8003ef0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e007      	b.n	8003f00 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	e0a1      	b.n	800405c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e085      	b.n	800405c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d14d      	bne.n	8003ff6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d016      	beq.n	8003f8e <I2C_Master_ADDR+0x228>
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d013      	beq.n	8003f8e <I2C_Master_ADDR+0x228>
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d010      	beq.n	8003f8e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e007      	b.n	8003f9e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f9c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d117      	bne.n	8003fde <I2C_Master_ADDR+0x278>
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb4:	d00b      	beq.n	8003fce <I2C_Master_ADDR+0x268>
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d008      	beq.n	8003fce <I2C_Master_ADDR+0x268>
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d005      	beq.n	8003fce <I2C_Master_ADDR+0x268>
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d002      	beq.n	8003fce <I2C_Master_ADDR+0x268>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d107      	bne.n	8003fde <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fdc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	e032      	b.n	800405c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004004:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004014:	d117      	bne.n	8004046 <I2C_Master_ADDR+0x2e0>
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800401c:	d00b      	beq.n	8004036 <I2C_Master_ADDR+0x2d0>
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2b01      	cmp	r3, #1
 8004022:	d008      	beq.n	8004036 <I2C_Master_ADDR+0x2d0>
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	2b08      	cmp	r3, #8
 8004028:	d005      	beq.n	8004036 <I2C_Master_ADDR+0x2d0>
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	2b10      	cmp	r3, #16
 800402e:	d002      	beq.n	8004036 <I2C_Master_ADDR+0x2d0>
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	2b20      	cmp	r3, #32
 8004034:	d107      	bne.n	8004046 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004044:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004062:	e00b      	b.n	800407c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
}
 800407a:	e7ff      	b.n	800407c <I2C_Master_ADDR+0x316>
 800407c:	bf00      	nop
 800407e:	3744      	adds	r7, #68	; 0x44
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02b      	beq.n	80040fa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d114      	bne.n	80040fa <I2C_SlaveTransmit_TXE+0x72>
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b29      	cmp	r3, #41	; 0x29
 80040d4:	d111      	bne.n	80040fa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2221      	movs	r2, #33	; 0x21
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2228      	movs	r2, #40	; 0x28
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff f9f1 	bl	80034dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004152:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d02c      	beq.n	80041b8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d114      	bne.n	80041b8 <I2C_SlaveReceive_RXNE+0x74>
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b2a      	cmp	r3, #42	; 0x2a
 8004192:	d111      	bne.n	80041b8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2222      	movs	r2, #34	; 0x22
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2228      	movs	r2, #40	; 0x28
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff f99c 	bl	80034f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d012      	beq.n	80041f8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800421e:	2b28      	cmp	r3, #40	; 0x28
 8004220:	d127      	bne.n	8004272 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004230:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800423e:	2301      	movs	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	09db      	lsrs	r3, r3, #7
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	81bb      	strh	r3, [r7, #12]
 8004254:	e002      	b.n	800425c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004264:	89ba      	ldrh	r2, [r7, #12]
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff f94a 	bl	8003504 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004270:	e00e      	b.n	8004290 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f4:	d172      	bne.n	80043dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	d002      	beq.n	8004302 <I2C_Slave_STOPF+0x6a>
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004300:	d135      	bne.n	800436e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004334:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd ff66 	bl	800220c <HAL_DMA_GetState>
 8004340:	4603      	mov	r3, r0
 8004342:	2b01      	cmp	r3, #1
 8004344:	d049      	beq.n	80043da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	4a69      	ldr	r2, [pc, #420]	; (80044f0 <I2C_Slave_STOPF+0x258>)
 800434c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd fdae 	bl	8001eb4 <HAL_DMA_Abort_IT>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d03d      	beq.n	80043da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004368:	4610      	mov	r0, r2
 800436a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800436c:	e035      	b.n	80043da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd ff30 	bl	800220c <HAL_DMA_GetState>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d014      	beq.n	80043dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	4a4e      	ldr	r2, [pc, #312]	; (80044f0 <I2C_Slave_STOPF+0x258>)
 80043b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fd78 	bl	8001eb4 <HAL_DMA_Abort_IT>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043d4:	4610      	mov	r0, r2
 80043d6:	4798      	blx	r3
 80043d8:	e000      	b.n	80043dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d03e      	beq.n	8004464 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d112      	bne.n	800441a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d112      	bne.n	800444e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f043 0204 	orr.w	r2, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8b3 	bl	80045d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004472:	e039      	b.n	80044e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b2a      	cmp	r3, #42	; 0x2a
 8004478:	d109      	bne.n	800448e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2228      	movs	r2, #40	; 0x28
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff f831 	bl	80034f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b28      	cmp	r3, #40	; 0x28
 8004498:	d111      	bne.n	80044be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <I2C_Slave_STOPF+0x25c>)
 800449e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff f832 	bl	8003520 <HAL_I2C_ListenCpltCallback>
}
 80044bc:	e014      	b.n	80044e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	2b22      	cmp	r3, #34	; 0x22
 80044c4:	d002      	beq.n	80044cc <I2C_Slave_STOPF+0x234>
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b22      	cmp	r3, #34	; 0x22
 80044ca:	d10d      	bne.n	80044e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff f804 	bl	80034f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	08004add 	.word	0x08004add
 80044f4:	ffff0000 	.word	0xffff0000

080044f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d002      	beq.n	800451a <I2C_Slave_AF+0x22>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b20      	cmp	r3, #32
 8004518:	d129      	bne.n	800456e <I2C_Slave_AF+0x76>
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b28      	cmp	r3, #40	; 0x28
 800451e:	d126      	bne.n	800456e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <I2C_Slave_AF+0xdc>)
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004534:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800453e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fe ffda 	bl	8003520 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800456c:	e02e      	b.n	80045cc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b21      	cmp	r3, #33	; 0x21
 8004572:	d126      	bne.n	80045c2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a17      	ldr	r2, [pc, #92]	; (80045d4 <I2C_Slave_AF+0xdc>)
 8004578:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800459e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fe ff8e 	bl	80034dc <HAL_I2C_SlaveTxCpltCallback>
}
 80045c0:	e004      	b.n	80045cc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ca:	615a      	str	r2, [r3, #20]
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	ffff0000 	.word	0xffff0000

080045d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045f0:	7bbb      	ldrb	r3, [r7, #14]
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d002      	beq.n	80045fc <I2C_ITError+0x24>
 80045f6:	7bbb      	ldrb	r3, [r7, #14]
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d10a      	bne.n	8004612 <I2C_ITError+0x3a>
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b22      	cmp	r3, #34	; 0x22
 8004600:	d107      	bne.n	8004612 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004610:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004618:	2b28      	cmp	r3, #40	; 0x28
 800461a:	d107      	bne.n	800462c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2228      	movs	r2, #40	; 0x28
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800462a:	e015      	b.n	8004658 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463a:	d00a      	beq.n	8004652 <I2C_ITError+0x7a>
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b60      	cmp	r3, #96	; 0x60
 8004640:	d007      	beq.n	8004652 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	d162      	bne.n	800472e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004676:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d020      	beq.n	80046c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	4a6a      	ldr	r2, [pc, #424]	; (8004834 <I2C_ITError+0x25c>)
 800468c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fc0e 	bl	8001eb4 <HAL_DMA_Abort_IT>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8089 	beq.w	80047b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c2:	4610      	mov	r0, r2
 80046c4:	4798      	blx	r3
 80046c6:	e074      	b.n	80047b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	4a59      	ldr	r2, [pc, #356]	; (8004834 <I2C_ITError+0x25c>)
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fd fbed 	bl	8001eb4 <HAL_DMA_Abort_IT>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d068      	beq.n	80047b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d10b      	bne.n	8004706 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
 800472c:	e041      	b.n	80047b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b60      	cmp	r3, #96	; 0x60
 8004738:	d125      	bne.n	8004786 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d10b      	bne.n	800476e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fe fef6 	bl	8003570 <HAL_I2C_AbortCpltCallback>
 8004784:	e015      	b.n	80047b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d10b      	bne.n	80047ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fe fed5 	bl	800355c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10e      	bne.n	80047e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b04      	cmp	r3, #4
 8004802:	d113      	bne.n	800482c <I2C_ITError+0x254>
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b28      	cmp	r3, #40	; 0x28
 8004808:	d110      	bne.n	800482c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <I2C_ITError+0x260>)
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fe fe7a 	bl	8003520 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	08004add 	.word	0x08004add
 8004838:	ffff0000 	.word	0xffff0000

0800483c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	460b      	mov	r3, r1
 800484a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d006      	beq.n	8004866 <I2C_MasterRequestWrite+0x2a>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d003      	beq.n	8004866 <I2C_MasterRequestWrite+0x2a>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004864:	d108      	bne.n	8004878 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e00b      	b.n	8004890 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2b12      	cmp	r3, #18
 800487e:	d107      	bne.n	8004890 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f9c5 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d103      	bne.n	80048c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e035      	b.n	8004930 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048cc:	d108      	bne.n	80048e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ce:	897b      	ldrh	r3, [r7, #10]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048dc:	611a      	str	r2, [r3, #16]
 80048de:	e01b      	b.n	8004918 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	11db      	asrs	r3, r3, #7
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0306 	and.w	r3, r3, #6
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f063 030f 	orn	r3, r3, #15
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	490e      	ldr	r1, [pc, #56]	; (8004938 <I2C_MasterRequestWrite+0xfc>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f9eb 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e010      	b.n	8004930 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800490e:	897b      	ldrh	r3, [r7, #10]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4907      	ldr	r1, [pc, #28]	; (800493c <I2C_MasterRequestWrite+0x100>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f9db 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	00010008 	.word	0x00010008
 800493c:	00010002 	.word	0x00010002

08004940 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	460b      	mov	r3, r1
 800494e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004964:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d006      	beq.n	800497a <I2C_MasterRequestRead+0x3a>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d003      	beq.n	800497a <I2C_MasterRequestRead+0x3a>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004978:	d108      	bne.n	800498c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e00b      	b.n	80049a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	2b11      	cmp	r3, #17
 8004992:	d107      	bne.n	80049a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f93b 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00d      	beq.n	80049d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ca:	d103      	bne.n	80049d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e079      	b.n	8004acc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049e0:	d108      	bne.n	80049f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049e2:	897b      	ldrh	r3, [r7, #10]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	611a      	str	r2, [r3, #16]
 80049f2:	e05f      	b.n	8004ab4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049f4:	897b      	ldrh	r3, [r7, #10]
 80049f6:	11db      	asrs	r3, r3, #7
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0306 	and.w	r3, r3, #6
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f063 030f 	orn	r3, r3, #15
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4930      	ldr	r1, [pc, #192]	; (8004ad4 <I2C_MasterRequestRead+0x194>)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f961 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e054      	b.n	8004acc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4929      	ldr	r1, [pc, #164]	; (8004ad8 <I2C_MasterRequestRead+0x198>)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f951 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e044      	b.n	8004acc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f8d9 	bl	8004c2c <I2C_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8e:	d103      	bne.n	8004a98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e017      	b.n	8004acc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a9c:	897b      	ldrh	r3, [r7, #10]
 8004a9e:	11db      	asrs	r3, r3, #7
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f063 030e 	orn	r3, r3, #14
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4907      	ldr	r1, [pc, #28]	; (8004ad8 <I2C_MasterRequestRead+0x198>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f90d 	bl	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	00010008 	.word	0x00010008
 8004ad8:	00010002 	.word	0x00010002

08004adc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004af6:	4b4b      	ldr	r3, [pc, #300]	; (8004c24 <I2C_DMAAbort+0x148>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	08db      	lsrs	r3, r3, #3
 8004afc:	4a4a      	ldr	r2, [pc, #296]	; (8004c28 <I2C_DMAAbort+0x14c>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	0a1a      	lsrs	r2, r3, #8
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	00da      	lsls	r2, r3, #3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b22:	e00a      	b.n	8004b3a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b38:	d0ea      	beq.n	8004b10 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	2200      	movs	r2, #0
 8004b48:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	2200      	movs	r2, #0
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b60      	cmp	r3, #96	; 0x60
 8004baa:	d10e      	bne.n	8004bca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bc2:	6978      	ldr	r0, [r7, #20]
 8004bc4:	f7fe fcd4 	bl	8003570 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bc8:	e027      	b.n	8004c1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bca:	7cfb      	ldrb	r3, [r7, #19]
 8004bcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bd0:	2b28      	cmp	r3, #40	; 0x28
 8004bd2:	d117      	bne.n	8004c04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2228      	movs	r2, #40	; 0x28
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c02:	e007      	b.n	8004c14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f7fe fca1 	bl	800355c <HAL_I2C_ErrorCallback>
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200000dc 	.word	0x200000dc
 8004c28:	14f8b589 	.word	0x14f8b589

08004c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c3c:	e025      	b.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d021      	beq.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fc fe7d 	bl	8001944 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e023      	b.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10d      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	e00c      	b.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d0b6      	beq.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce8:	e051      	b.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf8:	d123      	bne.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e046      	b.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d021      	beq.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fc fdfb 	bl	8001944 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d116      	bne.n	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e020      	b.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10c      	bne.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e00b      	b.n	8004dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	43da      	mvns	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d18d      	bne.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de4:	e02d      	b.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f900 	bl	8004fec <I2C_IsAcknowledgeFailed>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e02d      	b.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d021      	beq.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fc fda1 	bl	8001944 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d116      	bne.n	8004e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e007      	b.n	8004e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d1ca      	bne.n	8004de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e66:	e02d      	b.n	8004ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f8bf 	bl	8004fec <I2C_IsAcknowledgeFailed>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e02d      	b.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d021      	beq.n	8004ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e80:	f7fc fd60 	bl	8001944 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f043 0220 	orr.w	r2, r3, #32
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e007      	b.n	8004ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d1ca      	bne.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	0a1a      	lsrs	r2, r3, #8
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e008      	b.n	8004f2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f28:	d0e9      	beq.n	8004efe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	200000dc 	.word	0x200000dc
 8004f3c:	14f8b589 	.word	0x14f8b589

08004f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f4c:	e042      	b.n	8004fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d119      	bne.n	8004f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e029      	b.n	8004fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f90:	f7fc fcd8 	bl	8001944 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d302      	bcc.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d116      	bne.n	8004fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e007      	b.n	8004fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d1b5      	bne.n	8004f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005002:	d11b      	bne.n	800503c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800500c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	f043 0204 	orr.w	r2, r3, #4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800505a:	d103      	bne.n	8005064 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005062:	e007      	b.n	8005074 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800506c:	d102      	bne.n	8005074 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2208      	movs	r2, #8
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e264      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d075      	beq.n	800518a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800509e:	4ba3      	ldr	r3, [pc, #652]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d00c      	beq.n	80050c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050aa:	4ba0      	ldr	r3, [pc, #640]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d112      	bne.n	80050dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b6:	4b9d      	ldr	r3, [pc, #628]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c2:	d10b      	bne.n	80050dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	4b99      	ldr	r3, [pc, #612]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d05b      	beq.n	8005188 <HAL_RCC_OscConfig+0x108>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d157      	bne.n	8005188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e23f      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e4:	d106      	bne.n	80050f4 <HAL_RCC_OscConfig+0x74>
 80050e6:	4b91      	ldr	r3, [pc, #580]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a90      	ldr	r2, [pc, #576]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e01d      	b.n	8005130 <HAL_RCC_OscConfig+0xb0>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050fc:	d10c      	bne.n	8005118 <HAL_RCC_OscConfig+0x98>
 80050fe:	4b8b      	ldr	r3, [pc, #556]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a8a      	ldr	r2, [pc, #552]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	4b88      	ldr	r3, [pc, #544]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a87      	ldr	r2, [pc, #540]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e00b      	b.n	8005130 <HAL_RCC_OscConfig+0xb0>
 8005118:	4b84      	ldr	r3, [pc, #528]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a83      	ldr	r2, [pc, #524]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b81      	ldr	r3, [pc, #516]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a80      	ldr	r2, [pc, #512]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 800512a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800512e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d013      	beq.n	8005160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fc fc04 	bl	8001944 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005140:	f7fc fc00 	bl	8001944 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e204      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4b76      	ldr	r3, [pc, #472]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0xc0>
 800515e:	e014      	b.n	800518a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005160:	f7fc fbf0 	bl	8001944 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005168:	f7fc fbec 	bl	8001944 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b64      	cmp	r3, #100	; 0x64
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e1f0      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517a:	4b6c      	ldr	r3, [pc, #432]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0xe8>
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d063      	beq.n	800525e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005196:	4b65      	ldr	r3, [pc, #404]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a2:	4b62      	ldr	r3, [pc, #392]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d11c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ae:	4b5f      	ldr	r3, [pc, #380]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d116      	bne.n	80051e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ba:	4b5c      	ldr	r3, [pc, #368]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_RCC_OscConfig+0x152>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d001      	beq.n	80051d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e1c4      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d2:	4b56      	ldr	r3, [pc, #344]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4952      	ldr	r1, [pc, #328]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e6:	e03a      	b.n	800525e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d020      	beq.n	8005232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f0:	4b4f      	ldr	r3, [pc, #316]	; (8005330 <HAL_RCC_OscConfig+0x2b0>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fc fba5 	bl	8001944 <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fe:	f7fc fba1 	bl	8001944 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e1a5      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005210:	4b46      	ldr	r3, [pc, #280]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521c:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4940      	ldr	r1, [pc, #256]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 800522c:	4313      	orrs	r3, r2
 800522e:	600b      	str	r3, [r1, #0]
 8005230:	e015      	b.n	800525e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005232:	4b3f      	ldr	r3, [pc, #252]	; (8005330 <HAL_RCC_OscConfig+0x2b0>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fc fb84 	bl	8001944 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005240:	f7fc fb80 	bl	8001944 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e184      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005252:	4b36      	ldr	r3, [pc, #216]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d030      	beq.n	80052cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005272:	4b30      	ldr	r3, [pc, #192]	; (8005334 <HAL_RCC_OscConfig+0x2b4>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fc fb64 	bl	8001944 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005280:	f7fc fb60 	bl	8001944 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e164      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005292:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 8005294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x200>
 800529e:	e015      	b.n	80052cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a0:	4b24      	ldr	r3, [pc, #144]	; (8005334 <HAL_RCC_OscConfig+0x2b4>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a6:	f7fc fb4d 	bl	8001944 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ae:	f7fc fb49 	bl	8001944 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e14d      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80052c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f0      	bne.n	80052ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80a0 	beq.w	800541a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	4a0e      	ldr	r2, [pc, #56]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f8:	6413      	str	r3, [r2, #64]	; 0x40
 80052fa:	4b0c      	ldr	r3, [pc, #48]	; (800532c <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005306:	2301      	movs	r3, #1
 8005308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_OscConfig+0x2b8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d121      	bne.n	800535a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <HAL_RCC_OscConfig+0x2b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a07      	ldr	r2, [pc, #28]	; (8005338 <HAL_RCC_OscConfig+0x2b8>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005322:	f7fc fb0f 	bl	8001944 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	e011      	b.n	800534e <HAL_RCC_OscConfig+0x2ce>
 800532a:	bf00      	nop
 800532c:	40023800 	.word	0x40023800
 8005330:	42470000 	.word	0x42470000
 8005334:	42470e80 	.word	0x42470e80
 8005338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533c:	f7fc fb02 	bl	8001944 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e106      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534e:	4b85      	ldr	r3, [pc, #532]	; (8005564 <HAL_RCC_OscConfig+0x4e4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d106      	bne.n	8005370 <HAL_RCC_OscConfig+0x2f0>
 8005362:	4b81      	ldr	r3, [pc, #516]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	4a80      	ldr	r2, [pc, #512]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	6713      	str	r3, [r2, #112]	; 0x70
 800536e:	e01c      	b.n	80053aa <HAL_RCC_OscConfig+0x32a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b05      	cmp	r3, #5
 8005376:	d10c      	bne.n	8005392 <HAL_RCC_OscConfig+0x312>
 8005378:	4b7b      	ldr	r3, [pc, #492]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	4a7a      	ldr	r2, [pc, #488]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 800537e:	f043 0304 	orr.w	r3, r3, #4
 8005382:	6713      	str	r3, [r2, #112]	; 0x70
 8005384:	4b78      	ldr	r3, [pc, #480]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a77      	ldr	r2, [pc, #476]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
 8005390:	e00b      	b.n	80053aa <HAL_RCC_OscConfig+0x32a>
 8005392:	4b75      	ldr	r3, [pc, #468]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	4a74      	ldr	r2, [pc, #464]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	6713      	str	r3, [r2, #112]	; 0x70
 800539e:	4b72      	ldr	r3, [pc, #456]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a71      	ldr	r2, [pc, #452]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d015      	beq.n	80053de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b2:	f7fc fac7 	bl	8001944 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b8:	e00a      	b.n	80053d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ba:	f7fc fac3 	bl	8001944 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e0c5      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	4b65      	ldr	r3, [pc, #404]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ee      	beq.n	80053ba <HAL_RCC_OscConfig+0x33a>
 80053dc:	e014      	b.n	8005408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053de:	f7fc fab1 	bl	8001944 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e4:	e00a      	b.n	80053fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e6:	f7fc faad 	bl	8001944 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e0af      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fc:	4b5a      	ldr	r3, [pc, #360]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ee      	bne.n	80053e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d105      	bne.n	800541a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540e:	4b56      	ldr	r3, [pc, #344]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	4a55      	ldr	r2, [pc, #340]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 809b 	beq.w	800555a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005424:	4b50      	ldr	r3, [pc, #320]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b08      	cmp	r3, #8
 800542e:	d05c      	beq.n	80054ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d141      	bne.n	80054bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005438:	4b4c      	ldr	r3, [pc, #304]	; (800556c <HAL_RCC_OscConfig+0x4ec>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fc fa81 	bl	8001944 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005446:	f7fc fa7d 	bl	8001944 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e081      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005458:	4b43      	ldr	r3, [pc, #268]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	019b      	lsls	r3, r3, #6
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	3b01      	subs	r3, #1
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	4937      	ldr	r1, [pc, #220]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 800548a:	4313      	orrs	r3, r2
 800548c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548e:	4b37      	ldr	r3, [pc, #220]	; (800556c <HAL_RCC_OscConfig+0x4ec>)
 8005490:	2201      	movs	r2, #1
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fc fa56 	bl	8001944 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800549c:	f7fc fa52 	bl	8001944 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e056      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ae:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x41c>
 80054ba:	e04e      	b.n	800555a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_OscConfig+0x4ec>)
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fc fa3f 	bl	8001944 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ca:	f7fc fa3b 	bl	8001944 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e03f      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054dc:	4b22      	ldr	r3, [pc, #136]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_OscConfig+0x44a>
 80054e8:	e037      	b.n	800555a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e032      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054f6:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <HAL_RCC_OscConfig+0x4e8>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d028      	beq.n	8005556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d121      	bne.n	8005556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d11a      	bne.n	8005556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005526:	4013      	ands	r3, r2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800552c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800552e:	4293      	cmp	r3, r2
 8005530:	d111      	bne.n	8005556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	3b01      	subs	r3, #1
 8005540:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d107      	bne.n	8005556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40007000 	.word	0x40007000
 8005568:	40023800 	.word	0x40023800
 800556c:	42470060 	.word	0x42470060

08005570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0cc      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005584:	4b68      	ldr	r3, [pc, #416]	; (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d90c      	bls.n	80055ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005592:	4b65      	ldr	r3, [pc, #404]	; (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b63      	ldr	r3, [pc, #396]	; (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0b8      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d020      	beq.n	80055fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c4:	4b59      	ldr	r3, [pc, #356]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a58      	ldr	r2, [pc, #352]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055dc:	4b53      	ldr	r3, [pc, #332]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4a52      	ldr	r2, [pc, #328]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e8:	4b50      	ldr	r3, [pc, #320]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	494d      	ldr	r1, [pc, #308]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d044      	beq.n	8005690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560e:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d119      	bne.n	800564e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e07f      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d003      	beq.n	800562e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562a:	2b03      	cmp	r3, #3
 800562c:	d107      	bne.n	800563e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562e:	4b3f      	ldr	r3, [pc, #252]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e06f      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563e:	4b3b      	ldr	r3, [pc, #236]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e067      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800564e:	4b37      	ldr	r3, [pc, #220]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f023 0203 	bic.w	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4934      	ldr	r1, [pc, #208]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	4313      	orrs	r3, r2
 800565e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005660:	f7fc f970 	bl	8001944 <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	e00a      	b.n	800567e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005668:	f7fc f96c 	bl	8001944 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	f241 3288 	movw	r2, #5000	; 0x1388
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e04f      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567e:	4b2b      	ldr	r3, [pc, #172]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 020c 	and.w	r2, r3, #12
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	429a      	cmp	r2, r3
 800568e:	d1eb      	bne.n	8005668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d20c      	bcs.n	80056b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569e:	4b22      	ldr	r3, [pc, #136]	; (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a6:	4b20      	ldr	r3, [pc, #128]	; (8005728 <HAL_RCC_ClockConfig+0x1b8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e032      	b.n	800571e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c4:	4b19      	ldr	r3, [pc, #100]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4916      	ldr	r1, [pc, #88]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056e2:	4b12      	ldr	r3, [pc, #72]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	490e      	ldr	r1, [pc, #56]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056f6:	f000 f821 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	490a      	ldr	r1, [pc, #40]	; (8005730 <HAL_RCC_ClockConfig+0x1c0>)
 8005708:	5ccb      	ldrb	r3, [r1, r3]
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	4a09      	ldr	r2, [pc, #36]	; (8005734 <HAL_RCC_ClockConfig+0x1c4>)
 8005710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <HAL_RCC_ClockConfig+0x1c8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc f8d0 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40023c00 	.word	0x40023c00
 800572c:	40023800 	.word	0x40023800
 8005730:	08007508 	.word	0x08007508
 8005734:	200000dc 	.word	0x200000dc
 8005738:	200000e0 	.word	0x200000e0

0800573c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800573c:	b5b0      	push	{r4, r5, r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005742:	2100      	movs	r1, #0
 8005744:	6079      	str	r1, [r7, #4]
 8005746:	2100      	movs	r1, #0
 8005748:	60f9      	str	r1, [r7, #12]
 800574a:	2100      	movs	r1, #0
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800574e:	2100      	movs	r1, #0
 8005750:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005752:	4952      	ldr	r1, [pc, #328]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005754:	6889      	ldr	r1, [r1, #8]
 8005756:	f001 010c 	and.w	r1, r1, #12
 800575a:	2908      	cmp	r1, #8
 800575c:	d00d      	beq.n	800577a <HAL_RCC_GetSysClockFreq+0x3e>
 800575e:	2908      	cmp	r1, #8
 8005760:	f200 8094 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x150>
 8005764:	2900      	cmp	r1, #0
 8005766:	d002      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x32>
 8005768:	2904      	cmp	r1, #4
 800576a:	d003      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x38>
 800576c:	e08e      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800576e:	4b4c      	ldr	r3, [pc, #304]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005770:	60bb      	str	r3, [r7, #8]
       break;
 8005772:	e08e      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005774:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005776:	60bb      	str	r3, [r7, #8]
      break;
 8005778:	e08b      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800577a:	4948      	ldr	r1, [pc, #288]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 800577c:	6849      	ldr	r1, [r1, #4]
 800577e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005782:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005784:	4945      	ldr	r1, [pc, #276]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005786:	6849      	ldr	r1, [r1, #4]
 8005788:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800578c:	2900      	cmp	r1, #0
 800578e:	d024      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005790:	4942      	ldr	r1, [pc, #264]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005792:	6849      	ldr	r1, [r1, #4]
 8005794:	0989      	lsrs	r1, r1, #6
 8005796:	4608      	mov	r0, r1
 8005798:	f04f 0100 	mov.w	r1, #0
 800579c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80057a0:	f04f 0500 	mov.w	r5, #0
 80057a4:	ea00 0204 	and.w	r2, r0, r4
 80057a8:	ea01 0305 	and.w	r3, r1, r5
 80057ac:	493d      	ldr	r1, [pc, #244]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80057ae:	fb01 f003 	mul.w	r0, r1, r3
 80057b2:	2100      	movs	r1, #0
 80057b4:	fb01 f102 	mul.w	r1, r1, r2
 80057b8:	1844      	adds	r4, r0, r1
 80057ba:	493a      	ldr	r1, [pc, #232]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80057bc:	fba2 0101 	umull	r0, r1, r2, r1
 80057c0:	1863      	adds	r3, r4, r1
 80057c2:	4619      	mov	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	f7fa fd68 	bl	80002a0 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4613      	mov	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e04a      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057da:	4b30      	ldr	r3, [pc, #192]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	099b      	lsrs	r3, r3, #6
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ea:	f04f 0100 	mov.w	r1, #0
 80057ee:	ea02 0400 	and.w	r4, r2, r0
 80057f2:	ea03 0501 	and.w	r5, r3, r1
 80057f6:	4620      	mov	r0, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	014b      	lsls	r3, r1, #5
 8005804:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005808:	0142      	lsls	r2, r0, #5
 800580a:	4610      	mov	r0, r2
 800580c:	4619      	mov	r1, r3
 800580e:	1b00      	subs	r0, r0, r4
 8005810:	eb61 0105 	sbc.w	r1, r1, r5
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	018b      	lsls	r3, r1, #6
 800581e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005822:	0182      	lsls	r2, r0, #6
 8005824:	1a12      	subs	r2, r2, r0
 8005826:	eb63 0301 	sbc.w	r3, r3, r1
 800582a:	f04f 0000 	mov.w	r0, #0
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	00d9      	lsls	r1, r3, #3
 8005834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005838:	00d0      	lsls	r0, r2, #3
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	1912      	adds	r2, r2, r4
 8005840:	eb45 0303 	adc.w	r3, r5, r3
 8005844:	f04f 0000 	mov.w	r0, #0
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	0299      	lsls	r1, r3, #10
 800584e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005852:	0290      	lsls	r0, r2, #10
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4610      	mov	r0, r2
 800585a:	4619      	mov	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	f7fa fd1c 	bl	80002a0 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4613      	mov	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	3301      	adds	r3, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	60bb      	str	r3, [r7, #8]
      break;
 800588a:	e002      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800588e:	60bb      	str	r3, [r7, #8]
      break;
 8005890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005892:	68bb      	ldr	r3, [r7, #8]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bdb0      	pop	{r4, r5, r7, pc}
 800589c:	40023800 	.word	0x40023800
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	017d7840 	.word	0x017d7840

080058a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	200000dc 	.word	0x200000dc

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a9b      	lsrs	r3, r3, #10
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	08007518 	.word	0x08007518

080058e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058ec:	f7ff ffdc 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0b5b      	lsrs	r3, r3, #13
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCC_GetPCLK2Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	08007518 	.word	0x08007518

08005910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e03f      	b.n	80059a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb fdbc 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2224      	movs	r2, #36	; 0x24
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 ff65 	bl	8006824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b08a      	sub	sp, #40	; 0x28
 80059ae:	af02      	add	r7, sp, #8
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d17c      	bne.n	8005ac4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_UART_Transmit+0x2c>
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e075      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_UART_Transmit+0x3e>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e06e      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2221      	movs	r2, #33	; 0x21
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059fe:	f7fb ffa1 	bl	8001944 <HAL_GetTick>
 8005a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	88fa      	ldrh	r2, [r7, #6]
 8005a0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a18:	d108      	bne.n	8005a2c <HAL_UART_Transmit+0x82>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e003      	b.n	8005a34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a3c:	e02a      	b.n	8005a94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fc21 	bl	8006290 <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e036      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10b      	bne.n	8005a76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	3302      	adds	r3, #2
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e007      	b.n	8005a86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	3301      	adds	r3, #1
 8005a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1cf      	bne.n	8005a3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2140      	movs	r1, #64	; 0x40
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fbf1 	bl	8006290 <UART_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d11d      	bne.n	8005b24 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_Receive_DMA+0x26>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e016      	b.n	8005b26 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Receive_DMA+0x38>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e00f      	b.n	8005b26 <HAL_UART_Receive_DMA+0x58>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fc26 	bl	800636c <UART_Start_Receive_DMA>
 8005b20:	4603      	mov	r3, r0
 8005b22:	e000      	b.n	8005b26 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
  }
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b0ba      	sub	sp, #232	; 0xe8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10f      	bne.n	8005b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_UART_IRQHandler+0x66>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fd8d 	bl	80066ae <UART_Receive_IT>
      return;
 8005b94:	e256      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80de 	beq.w	8005d5c <HAL_UART_IRQHandler+0x22c>
 8005ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80d1 	beq.w	8005d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_UART_IRQHandler+0xae>
 8005bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f043 0201 	orr.w	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_UART_IRQHandler+0xd2>
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0202 	orr.w	r2, r3, #2
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_UART_IRQHandler+0xf6>
 8005c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0204 	orr.w	r2, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d011      	beq.n	8005c56 <HAL_UART_IRQHandler+0x126>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f043 0208 	orr.w	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 81ed 	beq.w	800603a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_UART_IRQHandler+0x14e>
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fd18 	bl	80066ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <HAL_UART_IRQHandler+0x17a>
 8005ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04f      	beq.n	8005d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fc20 	bl	80064f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d141      	bne.n	8005d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1d9      	bne.n	8005cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	4a7d      	ldr	r2, [pc, #500]	; (8005f0c <HAL_UART_IRQHandler+0x3dc>)
 8005d18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fc f8c8 	bl	8001eb4 <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	e00e      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f99a 	bl	8006074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e00a      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f996 	bl	8006074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e006      	b.n	8005d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f992 	bl	8006074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d56:	e170      	b.n	800603a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	bf00      	nop
    return;
 8005d5a:	e16e      	b.n	800603a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	f040 814a 	bne.w	8005ffa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8143 	beq.w	8005ffa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 813c 	beq.w	8005ffa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	f040 80b4 	bne.w	8005f10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 8140 	beq.w	800603e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f080 8139 	bcs.w	800603e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	f000 8088 	beq.w	8005ef2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1d9      	bne.n	8005de2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3314      	adds	r3, #20
 8005e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3314      	adds	r3, #20
 8005e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e1      	bne.n	8005e2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e3      	bne.n	8005e6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e3      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fb ff71 	bl	8001dd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8c0 	bl	8006088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f08:	e099      	b.n	800603e <HAL_UART_IRQHandler+0x50e>
 8005f0a:	bf00      	nop
 8005f0c:	080065b7 	.word	0x080065b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 808b 	beq.w	8006042 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8086 	beq.w	8006042 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f92:	633a      	str	r2, [r7, #48]	; 0x30
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e3      	bne.n	8005f6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fd8:	61fa      	str	r2, [r7, #28]
 8005fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e3      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f848 	bl	8006088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ff8:	e023      	b.n	8006042 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b00      	cmp	r3, #0
 8006004:	d009      	beq.n	800601a <HAL_UART_IRQHandler+0x4ea>
 8006006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fae3 	bl	80065de <UART_Transmit_IT>
    return;
 8006018:	e014      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <HAL_UART_IRQHandler+0x514>
 8006026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb23 	bl	800667e <UART_EndTransmit_IT>
    return;
 8006038:	e004      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
    return;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
      return;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <HAL_UART_IRQHandler+0x514>
      return;
 8006042:	bf00      	nop
  }
}
 8006044:	37e8      	adds	r7, #232	; 0xe8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop

0800604c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b09c      	sub	sp, #112	; 0x70
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d172      	bne.n	80061a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80060bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060be:	2200      	movs	r2, #0
 80060c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80060da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80060e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	667b      	str	r3, [r7, #100]	; 0x64
 800610e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3314      	adds	r3, #20
 8006114:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006116:	647a      	str	r2, [r7, #68]	; 0x44
 8006118:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800611c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e5      	bne.n	80060f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	623b      	str	r3, [r7, #32]
   return(result);
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006140:	663b      	str	r3, [r7, #96]	; 0x60
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3314      	adds	r3, #20
 8006148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800614a:	633a      	str	r2, [r7, #48]	; 0x30
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	2220      	movs	r2, #32
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	2b01      	cmp	r3, #1
 800616c:	d119      	bne.n	80061a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	60fb      	str	r3, [r7, #12]
   return(result);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f023 0310 	bic.w	r3, r3, #16
 8006184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	330c      	adds	r3, #12
 800618c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800618e:	61fa      	str	r2, [r7, #28]
 8006190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	69b9      	ldr	r1, [r7, #24]
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	617b      	str	r3, [r7, #20]
   return(result);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d106      	bne.n	80061b8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ae:	4619      	mov	r1, r3
 80061b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061b2:	f7ff ff69 	bl	8006088 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061b6:	e002      	b.n	80061be <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80061b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061ba:	f7fa fe19 	bl	8000df0 <HAL_UART_RxCpltCallback>
}
 80061be:	bf00      	nop
 80061c0:	3770      	adds	r7, #112	; 0x70
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d108      	bne.n	80061ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4619      	mov	r1, r3
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff ff4e 	bl	8006088 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061ec:	e002      	b.n	80061f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff ff36 	bl	8006060 <HAL_UART_RxHalfCpltCallback>
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b21      	cmp	r3, #33	; 0x21
 800622e:	d108      	bne.n	8006242 <UART_DMAError+0x46>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800623c:	68b8      	ldr	r0, [r7, #8]
 800623e:	f000 f92f 	bl	80064a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	bf0c      	ite	eq
 8006250:	2301      	moveq	r3, #1
 8006252:	2300      	movne	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b22      	cmp	r3, #34	; 0x22
 8006262:	d108      	bne.n	8006276 <UART_DMAError+0x7a>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006270:	68b8      	ldr	r0, [r7, #8]
 8006272:	f000 f93d 	bl	80064f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0210 	orr.w	r2, r3, #16
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006282:	68b8      	ldr	r0, [r7, #8]
 8006284:	f7ff fef6 	bl	8006074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b090      	sub	sp, #64	; 0x40
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a0:	e050      	b.n	8006344 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d04c      	beq.n	8006344 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80062b0:	f7fb fb48 	bl	8001944 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062bc:	429a      	cmp	r2, r3
 80062be:	d241      	bcs.n	8006344 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062e0:	637a      	str	r2, [r7, #52]	; 0x34
 80062e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e5      	bne.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3314      	adds	r3, #20
 80062fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	613b      	str	r3, [r7, #16]
   return(result);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	63bb      	str	r3, [r7, #56]	; 0x38
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3314      	adds	r3, #20
 8006312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006314:	623a      	str	r2, [r7, #32]
 8006316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	69f9      	ldr	r1, [r7, #28]
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	61bb      	str	r3, [r7, #24]
   return(result);
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e00f      	b.n	8006364 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4013      	ands	r3, r2
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	429a      	cmp	r2, r3
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	429a      	cmp	r2, r3
 8006360:	d09f      	beq.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3740      	adds	r7, #64	; 0x40
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b098      	sub	sp, #96	; 0x60
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2222      	movs	r2, #34	; 0x22
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	4a3e      	ldr	r2, [pc, #248]	; (8006494 <UART_Start_Receive_DMA+0x128>)
 800639a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	4a3d      	ldr	r2, [pc, #244]	; (8006498 <UART_Start_Receive_DMA+0x12c>)
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	4a3c      	ldr	r2, [pc, #240]	; (800649c <UART_Start_Receive_DMA+0x130>)
 80063aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	2200      	movs	r2, #0
 80063b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80063b4:	f107 0308 	add.w	r3, r7, #8
 80063b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	f7fb fcaa 	bl	8001d24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80063d0:	2300      	movs	r3, #0
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	613b      	str	r3, [r7, #16]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006404:	65bb      	str	r3, [r7, #88]	; 0x58
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800640e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006410:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800641c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e5      	bne.n	80063ee <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3314      	adds	r3, #20
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	657b      	str	r3, [r7, #84]	; 0x54
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3314      	adds	r3, #20
 8006440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006442:	63ba      	str	r2, [r7, #56]	; 0x38
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e5      	bne.n	8006422 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3314      	adds	r3, #20
 800645c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	617b      	str	r3, [r7, #20]
   return(result);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646c:	653b      	str	r3, [r7, #80]	; 0x50
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3314      	adds	r3, #20
 8006474:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006476:	627a      	str	r2, [r7, #36]	; 0x24
 8006478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6a39      	ldr	r1, [r7, #32]
 800647c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	61fb      	str	r3, [r7, #28]
   return(result);
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3760      	adds	r7, #96	; 0x60
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	080060a1 	.word	0x080060a1
 8006498:	080061c7 	.word	0x080061c7
 800649c:	080061fd 	.word	0x080061fd

080064a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b089      	sub	sp, #36	; 0x24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	330c      	adds	r3, #12
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	61ba      	str	r2, [r7, #24]
 80064ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6979      	ldr	r1, [r7, #20]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	613b      	str	r3, [r7, #16]
   return(result);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e5      	bne.n	80064a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80064e4:	bf00      	nop
 80064e6:	3724      	adds	r7, #36	; 0x24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b095      	sub	sp, #84	; 0x54
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800650e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006518:	643a      	str	r2, [r7, #64]	; 0x40
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800651e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e5      	bne.n	80064f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3314      	adds	r3, #20
 8006532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	61fb      	str	r3, [r7, #28]
   return(result);
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3314      	adds	r3, #20
 800654a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800654c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e5      	bne.n	800652c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	2b01      	cmp	r3, #1
 8006566:	d119      	bne.n	800659c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	60bb      	str	r3, [r7, #8]
   return(result);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f023 0310 	bic.w	r3, r3, #16
 800657e:	647b      	str	r3, [r7, #68]	; 0x44
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006588:	61ba      	str	r2, [r7, #24]
 800658a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6979      	ldr	r1, [r7, #20]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	613b      	str	r3, [r7, #16]
   return(result);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e5      	bne.n	8006568 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065aa:	bf00      	nop
 80065ac:	3754      	adds	r7, #84	; 0x54
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff fd4f 	bl	8006074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b21      	cmp	r3, #33	; 0x21
 80065f0:	d13e      	bne.n	8006670 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fa:	d114      	bne.n	8006626 <UART_Transmit_IT+0x48>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d110      	bne.n	8006626 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006618:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	1c9a      	adds	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	621a      	str	r2, [r3, #32]
 8006624:	e008      	b.n	8006638 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	1c59      	adds	r1, r3, #1
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6211      	str	r1, [r2, #32]
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29b      	uxth	r3, r3
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4619      	mov	r1, r3
 8006646:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10f      	bne.n	800666c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800665a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800666a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	e000      	b.n	8006672 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006670:	2302      	movs	r3, #2
  }
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fcd4 	bl	800604c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b08c      	sub	sp, #48	; 0x30
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b22      	cmp	r3, #34	; 0x22
 80066c0:	f040 80ab 	bne.w	800681a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d117      	bne.n	80066fe <UART_Receive_IT+0x50>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d113      	bne.n	80066fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	1c9a      	adds	r2, r3, #2
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28
 80066fc:	e026      	b.n	800674c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006710:	d007      	beq.n	8006722 <UART_Receive_IT+0x74>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <UART_Receive_IT+0x82>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e008      	b.n	8006742 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673c:	b2da      	uxtb	r2, r3
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29b      	uxth	r3, r3
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4619      	mov	r1, r3
 800675a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800675c:	2b00      	cmp	r3, #0
 800675e:	d15a      	bne.n	8006816 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0220 	bic.w	r2, r2, #32
 800676e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800677e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	2b01      	cmp	r3, #1
 800679e:	d135      	bne.n	800680c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	613b      	str	r3, [r7, #16]
   return(result);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f023 0310 	bic.w	r3, r3, #16
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	623a      	str	r2, [r7, #32]
 80067c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69f9      	ldr	r1, [r7, #28]
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e5      	bne.n	80067a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d10a      	bne.n	80067fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fc3f 	bl	8006088 <HAL_UARTEx_RxEventCallback>
 800680a:	e002      	b.n	8006812 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fa faef 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e002      	b.n	800681c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3730      	adds	r7, #48	; 0x30
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	b09f      	sub	sp, #124	; 0x7c
 800682a:	af00      	add	r7, sp, #0
 800682c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800682e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683a:	68d9      	ldr	r1, [r3, #12]
 800683c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	ea40 0301 	orr.w	r3, r0, r1
 8006844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	431a      	orrs	r2, r3
 8006850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	431a      	orrs	r2, r3
 8006856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	4313      	orrs	r3, r2
 800685c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800685e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006868:	f021 010c 	bic.w	r1, r1, #12
 800686c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006872:	430b      	orrs	r3, r1
 8006874:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006882:	6999      	ldr	r1, [r3, #24]
 8006884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	ea40 0301 	orr.w	r3, r0, r1
 800688c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4bc5      	ldr	r3, [pc, #788]	; (8006ba8 <UART_SetConfig+0x384>)
 8006894:	429a      	cmp	r2, r3
 8006896:	d004      	beq.n	80068a2 <UART_SetConfig+0x7e>
 8006898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	4bc3      	ldr	r3, [pc, #780]	; (8006bac <UART_SetConfig+0x388>)
 800689e:	429a      	cmp	r2, r3
 80068a0:	d103      	bne.n	80068aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068a2:	f7ff f821 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 80068a6:	6778      	str	r0, [r7, #116]	; 0x74
 80068a8:	e002      	b.n	80068b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068aa:	f7ff f809 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 80068ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b8:	f040 80b6 	bne.w	8006a28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068be:	461c      	mov	r4, r3
 80068c0:	f04f 0500 	mov.w	r5, #0
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	1891      	adds	r1, r2, r2
 80068ca:	6439      	str	r1, [r7, #64]	; 0x40
 80068cc:	415b      	adcs	r3, r3
 80068ce:	647b      	str	r3, [r7, #68]	; 0x44
 80068d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068d4:	1912      	adds	r2, r2, r4
 80068d6:	eb45 0303 	adc.w	r3, r5, r3
 80068da:	f04f 0000 	mov.w	r0, #0
 80068de:	f04f 0100 	mov.w	r1, #0
 80068e2:	00d9      	lsls	r1, r3, #3
 80068e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068e8:	00d0      	lsls	r0, r2, #3
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	1911      	adds	r1, r2, r4
 80068f0:	6639      	str	r1, [r7, #96]	; 0x60
 80068f2:	416b      	adcs	r3, r5
 80068f4:	667b      	str	r3, [r7, #100]	; 0x64
 80068f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	1891      	adds	r1, r2, r2
 8006902:	63b9      	str	r1, [r7, #56]	; 0x38
 8006904:	415b      	adcs	r3, r3
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800690c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006910:	f7f9 fcc6 	bl	80002a0 <__aeabi_uldivmod>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4ba5      	ldr	r3, [pc, #660]	; (8006bb0 <UART_SetConfig+0x38c>)
 800691a:	fba3 2302 	umull	r2, r3, r3, r2
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	011e      	lsls	r6, r3, #4
 8006922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006924:	461c      	mov	r4, r3
 8006926:	f04f 0500 	mov.w	r5, #0
 800692a:	4622      	mov	r2, r4
 800692c:	462b      	mov	r3, r5
 800692e:	1891      	adds	r1, r2, r2
 8006930:	6339      	str	r1, [r7, #48]	; 0x30
 8006932:	415b      	adcs	r3, r3
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
 8006936:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800693a:	1912      	adds	r2, r2, r4
 800693c:	eb45 0303 	adc.w	r3, r5, r3
 8006940:	f04f 0000 	mov.w	r0, #0
 8006944:	f04f 0100 	mov.w	r1, #0
 8006948:	00d9      	lsls	r1, r3, #3
 800694a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800694e:	00d0      	lsls	r0, r2, #3
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	1911      	adds	r1, r2, r4
 8006956:	65b9      	str	r1, [r7, #88]	; 0x58
 8006958:	416b      	adcs	r3, r5
 800695a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800695c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	461a      	mov	r2, r3
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	1891      	adds	r1, r2, r2
 8006968:	62b9      	str	r1, [r7, #40]	; 0x28
 800696a:	415b      	adcs	r3, r3
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800696e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006972:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006976:	f7f9 fc93 	bl	80002a0 <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4b8c      	ldr	r3, [pc, #560]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006980:	fba3 1302 	umull	r1, r3, r3, r2
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	2164      	movs	r1, #100	; 0x64
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	3332      	adds	r3, #50	; 0x32
 8006992:	4a87      	ldr	r2, [pc, #540]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a0:	441e      	add	r6, r3
 80069a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069a4:	4618      	mov	r0, r3
 80069a6:	f04f 0100 	mov.w	r1, #0
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	1894      	adds	r4, r2, r2
 80069b0:	623c      	str	r4, [r7, #32]
 80069b2:	415b      	adcs	r3, r3
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
 80069b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ba:	1812      	adds	r2, r2, r0
 80069bc:	eb41 0303 	adc.w	r3, r1, r3
 80069c0:	f04f 0400 	mov.w	r4, #0
 80069c4:	f04f 0500 	mov.w	r5, #0
 80069c8:	00dd      	lsls	r5, r3, #3
 80069ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069ce:	00d4      	lsls	r4, r2, #3
 80069d0:	4622      	mov	r2, r4
 80069d2:	462b      	mov	r3, r5
 80069d4:	1814      	adds	r4, r2, r0
 80069d6:	653c      	str	r4, [r7, #80]	; 0x50
 80069d8:	414b      	adcs	r3, r1
 80069da:	657b      	str	r3, [r7, #84]	; 0x54
 80069dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	461a      	mov	r2, r3
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	1891      	adds	r1, r2, r2
 80069e8:	61b9      	str	r1, [r7, #24]
 80069ea:	415b      	adcs	r3, r3
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80069f6:	f7f9 fc53 	bl	80002a0 <__aeabi_uldivmod>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4b6c      	ldr	r3, [pc, #432]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006a00:	fba3 1302 	umull	r1, r3, r3, r2
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	2164      	movs	r1, #100	; 0x64
 8006a08:	fb01 f303 	mul.w	r3, r1, r3
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	3332      	adds	r3, #50	; 0x32
 8006a12:	4a67      	ldr	r2, [pc, #412]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006a14:	fba2 2303 	umull	r2, r3, r2, r3
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	f003 0207 	and.w	r2, r3, #7
 8006a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4432      	add	r2, r6
 8006a24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a26:	e0b9      	b.n	8006b9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a2a:	461c      	mov	r4, r3
 8006a2c:	f04f 0500 	mov.w	r5, #0
 8006a30:	4622      	mov	r2, r4
 8006a32:	462b      	mov	r3, r5
 8006a34:	1891      	adds	r1, r2, r2
 8006a36:	6139      	str	r1, [r7, #16]
 8006a38:	415b      	adcs	r3, r3
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a40:	1912      	adds	r2, r2, r4
 8006a42:	eb45 0303 	adc.w	r3, r5, r3
 8006a46:	f04f 0000 	mov.w	r0, #0
 8006a4a:	f04f 0100 	mov.w	r1, #0
 8006a4e:	00d9      	lsls	r1, r3, #3
 8006a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a54:	00d0      	lsls	r0, r2, #3
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	eb12 0804 	adds.w	r8, r2, r4
 8006a5e:	eb43 0905 	adc.w	r9, r3, r5
 8006a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f04f 0100 	mov.w	r1, #0
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	008b      	lsls	r3, r1, #2
 8006a76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a7a:	0082      	lsls	r2, r0, #2
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4649      	mov	r1, r9
 8006a80:	f7f9 fc0e 	bl	80002a0 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4b49      	ldr	r3, [pc, #292]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	011e      	lsls	r6, r3, #4
 8006a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a94:	4618      	mov	r0, r3
 8006a96:	f04f 0100 	mov.w	r1, #0
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	1894      	adds	r4, r2, r2
 8006aa0:	60bc      	str	r4, [r7, #8]
 8006aa2:	415b      	adcs	r3, r3
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aaa:	1812      	adds	r2, r2, r0
 8006aac:	eb41 0303 	adc.w	r3, r1, r3
 8006ab0:	f04f 0400 	mov.w	r4, #0
 8006ab4:	f04f 0500 	mov.w	r5, #0
 8006ab8:	00dd      	lsls	r5, r3, #3
 8006aba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006abe:	00d4      	lsls	r4, r2, #3
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	1814      	adds	r4, r2, r0
 8006ac6:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ac8:	414b      	adcs	r3, r1
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f04f 0100 	mov.w	r1, #0
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	008b      	lsls	r3, r1, #2
 8006ae0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ae4:	0082      	lsls	r2, r0, #2
 8006ae6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006aea:	f7f9 fbd9 	bl	80002a0 <__aeabi_uldivmod>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4b2f      	ldr	r3, [pc, #188]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006af4:	fba3 1302 	umull	r1, r3, r3, r2
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	2164      	movs	r1, #100	; 0x64
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	3332      	adds	r3, #50	; 0x32
 8006b06:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006b08:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b12:	441e      	add	r6, r3
 8006b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b16:	4618      	mov	r0, r3
 8006b18:	f04f 0100 	mov.w	r1, #0
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	1894      	adds	r4, r2, r2
 8006b22:	603c      	str	r4, [r7, #0]
 8006b24:	415b      	adcs	r3, r3
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2c:	1812      	adds	r2, r2, r0
 8006b2e:	eb41 0303 	adc.w	r3, r1, r3
 8006b32:	f04f 0400 	mov.w	r4, #0
 8006b36:	f04f 0500 	mov.w	r5, #0
 8006b3a:	00dd      	lsls	r5, r3, #3
 8006b3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b40:	00d4      	lsls	r4, r2, #3
 8006b42:	4622      	mov	r2, r4
 8006b44:	462b      	mov	r3, r5
 8006b46:	eb12 0a00 	adds.w	sl, r2, r0
 8006b4a:	eb43 0b01 	adc.w	fp, r3, r1
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f04f 0100 	mov.w	r1, #0
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	008b      	lsls	r3, r1, #2
 8006b62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b66:	0082      	lsls	r2, r0, #2
 8006b68:	4650      	mov	r0, sl
 8006b6a:	4659      	mov	r1, fp
 8006b6c:	f7f9 fb98 	bl	80002a0 <__aeabi_uldivmod>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006b76:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	2164      	movs	r1, #100	; 0x64
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	3332      	adds	r3, #50	; 0x32
 8006b88:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <UART_SetConfig+0x38c>)
 8006b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	f003 020f 	and.w	r2, r3, #15
 8006b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4432      	add	r2, r6
 8006b9a:	609a      	str	r2, [r3, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	377c      	adds	r7, #124	; 0x7c
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40011000 	.word	0x40011000
 8006bac:	40011400 	.word	0x40011400
 8006bb0:	51eb851f 	.word	0x51eb851f

08006bb4 <__errno>:
 8006bb4:	4b01      	ldr	r3, [pc, #4]	; (8006bbc <__errno+0x8>)
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	200000e8 	.word	0x200000e8

08006bc0 <__libc_init_array>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	4d0d      	ldr	r5, [pc, #52]	; (8006bf8 <__libc_init_array+0x38>)
 8006bc4:	4c0d      	ldr	r4, [pc, #52]	; (8006bfc <__libc_init_array+0x3c>)
 8006bc6:	1b64      	subs	r4, r4, r5
 8006bc8:	10a4      	asrs	r4, r4, #2
 8006bca:	2600      	movs	r6, #0
 8006bcc:	42a6      	cmp	r6, r4
 8006bce:	d109      	bne.n	8006be4 <__libc_init_array+0x24>
 8006bd0:	4d0b      	ldr	r5, [pc, #44]	; (8006c00 <__libc_init_array+0x40>)
 8006bd2:	4c0c      	ldr	r4, [pc, #48]	; (8006c04 <__libc_init_array+0x44>)
 8006bd4:	f000 fc4e 	bl	8007474 <_init>
 8006bd8:	1b64      	subs	r4, r4, r5
 8006bda:	10a4      	asrs	r4, r4, #2
 8006bdc:	2600      	movs	r6, #0
 8006bde:	42a6      	cmp	r6, r4
 8006be0:	d105      	bne.n	8006bee <__libc_init_array+0x2e>
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be8:	4798      	blx	r3
 8006bea:	3601      	adds	r6, #1
 8006bec:	e7ee      	b.n	8006bcc <__libc_init_array+0xc>
 8006bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf2:	4798      	blx	r3
 8006bf4:	3601      	adds	r6, #1
 8006bf6:	e7f2      	b.n	8006bde <__libc_init_array+0x1e>
 8006bf8:	08007564 	.word	0x08007564
 8006bfc:	08007564 	.word	0x08007564
 8006c00:	08007564 	.word	0x08007564
 8006c04:	08007568 	.word	0x08007568

08006c08 <memset>:
 8006c08:	4402      	add	r2, r0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d100      	bne.n	8006c12 <memset+0xa>
 8006c10:	4770      	bx	lr
 8006c12:	f803 1b01 	strb.w	r1, [r3], #1
 8006c16:	e7f9      	b.n	8006c0c <memset+0x4>

08006c18 <siprintf>:
 8006c18:	b40e      	push	{r1, r2, r3}
 8006c1a:	b500      	push	{lr}
 8006c1c:	b09c      	sub	sp, #112	; 0x70
 8006c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c20:	9002      	str	r0, [sp, #8]
 8006c22:	9006      	str	r0, [sp, #24]
 8006c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c28:	4809      	ldr	r0, [pc, #36]	; (8006c50 <siprintf+0x38>)
 8006c2a:	9107      	str	r1, [sp, #28]
 8006c2c:	9104      	str	r1, [sp, #16]
 8006c2e:	4909      	ldr	r1, [pc, #36]	; (8006c54 <siprintf+0x3c>)
 8006c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c34:	9105      	str	r1, [sp, #20]
 8006c36:	6800      	ldr	r0, [r0, #0]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	a902      	add	r1, sp, #8
 8006c3c:	f000 f868 	bl	8006d10 <_svfiprintf_r>
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	b01c      	add	sp, #112	; 0x70
 8006c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c4c:	b003      	add	sp, #12
 8006c4e:	4770      	bx	lr
 8006c50:	200000e8 	.word	0x200000e8
 8006c54:	ffff0208 	.word	0xffff0208

08006c58 <__ssputs_r>:
 8006c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5c:	688e      	ldr	r6, [r1, #8]
 8006c5e:	429e      	cmp	r6, r3
 8006c60:	4682      	mov	sl, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	4690      	mov	r8, r2
 8006c66:	461f      	mov	r7, r3
 8006c68:	d838      	bhi.n	8006cdc <__ssputs_r+0x84>
 8006c6a:	898a      	ldrh	r2, [r1, #12]
 8006c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c70:	d032      	beq.n	8006cd8 <__ssputs_r+0x80>
 8006c72:	6825      	ldr	r5, [r4, #0]
 8006c74:	6909      	ldr	r1, [r1, #16]
 8006c76:	eba5 0901 	sub.w	r9, r5, r1
 8006c7a:	6965      	ldr	r5, [r4, #20]
 8006c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c84:	3301      	adds	r3, #1
 8006c86:	444b      	add	r3, r9
 8006c88:	106d      	asrs	r5, r5, #1
 8006c8a:	429d      	cmp	r5, r3
 8006c8c:	bf38      	it	cc
 8006c8e:	461d      	movcc	r5, r3
 8006c90:	0553      	lsls	r3, r2, #21
 8006c92:	d531      	bpl.n	8006cf8 <__ssputs_r+0xa0>
 8006c94:	4629      	mov	r1, r5
 8006c96:	f000 fb47 	bl	8007328 <_malloc_r>
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	b950      	cbnz	r0, 8006cb4 <__ssputs_r+0x5c>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	f8ca 3000 	str.w	r3, [sl]
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb4:	6921      	ldr	r1, [r4, #16]
 8006cb6:	464a      	mov	r2, r9
 8006cb8:	f000 fabe 	bl	8007238 <memcpy>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	6126      	str	r6, [r4, #16]
 8006cca:	6165      	str	r5, [r4, #20]
 8006ccc:	444e      	add	r6, r9
 8006cce:	eba5 0509 	sub.w	r5, r5, r9
 8006cd2:	6026      	str	r6, [r4, #0]
 8006cd4:	60a5      	str	r5, [r4, #8]
 8006cd6:	463e      	mov	r6, r7
 8006cd8:	42be      	cmp	r6, r7
 8006cda:	d900      	bls.n	8006cde <__ssputs_r+0x86>
 8006cdc:	463e      	mov	r6, r7
 8006cde:	4632      	mov	r2, r6
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	f000 fab6 	bl	8007254 <memmove>
 8006ce8:	68a3      	ldr	r3, [r4, #8]
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	1b9b      	subs	r3, r3, r6
 8006cee:	4432      	add	r2, r6
 8006cf0:	60a3      	str	r3, [r4, #8]
 8006cf2:	6022      	str	r2, [r4, #0]
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e7db      	b.n	8006cb0 <__ssputs_r+0x58>
 8006cf8:	462a      	mov	r2, r5
 8006cfa:	f000 fb6f 	bl	80073dc <_realloc_r>
 8006cfe:	4606      	mov	r6, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d1e1      	bne.n	8006cc8 <__ssputs_r+0x70>
 8006d04:	6921      	ldr	r1, [r4, #16]
 8006d06:	4650      	mov	r0, sl
 8006d08:	f000 fabe 	bl	8007288 <_free_r>
 8006d0c:	e7c7      	b.n	8006c9e <__ssputs_r+0x46>
	...

08006d10 <_svfiprintf_r>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	4698      	mov	r8, r3
 8006d16:	898b      	ldrh	r3, [r1, #12]
 8006d18:	061b      	lsls	r3, r3, #24
 8006d1a:	b09d      	sub	sp, #116	; 0x74
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460d      	mov	r5, r1
 8006d20:	4614      	mov	r4, r2
 8006d22:	d50e      	bpl.n	8006d42 <_svfiprintf_r+0x32>
 8006d24:	690b      	ldr	r3, [r1, #16]
 8006d26:	b963      	cbnz	r3, 8006d42 <_svfiprintf_r+0x32>
 8006d28:	2140      	movs	r1, #64	; 0x40
 8006d2a:	f000 fafd 	bl	8007328 <_malloc_r>
 8006d2e:	6028      	str	r0, [r5, #0]
 8006d30:	6128      	str	r0, [r5, #16]
 8006d32:	b920      	cbnz	r0, 8006d3e <_svfiprintf_r+0x2e>
 8006d34:	230c      	movs	r3, #12
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	e0d1      	b.n	8006ee2 <_svfiprintf_r+0x1d2>
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	616b      	str	r3, [r5, #20]
 8006d42:	2300      	movs	r3, #0
 8006d44:	9309      	str	r3, [sp, #36]	; 0x24
 8006d46:	2320      	movs	r3, #32
 8006d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d50:	2330      	movs	r3, #48	; 0x30
 8006d52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006efc <_svfiprintf_r+0x1ec>
 8006d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d5a:	f04f 0901 	mov.w	r9, #1
 8006d5e:	4623      	mov	r3, r4
 8006d60:	469a      	mov	sl, r3
 8006d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d66:	b10a      	cbz	r2, 8006d6c <_svfiprintf_r+0x5c>
 8006d68:	2a25      	cmp	r2, #37	; 0x25
 8006d6a:	d1f9      	bne.n	8006d60 <_svfiprintf_r+0x50>
 8006d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d70:	d00b      	beq.n	8006d8a <_svfiprintf_r+0x7a>
 8006d72:	465b      	mov	r3, fp
 8006d74:	4622      	mov	r2, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff ff6d 	bl	8006c58 <__ssputs_r>
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f000 80aa 	beq.w	8006ed8 <_svfiprintf_r+0x1c8>
 8006d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d86:	445a      	add	r2, fp
 8006d88:	9209      	str	r2, [sp, #36]	; 0x24
 8006d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80a2 	beq.w	8006ed8 <_svfiprintf_r+0x1c8>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d9e:	f10a 0a01 	add.w	sl, sl, #1
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	9307      	str	r3, [sp, #28]
 8006da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006daa:	931a      	str	r3, [sp, #104]	; 0x68
 8006dac:	4654      	mov	r4, sl
 8006dae:	2205      	movs	r2, #5
 8006db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db4:	4851      	ldr	r0, [pc, #324]	; (8006efc <_svfiprintf_r+0x1ec>)
 8006db6:	f7f9 fa23 	bl	8000200 <memchr>
 8006dba:	9a04      	ldr	r2, [sp, #16]
 8006dbc:	b9d8      	cbnz	r0, 8006df6 <_svfiprintf_r+0xe6>
 8006dbe:	06d0      	lsls	r0, r2, #27
 8006dc0:	bf44      	itt	mi
 8006dc2:	2320      	movmi	r3, #32
 8006dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dc8:	0711      	lsls	r1, r2, #28
 8006dca:	bf44      	itt	mi
 8006dcc:	232b      	movmi	r3, #43	; 0x2b
 8006dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd8:	d015      	beq.n	8006e06 <_svfiprintf_r+0xf6>
 8006dda:	9a07      	ldr	r2, [sp, #28]
 8006ddc:	4654      	mov	r4, sl
 8006dde:	2000      	movs	r0, #0
 8006de0:	f04f 0c0a 	mov.w	ip, #10
 8006de4:	4621      	mov	r1, r4
 8006de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dea:	3b30      	subs	r3, #48	; 0x30
 8006dec:	2b09      	cmp	r3, #9
 8006dee:	d94e      	bls.n	8006e8e <_svfiprintf_r+0x17e>
 8006df0:	b1b0      	cbz	r0, 8006e20 <_svfiprintf_r+0x110>
 8006df2:	9207      	str	r2, [sp, #28]
 8006df4:	e014      	b.n	8006e20 <_svfiprintf_r+0x110>
 8006df6:	eba0 0308 	sub.w	r3, r0, r8
 8006dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	46a2      	mov	sl, r4
 8006e04:	e7d2      	b.n	8006dac <_svfiprintf_r+0x9c>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	1d19      	adds	r1, r3, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	9103      	str	r1, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfbb      	ittet	lt
 8006e12:	425b      	neglt	r3, r3
 8006e14:	f042 0202 	orrlt.w	r2, r2, #2
 8006e18:	9307      	strge	r3, [sp, #28]
 8006e1a:	9307      	strlt	r3, [sp, #28]
 8006e1c:	bfb8      	it	lt
 8006e1e:	9204      	strlt	r2, [sp, #16]
 8006e20:	7823      	ldrb	r3, [r4, #0]
 8006e22:	2b2e      	cmp	r3, #46	; 0x2e
 8006e24:	d10c      	bne.n	8006e40 <_svfiprintf_r+0x130>
 8006e26:	7863      	ldrb	r3, [r4, #1]
 8006e28:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2a:	d135      	bne.n	8006e98 <_svfiprintf_r+0x188>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	1d1a      	adds	r2, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	9203      	str	r2, [sp, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bfb8      	it	lt
 8006e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e3c:	3402      	adds	r4, #2
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f0c <_svfiprintf_r+0x1fc>
 8006e44:	7821      	ldrb	r1, [r4, #0]
 8006e46:	2203      	movs	r2, #3
 8006e48:	4650      	mov	r0, sl
 8006e4a:	f7f9 f9d9 	bl	8000200 <memchr>
 8006e4e:	b140      	cbz	r0, 8006e62 <_svfiprintf_r+0x152>
 8006e50:	2340      	movs	r3, #64	; 0x40
 8006e52:	eba0 000a 	sub.w	r0, r0, sl
 8006e56:	fa03 f000 	lsl.w	r0, r3, r0
 8006e5a:	9b04      	ldr	r3, [sp, #16]
 8006e5c:	4303      	orrs	r3, r0
 8006e5e:	3401      	adds	r4, #1
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e66:	4826      	ldr	r0, [pc, #152]	; (8006f00 <_svfiprintf_r+0x1f0>)
 8006e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e6c:	2206      	movs	r2, #6
 8006e6e:	f7f9 f9c7 	bl	8000200 <memchr>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d038      	beq.n	8006ee8 <_svfiprintf_r+0x1d8>
 8006e76:	4b23      	ldr	r3, [pc, #140]	; (8006f04 <_svfiprintf_r+0x1f4>)
 8006e78:	bb1b      	cbnz	r3, 8006ec2 <_svfiprintf_r+0x1b2>
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	3307      	adds	r3, #7
 8006e7e:	f023 0307 	bic.w	r3, r3, #7
 8006e82:	3308      	adds	r3, #8
 8006e84:	9303      	str	r3, [sp, #12]
 8006e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e88:	4433      	add	r3, r6
 8006e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8c:	e767      	b.n	8006d5e <_svfiprintf_r+0x4e>
 8006e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e92:	460c      	mov	r4, r1
 8006e94:	2001      	movs	r0, #1
 8006e96:	e7a5      	b.n	8006de4 <_svfiprintf_r+0xd4>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	3401      	adds	r4, #1
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f04f 0c0a 	mov.w	ip, #10
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eaa:	3a30      	subs	r2, #48	; 0x30
 8006eac:	2a09      	cmp	r2, #9
 8006eae:	d903      	bls.n	8006eb8 <_svfiprintf_r+0x1a8>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0c5      	beq.n	8006e40 <_svfiprintf_r+0x130>
 8006eb4:	9105      	str	r1, [sp, #20]
 8006eb6:	e7c3      	b.n	8006e40 <_svfiprintf_r+0x130>
 8006eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e7f0      	b.n	8006ea4 <_svfiprintf_r+0x194>
 8006ec2:	ab03      	add	r3, sp, #12
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	462a      	mov	r2, r5
 8006ec8:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <_svfiprintf_r+0x1f8>)
 8006eca:	a904      	add	r1, sp, #16
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f3af 8000 	nop.w
 8006ed2:	1c42      	adds	r2, r0, #1
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	d1d6      	bne.n	8006e86 <_svfiprintf_r+0x176>
 8006ed8:	89ab      	ldrh	r3, [r5, #12]
 8006eda:	065b      	lsls	r3, r3, #25
 8006edc:	f53f af2c 	bmi.w	8006d38 <_svfiprintf_r+0x28>
 8006ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ee2:	b01d      	add	sp, #116	; 0x74
 8006ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee8:	ab03      	add	r3, sp, #12
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	462a      	mov	r2, r5
 8006eee:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <_svfiprintf_r+0x1f8>)
 8006ef0:	a904      	add	r1, sp, #16
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f000 f87a 	bl	8006fec <_printf_i>
 8006ef8:	e7eb      	b.n	8006ed2 <_svfiprintf_r+0x1c2>
 8006efa:	bf00      	nop
 8006efc:	08007528 	.word	0x08007528
 8006f00:	08007532 	.word	0x08007532
 8006f04:	00000000 	.word	0x00000000
 8006f08:	08006c59 	.word	0x08006c59
 8006f0c:	0800752e 	.word	0x0800752e

08006f10 <_printf_common>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	4616      	mov	r6, r2
 8006f16:	4699      	mov	r9, r3
 8006f18:	688a      	ldr	r2, [r1, #8]
 8006f1a:	690b      	ldr	r3, [r1, #16]
 8006f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	bfb8      	it	lt
 8006f24:	4613      	movlt	r3, r2
 8006f26:	6033      	str	r3, [r6, #0]
 8006f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	b10a      	cbz	r2, 8006f36 <_printf_common+0x26>
 8006f32:	3301      	adds	r3, #1
 8006f34:	6033      	str	r3, [r6, #0]
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	0699      	lsls	r1, r3, #26
 8006f3a:	bf42      	ittt	mi
 8006f3c:	6833      	ldrmi	r3, [r6, #0]
 8006f3e:	3302      	addmi	r3, #2
 8006f40:	6033      	strmi	r3, [r6, #0]
 8006f42:	6825      	ldr	r5, [r4, #0]
 8006f44:	f015 0506 	ands.w	r5, r5, #6
 8006f48:	d106      	bne.n	8006f58 <_printf_common+0x48>
 8006f4a:	f104 0a19 	add.w	sl, r4, #25
 8006f4e:	68e3      	ldr	r3, [r4, #12]
 8006f50:	6832      	ldr	r2, [r6, #0]
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	42ab      	cmp	r3, r5
 8006f56:	dc26      	bgt.n	8006fa6 <_printf_common+0x96>
 8006f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f5c:	1e13      	subs	r3, r2, #0
 8006f5e:	6822      	ldr	r2, [r4, #0]
 8006f60:	bf18      	it	ne
 8006f62:	2301      	movne	r3, #1
 8006f64:	0692      	lsls	r2, r2, #26
 8006f66:	d42b      	bmi.n	8006fc0 <_printf_common+0xb0>
 8006f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	4638      	mov	r0, r7
 8006f70:	47c0      	blx	r8
 8006f72:	3001      	adds	r0, #1
 8006f74:	d01e      	beq.n	8006fb4 <_printf_common+0xa4>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	68e5      	ldr	r5, [r4, #12]
 8006f7a:	6832      	ldr	r2, [r6, #0]
 8006f7c:	f003 0306 	and.w	r3, r3, #6
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	bf08      	it	eq
 8006f84:	1aad      	subeq	r5, r5, r2
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	6922      	ldr	r2, [r4, #16]
 8006f8a:	bf0c      	ite	eq
 8006f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f90:	2500      	movne	r5, #0
 8006f92:	4293      	cmp	r3, r2
 8006f94:	bfc4      	itt	gt
 8006f96:	1a9b      	subgt	r3, r3, r2
 8006f98:	18ed      	addgt	r5, r5, r3
 8006f9a:	2600      	movs	r6, #0
 8006f9c:	341a      	adds	r4, #26
 8006f9e:	42b5      	cmp	r5, r6
 8006fa0:	d11a      	bne.n	8006fd8 <_printf_common+0xc8>
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e008      	b.n	8006fb8 <_printf_common+0xa8>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4652      	mov	r2, sl
 8006faa:	4649      	mov	r1, r9
 8006fac:	4638      	mov	r0, r7
 8006fae:	47c0      	blx	r8
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d103      	bne.n	8006fbc <_printf_common+0xac>
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	e7c6      	b.n	8006f4e <_printf_common+0x3e>
 8006fc0:	18e1      	adds	r1, r4, r3
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	2030      	movs	r0, #48	; 0x30
 8006fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fca:	4422      	add	r2, r4
 8006fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	e7c7      	b.n	8006f68 <_printf_common+0x58>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4622      	mov	r2, r4
 8006fdc:	4649      	mov	r1, r9
 8006fde:	4638      	mov	r0, r7
 8006fe0:	47c0      	blx	r8
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d0e6      	beq.n	8006fb4 <_printf_common+0xa4>
 8006fe6:	3601      	adds	r6, #1
 8006fe8:	e7d9      	b.n	8006f9e <_printf_common+0x8e>
	...

08006fec <_printf_i>:
 8006fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	4691      	mov	r9, r2
 8006ff4:	7e27      	ldrb	r7, [r4, #24]
 8006ff6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ff8:	2f78      	cmp	r7, #120	; 0x78
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	469a      	mov	sl, r3
 8006ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007002:	d807      	bhi.n	8007014 <_printf_i+0x28>
 8007004:	2f62      	cmp	r7, #98	; 0x62
 8007006:	d80a      	bhi.n	800701e <_printf_i+0x32>
 8007008:	2f00      	cmp	r7, #0
 800700a:	f000 80d8 	beq.w	80071be <_printf_i+0x1d2>
 800700e:	2f58      	cmp	r7, #88	; 0x58
 8007010:	f000 80a3 	beq.w	800715a <_printf_i+0x16e>
 8007014:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800701c:	e03a      	b.n	8007094 <_printf_i+0xa8>
 800701e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007022:	2b15      	cmp	r3, #21
 8007024:	d8f6      	bhi.n	8007014 <_printf_i+0x28>
 8007026:	a001      	add	r0, pc, #4	; (adr r0, 800702c <_printf_i+0x40>)
 8007028:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800702c:	08007085 	.word	0x08007085
 8007030:	08007099 	.word	0x08007099
 8007034:	08007015 	.word	0x08007015
 8007038:	08007015 	.word	0x08007015
 800703c:	08007015 	.word	0x08007015
 8007040:	08007015 	.word	0x08007015
 8007044:	08007099 	.word	0x08007099
 8007048:	08007015 	.word	0x08007015
 800704c:	08007015 	.word	0x08007015
 8007050:	08007015 	.word	0x08007015
 8007054:	08007015 	.word	0x08007015
 8007058:	080071a5 	.word	0x080071a5
 800705c:	080070c9 	.word	0x080070c9
 8007060:	08007187 	.word	0x08007187
 8007064:	08007015 	.word	0x08007015
 8007068:	08007015 	.word	0x08007015
 800706c:	080071c7 	.word	0x080071c7
 8007070:	08007015 	.word	0x08007015
 8007074:	080070c9 	.word	0x080070c9
 8007078:	08007015 	.word	0x08007015
 800707c:	08007015 	.word	0x08007015
 8007080:	0800718f 	.word	0x0800718f
 8007084:	680b      	ldr	r3, [r1, #0]
 8007086:	1d1a      	adds	r2, r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	600a      	str	r2, [r1, #0]
 800708c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007094:	2301      	movs	r3, #1
 8007096:	e0a3      	b.n	80071e0 <_printf_i+0x1f4>
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	6808      	ldr	r0, [r1, #0]
 800709c:	062e      	lsls	r6, r5, #24
 800709e:	f100 0304 	add.w	r3, r0, #4
 80070a2:	d50a      	bpl.n	80070ba <_printf_i+0xce>
 80070a4:	6805      	ldr	r5, [r0, #0]
 80070a6:	600b      	str	r3, [r1, #0]
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	da03      	bge.n	80070b4 <_printf_i+0xc8>
 80070ac:	232d      	movs	r3, #45	; 0x2d
 80070ae:	426d      	negs	r5, r5
 80070b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b4:	485e      	ldr	r0, [pc, #376]	; (8007230 <_printf_i+0x244>)
 80070b6:	230a      	movs	r3, #10
 80070b8:	e019      	b.n	80070ee <_printf_i+0x102>
 80070ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070be:	6805      	ldr	r5, [r0, #0]
 80070c0:	600b      	str	r3, [r1, #0]
 80070c2:	bf18      	it	ne
 80070c4:	b22d      	sxthne	r5, r5
 80070c6:	e7ef      	b.n	80070a8 <_printf_i+0xbc>
 80070c8:	680b      	ldr	r3, [r1, #0]
 80070ca:	6825      	ldr	r5, [r4, #0]
 80070cc:	1d18      	adds	r0, r3, #4
 80070ce:	6008      	str	r0, [r1, #0]
 80070d0:	0628      	lsls	r0, r5, #24
 80070d2:	d501      	bpl.n	80070d8 <_printf_i+0xec>
 80070d4:	681d      	ldr	r5, [r3, #0]
 80070d6:	e002      	b.n	80070de <_printf_i+0xf2>
 80070d8:	0669      	lsls	r1, r5, #25
 80070da:	d5fb      	bpl.n	80070d4 <_printf_i+0xe8>
 80070dc:	881d      	ldrh	r5, [r3, #0]
 80070de:	4854      	ldr	r0, [pc, #336]	; (8007230 <_printf_i+0x244>)
 80070e0:	2f6f      	cmp	r7, #111	; 0x6f
 80070e2:	bf0c      	ite	eq
 80070e4:	2308      	moveq	r3, #8
 80070e6:	230a      	movne	r3, #10
 80070e8:	2100      	movs	r1, #0
 80070ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070ee:	6866      	ldr	r6, [r4, #4]
 80070f0:	60a6      	str	r6, [r4, #8]
 80070f2:	2e00      	cmp	r6, #0
 80070f4:	bfa2      	ittt	ge
 80070f6:	6821      	ldrge	r1, [r4, #0]
 80070f8:	f021 0104 	bicge.w	r1, r1, #4
 80070fc:	6021      	strge	r1, [r4, #0]
 80070fe:	b90d      	cbnz	r5, 8007104 <_printf_i+0x118>
 8007100:	2e00      	cmp	r6, #0
 8007102:	d04d      	beq.n	80071a0 <_printf_i+0x1b4>
 8007104:	4616      	mov	r6, r2
 8007106:	fbb5 f1f3 	udiv	r1, r5, r3
 800710a:	fb03 5711 	mls	r7, r3, r1, r5
 800710e:	5dc7      	ldrb	r7, [r0, r7]
 8007110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007114:	462f      	mov	r7, r5
 8007116:	42bb      	cmp	r3, r7
 8007118:	460d      	mov	r5, r1
 800711a:	d9f4      	bls.n	8007106 <_printf_i+0x11a>
 800711c:	2b08      	cmp	r3, #8
 800711e:	d10b      	bne.n	8007138 <_printf_i+0x14c>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	07df      	lsls	r7, r3, #31
 8007124:	d508      	bpl.n	8007138 <_printf_i+0x14c>
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	6861      	ldr	r1, [r4, #4]
 800712a:	4299      	cmp	r1, r3
 800712c:	bfde      	ittt	le
 800712e:	2330      	movle	r3, #48	; 0x30
 8007130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007134:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007138:	1b92      	subs	r2, r2, r6
 800713a:	6122      	str	r2, [r4, #16]
 800713c:	f8cd a000 	str.w	sl, [sp]
 8007140:	464b      	mov	r3, r9
 8007142:	aa03      	add	r2, sp, #12
 8007144:	4621      	mov	r1, r4
 8007146:	4640      	mov	r0, r8
 8007148:	f7ff fee2 	bl	8006f10 <_printf_common>
 800714c:	3001      	adds	r0, #1
 800714e:	d14c      	bne.n	80071ea <_printf_i+0x1fe>
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
 8007154:	b004      	add	sp, #16
 8007156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715a:	4835      	ldr	r0, [pc, #212]	; (8007230 <_printf_i+0x244>)
 800715c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	680e      	ldr	r6, [r1, #0]
 8007164:	061f      	lsls	r7, r3, #24
 8007166:	f856 5b04 	ldr.w	r5, [r6], #4
 800716a:	600e      	str	r6, [r1, #0]
 800716c:	d514      	bpl.n	8007198 <_printf_i+0x1ac>
 800716e:	07d9      	lsls	r1, r3, #31
 8007170:	bf44      	itt	mi
 8007172:	f043 0320 	orrmi.w	r3, r3, #32
 8007176:	6023      	strmi	r3, [r4, #0]
 8007178:	b91d      	cbnz	r5, 8007182 <_printf_i+0x196>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f023 0320 	bic.w	r3, r3, #32
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	2310      	movs	r3, #16
 8007184:	e7b0      	b.n	80070e8 <_printf_i+0xfc>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	f043 0320 	orr.w	r3, r3, #32
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	2378      	movs	r3, #120	; 0x78
 8007190:	4828      	ldr	r0, [pc, #160]	; (8007234 <_printf_i+0x248>)
 8007192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007196:	e7e3      	b.n	8007160 <_printf_i+0x174>
 8007198:	065e      	lsls	r6, r3, #25
 800719a:	bf48      	it	mi
 800719c:	b2ad      	uxthmi	r5, r5
 800719e:	e7e6      	b.n	800716e <_printf_i+0x182>
 80071a0:	4616      	mov	r6, r2
 80071a2:	e7bb      	b.n	800711c <_printf_i+0x130>
 80071a4:	680b      	ldr	r3, [r1, #0]
 80071a6:	6826      	ldr	r6, [r4, #0]
 80071a8:	6960      	ldr	r0, [r4, #20]
 80071aa:	1d1d      	adds	r5, r3, #4
 80071ac:	600d      	str	r5, [r1, #0]
 80071ae:	0635      	lsls	r5, r6, #24
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0x1cc>
 80071b4:	6018      	str	r0, [r3, #0]
 80071b6:	e002      	b.n	80071be <_printf_i+0x1d2>
 80071b8:	0671      	lsls	r1, r6, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0x1c8>
 80071bc:	8018      	strh	r0, [r3, #0]
 80071be:	2300      	movs	r3, #0
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	4616      	mov	r6, r2
 80071c4:	e7ba      	b.n	800713c <_printf_i+0x150>
 80071c6:	680b      	ldr	r3, [r1, #0]
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	600a      	str	r2, [r1, #0]
 80071cc:	681e      	ldr	r6, [r3, #0]
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	2100      	movs	r1, #0
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7f9 f814 	bl	8000200 <memchr>
 80071d8:	b108      	cbz	r0, 80071de <_printf_i+0x1f2>
 80071da:	1b80      	subs	r0, r0, r6
 80071dc:	6060      	str	r0, [r4, #4]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	2300      	movs	r3, #0
 80071e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e8:	e7a8      	b.n	800713c <_printf_i+0x150>
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	4632      	mov	r2, r6
 80071ee:	4649      	mov	r1, r9
 80071f0:	4640      	mov	r0, r8
 80071f2:	47d0      	blx	sl
 80071f4:	3001      	adds	r0, #1
 80071f6:	d0ab      	beq.n	8007150 <_printf_i+0x164>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	079b      	lsls	r3, r3, #30
 80071fc:	d413      	bmi.n	8007226 <_printf_i+0x23a>
 80071fe:	68e0      	ldr	r0, [r4, #12]
 8007200:	9b03      	ldr	r3, [sp, #12]
 8007202:	4298      	cmp	r0, r3
 8007204:	bfb8      	it	lt
 8007206:	4618      	movlt	r0, r3
 8007208:	e7a4      	b.n	8007154 <_printf_i+0x168>
 800720a:	2301      	movs	r3, #1
 800720c:	4632      	mov	r2, r6
 800720e:	4649      	mov	r1, r9
 8007210:	4640      	mov	r0, r8
 8007212:	47d0      	blx	sl
 8007214:	3001      	adds	r0, #1
 8007216:	d09b      	beq.n	8007150 <_printf_i+0x164>
 8007218:	3501      	adds	r5, #1
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	9903      	ldr	r1, [sp, #12]
 800721e:	1a5b      	subs	r3, r3, r1
 8007220:	42ab      	cmp	r3, r5
 8007222:	dcf2      	bgt.n	800720a <_printf_i+0x21e>
 8007224:	e7eb      	b.n	80071fe <_printf_i+0x212>
 8007226:	2500      	movs	r5, #0
 8007228:	f104 0619 	add.w	r6, r4, #25
 800722c:	e7f5      	b.n	800721a <_printf_i+0x22e>
 800722e:	bf00      	nop
 8007230:	08007539 	.word	0x08007539
 8007234:	0800754a 	.word	0x0800754a

08007238 <memcpy>:
 8007238:	440a      	add	r2, r1
 800723a:	4291      	cmp	r1, r2
 800723c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007240:	d100      	bne.n	8007244 <memcpy+0xc>
 8007242:	4770      	bx	lr
 8007244:	b510      	push	{r4, lr}
 8007246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800724e:	4291      	cmp	r1, r2
 8007250:	d1f9      	bne.n	8007246 <memcpy+0xe>
 8007252:	bd10      	pop	{r4, pc}

08007254 <memmove>:
 8007254:	4288      	cmp	r0, r1
 8007256:	b510      	push	{r4, lr}
 8007258:	eb01 0402 	add.w	r4, r1, r2
 800725c:	d902      	bls.n	8007264 <memmove+0x10>
 800725e:	4284      	cmp	r4, r0
 8007260:	4623      	mov	r3, r4
 8007262:	d807      	bhi.n	8007274 <memmove+0x20>
 8007264:	1e43      	subs	r3, r0, #1
 8007266:	42a1      	cmp	r1, r4
 8007268:	d008      	beq.n	800727c <memmove+0x28>
 800726a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800726e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007272:	e7f8      	b.n	8007266 <memmove+0x12>
 8007274:	4402      	add	r2, r0
 8007276:	4601      	mov	r1, r0
 8007278:	428a      	cmp	r2, r1
 800727a:	d100      	bne.n	800727e <memmove+0x2a>
 800727c:	bd10      	pop	{r4, pc}
 800727e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007286:	e7f7      	b.n	8007278 <memmove+0x24>

08007288 <_free_r>:
 8007288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800728a:	2900      	cmp	r1, #0
 800728c:	d048      	beq.n	8007320 <_free_r+0x98>
 800728e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007292:	9001      	str	r0, [sp, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f1a1 0404 	sub.w	r4, r1, #4
 800729a:	bfb8      	it	lt
 800729c:	18e4      	addlt	r4, r4, r3
 800729e:	f000 f8d3 	bl	8007448 <__malloc_lock>
 80072a2:	4a20      	ldr	r2, [pc, #128]	; (8007324 <_free_r+0x9c>)
 80072a4:	9801      	ldr	r0, [sp, #4]
 80072a6:	6813      	ldr	r3, [r2, #0]
 80072a8:	4615      	mov	r5, r2
 80072aa:	b933      	cbnz	r3, 80072ba <_free_r+0x32>
 80072ac:	6063      	str	r3, [r4, #4]
 80072ae:	6014      	str	r4, [r2, #0]
 80072b0:	b003      	add	sp, #12
 80072b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072b6:	f000 b8cd 	b.w	8007454 <__malloc_unlock>
 80072ba:	42a3      	cmp	r3, r4
 80072bc:	d90b      	bls.n	80072d6 <_free_r+0x4e>
 80072be:	6821      	ldr	r1, [r4, #0]
 80072c0:	1862      	adds	r2, r4, r1
 80072c2:	4293      	cmp	r3, r2
 80072c4:	bf04      	itt	eq
 80072c6:	681a      	ldreq	r2, [r3, #0]
 80072c8:	685b      	ldreq	r3, [r3, #4]
 80072ca:	6063      	str	r3, [r4, #4]
 80072cc:	bf04      	itt	eq
 80072ce:	1852      	addeq	r2, r2, r1
 80072d0:	6022      	streq	r2, [r4, #0]
 80072d2:	602c      	str	r4, [r5, #0]
 80072d4:	e7ec      	b.n	80072b0 <_free_r+0x28>
 80072d6:	461a      	mov	r2, r3
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	b10b      	cbz	r3, 80072e0 <_free_r+0x58>
 80072dc:	42a3      	cmp	r3, r4
 80072de:	d9fa      	bls.n	80072d6 <_free_r+0x4e>
 80072e0:	6811      	ldr	r1, [r2, #0]
 80072e2:	1855      	adds	r5, r2, r1
 80072e4:	42a5      	cmp	r5, r4
 80072e6:	d10b      	bne.n	8007300 <_free_r+0x78>
 80072e8:	6824      	ldr	r4, [r4, #0]
 80072ea:	4421      	add	r1, r4
 80072ec:	1854      	adds	r4, r2, r1
 80072ee:	42a3      	cmp	r3, r4
 80072f0:	6011      	str	r1, [r2, #0]
 80072f2:	d1dd      	bne.n	80072b0 <_free_r+0x28>
 80072f4:	681c      	ldr	r4, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	6053      	str	r3, [r2, #4]
 80072fa:	4421      	add	r1, r4
 80072fc:	6011      	str	r1, [r2, #0]
 80072fe:	e7d7      	b.n	80072b0 <_free_r+0x28>
 8007300:	d902      	bls.n	8007308 <_free_r+0x80>
 8007302:	230c      	movs	r3, #12
 8007304:	6003      	str	r3, [r0, #0]
 8007306:	e7d3      	b.n	80072b0 <_free_r+0x28>
 8007308:	6825      	ldr	r5, [r4, #0]
 800730a:	1961      	adds	r1, r4, r5
 800730c:	428b      	cmp	r3, r1
 800730e:	bf04      	itt	eq
 8007310:	6819      	ldreq	r1, [r3, #0]
 8007312:	685b      	ldreq	r3, [r3, #4]
 8007314:	6063      	str	r3, [r4, #4]
 8007316:	bf04      	itt	eq
 8007318:	1949      	addeq	r1, r1, r5
 800731a:	6021      	streq	r1, [r4, #0]
 800731c:	6054      	str	r4, [r2, #4]
 800731e:	e7c7      	b.n	80072b0 <_free_r+0x28>
 8007320:	b003      	add	sp, #12
 8007322:	bd30      	pop	{r4, r5, pc}
 8007324:	2000017c 	.word	0x2000017c

08007328 <_malloc_r>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	1ccd      	adds	r5, r1, #3
 800732c:	f025 0503 	bic.w	r5, r5, #3
 8007330:	3508      	adds	r5, #8
 8007332:	2d0c      	cmp	r5, #12
 8007334:	bf38      	it	cc
 8007336:	250c      	movcc	r5, #12
 8007338:	2d00      	cmp	r5, #0
 800733a:	4606      	mov	r6, r0
 800733c:	db01      	blt.n	8007342 <_malloc_r+0x1a>
 800733e:	42a9      	cmp	r1, r5
 8007340:	d903      	bls.n	800734a <_malloc_r+0x22>
 8007342:	230c      	movs	r3, #12
 8007344:	6033      	str	r3, [r6, #0]
 8007346:	2000      	movs	r0, #0
 8007348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734a:	f000 f87d 	bl	8007448 <__malloc_lock>
 800734e:	4921      	ldr	r1, [pc, #132]	; (80073d4 <_malloc_r+0xac>)
 8007350:	680a      	ldr	r2, [r1, #0]
 8007352:	4614      	mov	r4, r2
 8007354:	b99c      	cbnz	r4, 800737e <_malloc_r+0x56>
 8007356:	4f20      	ldr	r7, [pc, #128]	; (80073d8 <_malloc_r+0xb0>)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	b923      	cbnz	r3, 8007366 <_malloc_r+0x3e>
 800735c:	4621      	mov	r1, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f000 f862 	bl	8007428 <_sbrk_r>
 8007364:	6038      	str	r0, [r7, #0]
 8007366:	4629      	mov	r1, r5
 8007368:	4630      	mov	r0, r6
 800736a:	f000 f85d 	bl	8007428 <_sbrk_r>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d123      	bne.n	80073ba <_malloc_r+0x92>
 8007372:	230c      	movs	r3, #12
 8007374:	6033      	str	r3, [r6, #0]
 8007376:	4630      	mov	r0, r6
 8007378:	f000 f86c 	bl	8007454 <__malloc_unlock>
 800737c:	e7e3      	b.n	8007346 <_malloc_r+0x1e>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	1b5b      	subs	r3, r3, r5
 8007382:	d417      	bmi.n	80073b4 <_malloc_r+0x8c>
 8007384:	2b0b      	cmp	r3, #11
 8007386:	d903      	bls.n	8007390 <_malloc_r+0x68>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	441c      	add	r4, r3
 800738c:	6025      	str	r5, [r4, #0]
 800738e:	e004      	b.n	800739a <_malloc_r+0x72>
 8007390:	6863      	ldr	r3, [r4, #4]
 8007392:	42a2      	cmp	r2, r4
 8007394:	bf0c      	ite	eq
 8007396:	600b      	streq	r3, [r1, #0]
 8007398:	6053      	strne	r3, [r2, #4]
 800739a:	4630      	mov	r0, r6
 800739c:	f000 f85a 	bl	8007454 <__malloc_unlock>
 80073a0:	f104 000b 	add.w	r0, r4, #11
 80073a4:	1d23      	adds	r3, r4, #4
 80073a6:	f020 0007 	bic.w	r0, r0, #7
 80073aa:	1ac2      	subs	r2, r0, r3
 80073ac:	d0cc      	beq.n	8007348 <_malloc_r+0x20>
 80073ae:	1a1b      	subs	r3, r3, r0
 80073b0:	50a3      	str	r3, [r4, r2]
 80073b2:	e7c9      	b.n	8007348 <_malloc_r+0x20>
 80073b4:	4622      	mov	r2, r4
 80073b6:	6864      	ldr	r4, [r4, #4]
 80073b8:	e7cc      	b.n	8007354 <_malloc_r+0x2c>
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d0e3      	beq.n	800738c <_malloc_r+0x64>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4630      	mov	r0, r6
 80073c8:	f000 f82e 	bl	8007428 <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1dd      	bne.n	800738c <_malloc_r+0x64>
 80073d0:	e7cf      	b.n	8007372 <_malloc_r+0x4a>
 80073d2:	bf00      	nop
 80073d4:	2000017c 	.word	0x2000017c
 80073d8:	20000180 	.word	0x20000180

080073dc <_realloc_r>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	4607      	mov	r7, r0
 80073e0:	4614      	mov	r4, r2
 80073e2:	460e      	mov	r6, r1
 80073e4:	b921      	cbnz	r1, 80073f0 <_realloc_r+0x14>
 80073e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073ea:	4611      	mov	r1, r2
 80073ec:	f7ff bf9c 	b.w	8007328 <_malloc_r>
 80073f0:	b922      	cbnz	r2, 80073fc <_realloc_r+0x20>
 80073f2:	f7ff ff49 	bl	8007288 <_free_r>
 80073f6:	4625      	mov	r5, r4
 80073f8:	4628      	mov	r0, r5
 80073fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073fc:	f000 f830 	bl	8007460 <_malloc_usable_size_r>
 8007400:	42a0      	cmp	r0, r4
 8007402:	d20f      	bcs.n	8007424 <_realloc_r+0x48>
 8007404:	4621      	mov	r1, r4
 8007406:	4638      	mov	r0, r7
 8007408:	f7ff ff8e 	bl	8007328 <_malloc_r>
 800740c:	4605      	mov	r5, r0
 800740e:	2800      	cmp	r0, #0
 8007410:	d0f2      	beq.n	80073f8 <_realloc_r+0x1c>
 8007412:	4631      	mov	r1, r6
 8007414:	4622      	mov	r2, r4
 8007416:	f7ff ff0f 	bl	8007238 <memcpy>
 800741a:	4631      	mov	r1, r6
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff ff33 	bl	8007288 <_free_r>
 8007422:	e7e9      	b.n	80073f8 <_realloc_r+0x1c>
 8007424:	4635      	mov	r5, r6
 8007426:	e7e7      	b.n	80073f8 <_realloc_r+0x1c>

08007428 <_sbrk_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d06      	ldr	r5, [pc, #24]	; (8007444 <_sbrk_r+0x1c>)
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	4608      	mov	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fa f9ae 	bl	8001794 <_sbrk>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_sbrk_r+0x1a>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_sbrk_r+0x1a>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	20000414 	.word	0x20000414

08007448 <__malloc_lock>:
 8007448:	4801      	ldr	r0, [pc, #4]	; (8007450 <__malloc_lock+0x8>)
 800744a:	f000 b811 	b.w	8007470 <__retarget_lock_acquire_recursive>
 800744e:	bf00      	nop
 8007450:	2000041c 	.word	0x2000041c

08007454 <__malloc_unlock>:
 8007454:	4801      	ldr	r0, [pc, #4]	; (800745c <__malloc_unlock+0x8>)
 8007456:	f000 b80c 	b.w	8007472 <__retarget_lock_release_recursive>
 800745a:	bf00      	nop
 800745c:	2000041c 	.word	0x2000041c

08007460 <_malloc_usable_size_r>:
 8007460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007464:	1f18      	subs	r0, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfbc      	itt	lt
 800746a:	580b      	ldrlt	r3, [r1, r0]
 800746c:	18c0      	addlt	r0, r0, r3
 800746e:	4770      	bx	lr

08007470 <__retarget_lock_acquire_recursive>:
 8007470:	4770      	bx	lr

08007472 <__retarget_lock_release_recursive>:
 8007472:	4770      	bx	lr

08007474 <_init>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr

08007480 <_fini>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	bf00      	nop
 8007484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007486:	bc08      	pop	{r3}
 8007488:	469e      	mov	lr, r3
 800748a:	4770      	bx	lr
